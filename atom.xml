<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A.binのBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-22T07:11:48.677Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>A.bin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux基础指令</title>
    <link href="http://example.com/2021/04/22/Linux/"/>
    <id>http://example.com/2021/04/22/Linux/</id>
    <published>2021-04-22T10:50:34.000Z</published>
    <updated>2021-04-22T07:11:48.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基础命令"><a href="#1-基础命令" class="headerlink" title="1.基础命令"></a>1.基础命令</h1><h2 id="1）文件处理命令"><a href="#1）文件处理命令" class="headerlink" title="1）文件处理命令"></a>1）文件处理命令</h2><h4 id="1-ls命令（目录处理命令）"><a href="#1-ls命令（目录处理命令）" class="headerlink" title="1.ls命令（目录处理命令）"></a><strong>1.ls命令（目录处理命令）</strong></h4><ul><li>​            ls 展示根目录下的文件</li></ul><ul><li>​            ls-a显示所有文件</li></ul><ul><li><p>​            ls-l 详细信息显示</p><ul><li>第三部分为所有者、第四部门为所属组、第五部分为文件大小(-h为人性化显示)</li></ul></li><li><p>开头十个字符：例：-rw-r–r–</p><ul><li>u(所有者)  g(所属组)  o(其他人)   （每三个一组）</li><li>​                r读         w写        x执行</li><li>表示文件、 d 表示目录、 l 为软链接（最常见的三种）</li></ul></li><li><p>​            ls-d 查看目录属性</p></li><li><p>​            目录处理命令</p><ul><li>mkdir、cd 、pwd（显示当前所在目录，绝对路径）、rmdir（删除空目录）、cp    </li><li>mkdir -p[目录名]  创建新目录  -p 递归创建</li><li>cd / （进入目录）  cd..(回到上一级目录)</li><li>cp -r （复制目录） 例：cp-r /要复制的目录/复制到哪      cp-p （保留文件属性）</li></ul></li></ul><p>​            </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-基础命令&quot;&gt;&lt;a href=&quot;#1-基础命令&quot; class=&quot;headerlink&quot; title=&quot;1.基础命令&quot;&gt;&lt;/a&gt;1.基础命令&lt;/h1&gt;&lt;h2 id=&quot;1）文件处理命令&quot;&gt;&lt;a href=&quot;#1）文件处理命令&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="-Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="-Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="http://example.com/2021/04/21/PHP/"/>
    <id>http://example.com/2021/04/21/PHP/</id>
    <published>2021-04-21T15:50:34.000Z</published>
    <updated>2021-04-21T15:56:42.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-PHP基本语法"><a href="#1-PHP基本语法" class="headerlink" title="1.PHP基本语法"></a>1.PHP基本语法</h1><h2 id="1-1PHP概念"><a href="#1-1PHP概念" class="headerlink" title="1.1PHP概念"></a>1.1PHP概念</h2><ul><li><p>PHP的主要目标是允许网络开发人员快速编写动态页面。</p></li><li><p>细化点说PHP可以用于收集表单数据，生成动态网页，字符串处理，动态输出图像，处理服            务器端文件，与数据库交互，会话跟踪，处理XML文件支持大量的网络协议，服务器端的其他            相关操作！</p></li><li><p>PHP是脚本语言不需要事先编译,在服务器端运行！ </p><h2 id="1-2PHP语法"><a href="#1-2PHP语法" class="headerlink" title="1.2PHP语法"></a>1.2PHP语法</h2></li></ul><ul><li><p>PHP开始标记<br>​        <code>&lt;?php</code></p></li><li><p>PHP结束标记<br>​                <code>?&gt;</code></p></li><li><p>在一些PHP语句的结尾要加上(功能执行语句){在结构定义语句可以不用分号},分号表示一句话的结束,?&gt;就隐含一个分号，所以PHP代码最后一行可以不加分号。<br>​注释<br>​            多行注释:/<em>……</em>/<br>​            单行注释://</p></li><li><p>换行符 得加引号</p></li></ul><p>​             ‘<b>‘</p><h2 id="1-3变量"><a href="#1-3变量" class="headerlink" title="1.3变量"></a>1.3变量</h2><ul><li>PHP程序中使用变量不需要声明，这是python和c的不同</li></ul><ul><li>变量的销毁：unset($变量名称)</li></ul><ul><li>变量的命名规则：</li></ul><p>​                1）严格区分大小写</p><p>​                2）字母或下划线开头</p><p>​                3）最好不要用关键字作为变量</p><ul><li><p>可变变量<br>​         1）$abc=’test’; //定义了一个变量$abc里面存了值test<br>​         2）$$abc=’孙胜利’; //$test=’孙胜利’;</p></li><li><p>变量类型            </p></li></ul><p>​                1）bool (布尔型) 存放ture与flase<br>                2）int (整型)<br>                3）float (浮点型，也称double）</p><p>​                4）string (在定义一些简单的字符串的时候使用单引号这种方法效率比较高！）<br>​                5）定界符（同样可以表示变量，用&lt;&lt;&lt;）</p><p>​                    如：</p><p>​                    $a=&lt;&lt;&lt;www<br>​                   dwqdqwdwq{$b}dwqdqdqdqdwqdwqcwcfwefwefcscwecwefwdqwdqdefwefwefewfwe<br>​                   www; </p><p>​                 6）array (数组)<br>                 7）object (对象)<br>                 8）resource (资源)<br>​                 9）NULL（null表示一个变量没有值，表示空）</p><h2 id="1-4常量"><a href="#1-4常量" class="headerlink" title="1.4常量"></a>1.4常量</h2><!--“var_dump”是PHP中的调试函数，用于判断一个变量的类型与长度，并输出变量的数值。--><ul><li>定义和使用<br>​                    define(‘常量名称’,常量值) 或者 define(“常量名称”,常量值)<br>​                    常量的命名和变量一样 只能包含字母数字下划线 并且必须以字母或者下划线开头（通   常是大写）<br>​                    defined()函数来检查是否定义了某个常量</li></ul><ul><li>预定义常量（也叫魔术常量）</li></ul><p>​                    通常以__开头 常用的有：</p><p>​                    <strong><code>__LINE__</code></strong> 、 **<code>__FILE__ 、__DIR__</code><strong>、</strong><code>__FUNCTION__</code><strong>、</strong><code>__CLASS__</code><strong>、</strong><code>__TRAIT__</code>**、                     **<code>__METHOD__</code><strong>、</strong><code>__NAMESPACE__</code>**、</p><h2 id="1-5运算符"><a href="#1-5运算符" class="headerlink" title="1.5运算符"></a>1.5运算符</h2><!--总体与py、c差不多（省略）--><p>​        <strong>++ 自增</strong><br>​                前++<br>​                    当在一个语句里面需要使用到被自增的变量的值的时候，前++会先执行自增,然后再返回自                    增之后的值！<br>​                后++<br>​                    当在一个语句里面需要使用到被自增的变量的值的时候，后++会先返回变量的值然后再去                    执行自增</p><ul><li><p>字符串运算符<br>​                . 连接运算符<br>​                $a=’孙胜利’;<br>​                $b=’测试字符串连接符’;<br>​                echo $a.$b;</p></li><li><p>逻辑运算符 （参与逻辑运算的表达式的值是布尔类型的值，如果不是布尔类型的值会被PHP自动转换成布尔类型的值，然后再参与运算！）</p></li></ul><p>​                 逻辑异或：xor</p><ul><li>其他运算符</li></ul><p>​                1）?  :  （三元运算）<br>​                格式：<br>​                    表达式1 ? 表达式2 : 表达式3;<br>​                    如果表达式1的值为true,那么就执行表达式2,否则那么就执行表达式3</p><p>​                2）``</p><p>​                可以把系统的命令放在里面执行！例如：$a=`ipconfig`\</p><p>​                3）@  屏蔽表达式可能发生的错误！或者不想显示此处的错误</p><p>​                4）=&gt;<br>​                5）-&gt;<br>​                6）instanceof 确定一个 PHP 变量是否属于某一类</p><h2 id="1-6流程控制"><a href="#1-6流程控制" class="headerlink" title="1.6流程控制"></a>1.6流程控制</h2><ul><li>if<!--与c和python使用相同--></li></ul><p>​                    if(){</p><p>​                            }else{</p><p>​                                        }</p><ul><li>switch<!--与c和python使用相同--></li></ul><p>​                1）不要忘记break语句！来跳出switch语句！每个case语句后面都加上break</p><p>​                2）case后面的语句块是不需要{}括起来的</p><ul><li><p>while和do while<!--与c和python使用相同--></p><p>​    与while语句区别就是，do while语句至少会执行一次！</p></li><li><p>for<!--与c使用相同--></p></li></ul><p>​                for(表达式a;表达式b;表达式c){<br>​                    各种语句<br>​                    }</p><ul><li>流程控制语句</li></ul><p>​                1）.break语句<br>​                    作用：用于switch语句，for，while，do…while，foreach，用于中断这些语句！<br>​                    后面可以接上一个数字来表示跳出几层循环！默认不加就是跳出当前循环语句！<br>​                2）.continue语句<br>​                    作用：只能用在循环语句，跳出本次循环，并不是结束整个循环语句！<br>​                3）.exit()语句或die()语句<br>​                    作用：结束当前整个程序的执行！ 函数输出一条消息，并退出当前脚本。</p><h2 id="1-7函数"><a href="#1-7函数" class="headerlink" title="1.7函数"></a>1.7函数</h2><ul><li>function 函数名([形式参数1,形式参数2,….形式参数n]){</li></ul><p>​                }</p><ul><li><p>PHP变量的范围<br>​            1.<u>局部变量</u><br>​                function test(){<br>​                $a=1;//局部变量$a，尽在这个函数内部有效<br>​                }<br>​                echo $a;</p></li><li><p>全局变量<br>​                <code>$i=10;//全局变量（外部变量）</code><br><code>​                define(&#39;MY_NAME&#39;,&#39;孙胜利&#39;);</code><br><code>​                function test()&#123;</code><br><code>​                echo MY_NAME;</code><br><code>​                **&lt;u&gt;*global*&lt;/u&gt;** $i;//声明$i为全局变量,然后再这个函数内部就可以使用$i</code><br><code>​                echo $i;</code><br><code>​                $a=1;</code><br><code>​                &#125;</code><br><code>​                test();</code></p></li><li><p>静态变量<br>​                function test(){<br>​                static $a=10;//静态变量$a,初始化静态变量,尽在第一次调用的时候执行<br>​                echo ++$a;//当第二次执行这个函数的时候$a这个变量依然存在并且里面的也值依然存   在！<br>​                }</p></li><li><p>参数的传递</p></li></ul><p>​                1）按值传递参数<!--默认,最常用--></p><p>​                        <code>function test($a)&#123;&#125;</code></p><p>​                        <code>$i=10</code></p><p>​                        <code>text($i)</code></p><p>​                2）按引用传递参数(相当于形式参数和实际参数指的是同一个)</p><p>​                        <code>function text(&amp;$a)&#123;&#125;</code></p><p>​                        <code>$i=10</code></p><p>​                        <code>text($i)       /* $i的值始终与$a相等*/</code></p><p>​                3）函数的默认参数</p><p>​                        给形式参数加默认值的时候是重右往左加的    </p><p>​                4）.可变长度参数列表</p><p>​                        func_get_args();（可以调用函数里的全部参数）<br>​                        func_get_arg();（类似数组，括号里输入数字可以获取第几个实参）<br>​                        func_num_args();（获取调用的参数数量）</p><ul><li><strong>递归函数</strong></li></ul><p>​        <!--递归函数即在函数内部自己调用自己的函数--><br>​            1）里面的变量默认都是局部变量，相互之间没有影响！没有联系，只是存储了数据。<br>​            2）递归函数，在函数的内部需要有适时结束函数运行的条件！</p><p>​            3）为什么要回归？</p><p>​            因为之前的程序没执行完，只执行了if语句，当n=0时返回上一级调用它的地方，即输出<code>%n.&amp;nbsp</code></p><p><img src="https://www.hualigs.cn/image/608048d14d355.jpg" alt="递归函数图例"></p><h2 id="1-8数组"><a href="#1-8数组" class="headerlink" title="1.8数组"></a>1.8数组</h2><ul><li>array()函数  变量名称[索引值]=数据    变量名称[]=数据  （从0开始） 也可用索引值=&gt;数据            导入</li></ul><p>​                                 多维数组：变量名称[]]]</p><ul><li>数组遍历</li></ul><p>​                1）for循环<br>​                2）foreach语句</p><p>​                            <code>foreach(数组变量 as 变量1)&#123;</code></p><p>​                                    <code>echo 变量1;</code></p><p>​                            <code>&#125;</code></p><p>​                            <code>foreach(数组变量 as 变量1=&gt;变量2)&#123;</code></p><p>​                                    <code>echo 变量1.&#39;=&gt;&#39;.变量2;</code></p><p>​                            <code>&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-PHP基本语法&quot;&gt;&lt;a href=&quot;#1-PHP基本语法&quot; class=&quot;headerlink&quot; title=&quot;1.PHP基本语法&quot;&gt;&lt;/a&gt;1.PHP基本语法&lt;/h1&gt;&lt;h2 id=&quot;1-1PHP概念&quot;&gt;&lt;a href=&quot;#1-1PHP概念&quot; class=&quot;</summary>
      
    
    
    
    <category term="-PHP -代码审计" scheme="http://example.com/categories/PHP-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
  </entry>
  
</feed>
