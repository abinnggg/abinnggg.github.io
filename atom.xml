<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A.bin&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-21T15:48:24.340Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>A.bin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="http://example.com/2021/04/21/PHP/"/>
    <id>http://example.com/2021/04/21/PHP/</id>
    <published>2021-04-21T15:50:34.000Z</published>
    <updated>2021-04-21T15:48:24.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-PHP基本语法"><a href="#1-PHP基本语法" class="headerlink" title="1.PHP基本语法"></a>1.PHP基本语法</h1><h2 id="1-1PHP概念"><a href="#1-1PHP概念" class="headerlink" title="1.1PHP概念"></a>1.1PHP概念</h2><ul><li><p>PHP的主要目标是允许网络开发人员快速编写动态页面。</p></li><li><p>细化点说PHP可以用于收集表单数据，生成动态网页，字符串处理，动态输出图像，处理服            务器端文件，与数据库交互，会话跟踪，处理XML文件支持大量的网络协议，服务器端的其他            相关操作！</p></li><li><p>PHP是脚本语言不需要事先编译,在服务器端运行！ </p><h2 id="1-2PHP语法"><a href="#1-2PHP语法" class="headerlink" title="1.2PHP语法"></a>1.2PHP语法</h2></li></ul><ul><li><p>PHP开始标记<br>​        <code>&lt;?php</code></p></li><li><p>PHP结束标记<br>​                <code>?&gt;</code></p></li><li><p>在一些PHP语句的结尾要加上(功能执行语句){在结构定义语句可以不用分号},分号表示一句话的结束,?&gt;就隐含一个分号，所以PHP代码最后一行可以不加分号。<br>​注释<br>​            多行注释:/<em>……</em>/<br>​            单行注释://</p></li><li><p>换行符 得加引号</p></li></ul><p>​             ‘<b>‘</p><h2 id="1-3变量"><a href="#1-3变量" class="headerlink" title="1.3变量"></a>1.3变量</h2><ul><li>PHP程序中使用变量不需要声明，这是python和c的不同</li></ul><ul><li>变量的销毁：unset($变量名称)</li></ul><ul><li>变量的命名规则：</li></ul><p>​                1）严格区分大小写</p><p>​                2）字母或下划线开头</p><p>​                3）最好不要用关键字作为变量</p><ul><li><p>可变变量<br>​         1）$abc=’test’; //定义了一个变量$abc里面存了值test<br>​         2）$$abc=’孙胜利’; //$test=’孙胜利’;</p></li><li><p>变量类型            </p></li></ul><p>​                1）bool (布尔型) 存放ture与flase<br>                2）int (整型)<br>                3）float (浮点型，也称double）</p><p>​                4）string (在定义一些简单的字符串的时候使用单引号这种方法效率比较高！）<br>​                5）定界符（同样可以表示变量，用&lt;&lt;&lt;）</p><p>​                    如：</p><p>​                    $a=&lt;&lt;&lt;www<br>​                   dwqdqwdwq{$b}dwqdqdqdqdwqdwqcwcfwefwefcscwecwefwdqwdqdefwefwefewfwe<br>​                   www; </p><p>​                 6）array (数组)<br>                 7）object (对象)<br>                 8）resource (资源)<br>​                 9）NULL（null表示一个变量没有值，表示空）</p><h2 id="1-4常量"><a href="#1-4常量" class="headerlink" title="1.4常量"></a>1.4常量</h2><!--“var_dump”是PHP中的调试函数，用于判断一个变量的类型与长度，并输出变量的数值。--><ul><li>定义和使用<br>​                    define(‘常量名称’,常量值) 或者 define(“常量名称”,常量值)<br>​                    常量的命名和变量一样 只能包含字母数字下划线 并且必须以字母或者下划线开头（通   常是大写）<br>​                    defined()函数来检查是否定义了某个常量</li></ul><ul><li>预定义常量（也叫魔术常量）</li></ul><p>​                    通常以__开头 常用的有：</p><p>​                    <strong><code>__LINE__</code></strong> 、 **<code>__FILE__ 、__DIR__</code><strong>、</strong><code>__FUNCTION__</code><strong>、</strong><code>__CLASS__</code><strong>、</strong><code>__TRAIT__</code>**、                     **<code>__METHOD__</code><strong>、</strong><code>__NAMESPACE__</code>**、</p><h2 id="1-5运算符"><a href="#1-5运算符" class="headerlink" title="1.5运算符"></a>1.5运算符</h2><!--总体与py、c差不多（省略）--><p>​        <strong>++ 自增</strong><br>​                前++<br>​                    当在一个语句里面需要使用到被自增的变量的值的时候，前++会先执行自增,然后再返回自                    增之后的值！<br>​                后++<br>​                    当在一个语句里面需要使用到被自增的变量的值的时候，后++会先返回变量的值然后再去                    执行自增</p><ul><li><p>字符串运算符<br>​                . 连接运算符<br>​                $a=’孙胜利’;<br>​                $b=’测试字符串连接符’;<br>​                echo $a.$b;</p></li><li><p>逻辑运算符 （参与逻辑运算的表达式的值是布尔类型的值，如果不是布尔类型的值会被PHP自动转换成布尔类型的值，然后再参与运算！）</p></li></ul><p>​                 逻辑异或：xor</p><ul><li>其他运算符</li></ul><p>​                1）?  :  （三元运算）<br>​                格式：<br>​                    表达式1 ? 表达式2 : 表达式3;<br>​                    如果表达式1的值为true,那么就执行表达式2,否则那么就执行表达式3</p><p>​                2）``</p><p>​                可以把系统的命令放在里面执行！例如：$a=`ipconfig`\</p><p>​                3）@  屏蔽表达式可能发生的错误！或者不想显示此处的错误</p><p>​                4）=&gt;<br>​                5）-&gt;<br>​                6）instanceof 确定一个 PHP 变量是否属于某一类</p><h2 id="1-6流程控制"><a href="#1-6流程控制" class="headerlink" title="1.6流程控制"></a>1.6流程控制</h2><ul><li>if(与c和python使用相同)</li></ul><p>​                    if(){</p><p>​                            }else{</p><p>​                                        }</p><ul><li>switch(与c和python使用相同)</li></ul><p>​                1）不要忘记break语句！来跳出switch语句！每个case语句后面都加上break</p><p>​                2）case后面的语句块是不需要{}括起来的</p><ul><li><p>while和do while(与c和python使用相同)</p><p>​    与while语句区别就是，do while语句至少会执行一次！</p></li><li><p>for(与c使用相同)</p></li></ul><p>​                for(表达式a;表达式b;表达式c){<br>​                    各种语句<br>​                    }</p><ul><li>流程控制语句</li></ul><p>​                1）.break语句<br>​                    作用：用于switch语句，for，while，do…while，foreach，用于中断这些语句！<br>​                    后面可以接上一个数字来表示跳出几层循环！默认不加就是跳出当前循环语句！<br>​                2）.continue语句<br>​                    作用：只能用在循环语句，跳出本次循环，并不是结束整个循环语句！<br>​                3）.exit()语句或die()语句<br>​                    作用：结束当前整个程序的执行！ 函数输出一条消息，并退出当前脚本。</p><h2 id="1-7函数"><a href="#1-7函数" class="headerlink" title="1.7函数"></a>1.7函数</h2><ul><li>function 函数名([形式参数1,形式参数2,….形式参数n]){</li></ul><p>​                }</p><ul><li><p>PHP变量的范围<br>​            1.<u>局部变量</u><br>​                function test(){<br>​                $a=1;//局部变量$a，尽在这个函数内部有效<br>​                }<br>​                echo $a;</p></li><li><p>全局变量<br>​                <code>$i=10;//全局变量（外部变量）</code><br><code>​                define(&#39;MY_NAME&#39;,&#39;孙胜利&#39;);</code><br><code>​                function test()&#123;</code><br><code>​                echo MY_NAME;</code><br><code>​                **&lt;u&gt;*global*&lt;/u&gt;** $i;//声明$i为全局变量,然后再这个函数内部就可以使用$i</code><br><code>​                echo $i;</code><br><code>​                $a=1;</code><br><code>​                &#125;</code><br><code>​                test();</code></p></li><li><p>静态变量<br>​                function test(){<br>​                static $a=10;//静态变量$a,初始化静态变量,尽在第一次调用的时候执行<br>​                echo ++$a;//当第二次执行这个函数的时候$a这个变量依然存在并且里面的也值依然存   在！<br>​                }</p></li><li><p>参数的传递</p></li></ul><p>​                1）按值传递参数(默认,最常用)</p><p>​                        <code>function test($a)&#123;&#125;</code></p><p>​                        <code>$i=10</code></p><p>​                        <code>text($i)</code></p><p>​                2）按引用传递参数(相当于形式参数和实际参数指的是同一个)</p><p>​                        <code>function text(&amp;$a)&#123;&#125;</code></p><p>​                        <code>$i=10</code></p><p>​                        <code>text($i)       /* $i的值始终与$a相等*/</code></p><p>​                3）函数的默认参数</p><p>​                        给形式参数加默认值的时候是重右往左加的    </p><p>​                3）.可变长度参数列表</p><p>​                        func_get_args();（可以调用函数里的全部参数）<br>​                        func_get_arg();（类似数组，括号里输入数字可以获取第几个实参）<br>​                        func_num_args();（获取调用的参数数量）</p><ul><li>递归函数</li></ul><p>​            （递归函数即在函数内部自己调用自己的函数。）<br>​            1）里面的变量默认都是局部变量，相互之间没有影响！没有联系，只是存储了数据。<br>​            2）递归函数，在函数的内部需要有适时结束函数运行的条件！</p><p>​            3）为什么要回归？</p><p>​            因为之前的程序没执行完，只执行了if语句，当n=0时返回上一级调用它的地方，即输出<code>%n.&amp;nbsp</code></p><p><img src="https://www.hualigs.cn/image/608048d14d355.jpg" alt="递归函数图例"></p><h2 id="1-8数组"><a href="#1-8数组" class="headerlink" title="1.8数组"></a>1.8数组</h2><ul><li>array()函数  变量名称[索引值]=数据    变量名称[]=数据  （从0开始） 也可用索引值=&gt;数据            导入</li></ul><p>​                                 多维数组：变量名称[]]]</p><ul><li>数组遍历</li></ul><p>​                1）for循环<br>​                2）foreach语句</p><p>​                            <code>foreach(数组变量 as 变量1)&#123;</code></p><p>​                                    <code>echo 变量1;</code></p><p>​                            <code>&#125;</code></p><p>​                            <code>foreach(数组变量 as 变量1=&gt;变量2)&#123;</code></p><p>​                                    <code>echo 变量1.&#39;=&gt;&#39;.变量2;</code></p><p>​                            <code>&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-PHP基本语法&quot;&gt;&lt;a href=&quot;#1-PHP基本语法&quot; class=&quot;headerlink&quot; title=&quot;1.PHP基本语法&quot;&gt;&lt;/a&gt;1.PHP基本语法&lt;/h1&gt;&lt;h2 id=&quot;1-1PHP概念&quot;&gt;&lt;a href=&quot;#1-1PHP概念&quot; class=&quot;</summary>
      
    
    
    
    <category term="-PHP -代码审计" scheme="http://example.com/categories/PHP-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫与面向对象爬虫</title>
    <link href="http://example.com/2021/04/21/%E7%88%AC%E8%99%AB/"/>
    <id>http://example.com/2021/04/21/%E7%88%AC%E8%99%AB/</id>
    <published>2021-04-21T10:50:34.000Z</published>
    <updated>2021-04-21T14:45:06.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="普通面向对象（爬取burst-shopify-com下的图片）"><a href="#普通面向对象（爬取burst-shopify-com下的图片）" class="headerlink" title="普通面向对象（爬取burst.shopify.com下的图片）"></a>普通面向对象（爬取burst.shopify.com下的图片）</h1><h3 id="总体思想"><a href="#总体思想" class="headerlink" title="总体思想:"></a><strong>总体思想</strong>:</h3><ol><li>​    观察网页构造，为写代码做准备，检查是否有反爬技术</li><li>​    检查所要下载的图片，观察格式，并且构造正则表达式</li><li>​    过滤重复的图片</li><li>​    保存图片，并作相关优化</li></ol><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a><strong>代码如下：</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">x&#x3D;0</span><br><span class="line">j&#x3D;1</span><br><span class="line">count&#x3D;0</span><br><span class="line">print(&quot;&#39;animals&#39; &#39;city&#39; &#39;home&#39; &#39;seasons&#39; &#39;education&#39; &#39;landscape&#39; &#39;family&#39; \n &quot;</span><br><span class="line">      &quot;&#39;love&#39; &#39;around the world&#39; &#39;arts&#39; &#39;technology&#39; &#39;outdoor&#39; &#39;backgrounds&#39; \n &quot;</span><br><span class="line">      &quot;&#39;fashion&#39; &#39;beauty&#39; &#39;people&#39; &#39;transportation&#39; &#39;business&#39; \n &quot;</span><br><span class="line">      &quot;&#39;fitness&#39; &#39;travel&#39; &#39;flowers&#39; &#39;work&#39; &#39;food&#39; &#39;holidays&#39; &#39;celebrate&#39;&quot;)</span><br><span class="line"></span><br><span class="line">    #&#123;设置头，反爬&#125;</span><br><span class="line">headers&#x3D;&#123;</span><br><span class="line">&quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;89.0.4389.128 Safari&#x2F;537.36&quot;</span><br><span class="line">&#125;</span><br><span class="line">key &#x3D; input(&#39;请从上面挑选出要下载的图片类型：&#39;)</span><br><span class="line">num &#x3D; int(input(&#39;请输入一共要下载的页数：&#39;))</span><br><span class="line"></span><br><span class="line">    # &#123;请求url与编写正则表达式&#125;</span><br><span class="line">if num &gt;&#x3D; 1:</span><br><span class="line">    while j &lt;&#x3D; num:</span><br><span class="line">        url &#x3D; &#39;https:&#x2F;&#x2F;burst.shopify.com&#x2F;&#39; + key + &#39;?page&#x3D;&#39; + str(j)</span><br><span class="line">        resp&#x3D;requests.get(url,headers&#x3D;headers)</span><br><span class="line">        html&#x3D;resp.text</span><br><span class="line">        urls&#x3D;re.findall(&quot;https:&#x2F;&#x2F;burst.*?jpg&quot;, html)</span><br><span class="line">        lst&#x3D;[]</span><br><span class="line"></span><br><span class="line">    # &#123;当第二页刷新时有和第一页相同的图片,所以以下为去重代码&#125;</span><br><span class="line">        if j &#x3D;&#x3D; 1 :</span><br><span class="line">            for i in urls:   #遍历jpg</span><br><span class="line">                if i not in lst:</span><br><span class="line">                    lst.append(i)</span><br><span class="line">        elif j&gt;1:</span><br><span class="line">            for i in urls:</span><br><span class="line">                if i not in lst2 and i not in lst:  #判断新urls里的jpg是否与lst列表里的相同</span><br><span class="line">                    lst.append(i)</span><br><span class="line"></span><br><span class="line">    # &#123;保存图片&#125;</span><br><span class="line">        for url in lst:</span><br><span class="line">            file_name &#x3D;&quot;E:&#x2F;大学&#x2F;python爬虫&#x2F;&quot;+ str(j) + &#39;.&#39; + str(x) + &quot;.jpg&quot;   #设置文件名</span><br><span class="line">            resp &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line">            with open(file_name, &#39;wb&#39;) as f:    #以二进制的方式写进</span><br><span class="line">                f.write(resp.content)</span><br><span class="line">            print(&quot;正在下载第&#123;0&#125;页第&#123;1&#125;张图片&quot;.format(j,x))</span><br><span class="line">            x&#x3D;x+1</span><br><span class="line"></span><br><span class="line">    # &#123;计数部分&#125;</span><br><span class="line">            if x&#x3D;&#x3D;len(lst):</span><br><span class="line">                if j !&#x3D; 1:</span><br><span class="line">                    pass        # 这一部分if指lst2&#x3D;lst只执行一次，</span><br><span class="line">                else:</span><br><span class="line">                    lst2 &#x3D; lst</span><br><span class="line">                x&#x3D;0</span><br><span class="line">                j&#x3D;j+1</span><br><span class="line">                count +&#x3D; len(lst)</span><br><span class="line">print(&quot;下载完成！共下载&#123;0&#125;张图片&quot;.format(count))</span><br></pre></td></tr></table></figure><h1 id="面向对象爬虫（爬取burst-shopify-com下的图片）"><a href="#面向对象爬虫（爬取burst-shopify-com下的图片）" class="headerlink" title="面向对象爬虫（爬取burst.shopify.com下的图片）"></a>面向对象爬虫（爬取burst.shopify.com下的图片）</h1><p>​    所谓面向对象也就是通过创建一个类，再创建若干个对象，然后再统一调动</p><h3 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">from urllib.request import urlretrieve</span><br><span class="line">class Tupian(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.base_url&#x3D;&quot;https:&#x2F;&#x2F;burst.shopify.com&#x2F;love?page&#x3D;&#123;&#125;&quot;</span><br><span class="line">        self.header&#x3D;&#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;89.0.4389.128 Safari&#x2F;537.36&quot;</span><br><span class="line">                     &#125;</span><br><span class="line">    def Geturl(self):</span><br><span class="line">        all_url &#x3D; []</span><br><span class="line">        for str in range(1,3):</span><br><span class="line">            all_url.append(self.base_url.format(str))</span><br><span class="line">        return all_url</span><br><span class="line"></span><br><span class="line">    def Respons(self,all_url):</span><br><span class="line">        text_list &#x3D; []</span><br><span class="line">        for url in all_url:</span><br><span class="line">            r &#x3D; requests.get(url, headers&#x3D;self.header)</span><br><span class="line">            text_list.append(r.text)</span><br><span class="line">        return text_list</span><br><span class="line"></span><br><span class="line">    def clear(self, respons):</span><br><span class="line">        for i in respons:</span><br><span class="line">            qqq &#x3D; &quot;https:&#x2F;&#x2F;burst.*?jpg&quot;</span><br><span class="line">            pi &#x3D; re.findall(qqq, i)</span><br><span class="line">            lst&#x3D;[]</span><br><span class="line">            for j in pi:   #遍历jpg</span><br><span class="line">                if j not in lst:</span><br><span class="line">                    lst.append(j)</span><br><span class="line">            return lst</span><br><span class="line"></span><br><span class="line">    def save(self, url_list):</span><br><span class="line">        x&#x3D;0</span><br><span class="line">        for url in url_list:</span><br><span class="line">            x &#x3D; x + 1</span><br><span class="line">            print(url)</span><br><span class="line">            file_name &#x3D; &quot;E:&#x2F;大学&#x2F;python面向对象爬虫&#x2F;&quot;+ str(x) + &quot;.jpg&quot;</span><br><span class="line">            urlretrieve(url, file_name)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        titile_url &#x3D; self.Geturl()</span><br><span class="line">        respons &#x3D; self.Respons(titile_url)</span><br><span class="line">        picture &#x3D; self.clear(respons)</span><br><span class="line">        print(picture)</span><br><span class="line">        download &#x3D; self.save(picture)</span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    tupian &#x3D; Tupian()</span><br><span class="line">    tupian.run()</span><br></pre></td></tr></table></figure><h1 id="爬虫笔记："><a href="#爬虫笔记：" class="headerlink" title="爬虫笔记："></a>爬虫笔记：</h1><h2 id="抓取网页源代码"><a href="#抓取网页源代码" class="headerlink" title="抓取网页源代码"></a>抓取网页源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from urllib.request import urlopen</span><br><span class="line">url &#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;</span><br><span class="line">resp &#x3D; urlopen(url)</span><br><span class="line">with open(&quot;my baidu.html&quot;,&quot;w&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:  #把读取的数据放入一个html文件里</span><br><span class="line">    f.write(resp.read().decode(&quot;utf-8&quot;))#读取到页面源代码</span><br></pre></td></tr></table></figure><h2 id="Web请求过程剖析"><a href="#Web请求过程剖析" class="headerlink" title="Web请求过程剖析"></a>Web请求过程剖析</h2><ul><li>服务器渲染：在服务器那边直接把数据和html整合在一起，统一返回给浏览器</li></ul><ul><li> 客户端渲染：第一次请求只要一个html护甲，第二次请求拿到数据，进行数据展示，也就是在页面源    代码中看不到数据。（因为超链接，已经进入下一个网页）</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><img src="https://www.hualigs.cn/image/6080384636f52.jpg" alt="正则表达式"></p><p><img src="https://www.hualigs.cn/image/6080393d36a4d.jpg" alt="正则表达式"></p><p>​    <strong>.*?   尽可能少的匹配中间字符</strong></p><h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><ul><li><p>findall：匹配字符串中所有的符合正则的内容列表，效率不高）</p></li><li><p>finditer：匹配字符串中所有的内容【返回的是迭代器】，从迭代器中拿到内容需要.group()</p><p>​            <code>it = re.finditer(&quot;&quot;,&quot;&quot;)</code></p><p>​            <code>for i in it :</code></p><p>​        <code>print(i,group())</code></p></li><li><p>search：找到一个结果就返回，返回的结果是match对象，拿数据需要.group()</p></li><li><p>预加载正则表达式</p><p>​        <code>obj = re.compile(&quot;\d&quot;)</code></p><p>​        <code>xx=obj.finditer/search()</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;普通面向对象（爬取burst-shopify-com下的图片）&quot;&gt;&lt;a href=&quot;#普通面向对象（爬取burst-shopify-com下的图片）&quot; class=&quot;headerlink&quot; title=&quot;普通面向对象（爬取burst.shopify.com下的图片</summary>
      
    
    
    
    <category term="-Python -数据挖掘" scheme="http://example.com/categories/Python-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="-爬虫 -面向对象" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/04/20/hello-world/"/>
    <id>http://example.com/2021/04/20/hello-world/</id>
    <published>2021-04-20T10:28:31.440Z</published>
    <updated>2021-04-20T10:28:31.440Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
